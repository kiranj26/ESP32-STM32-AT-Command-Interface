
stm32-dma-stmcubeide-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c8  080032c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080032c8  080032c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032c8  080032c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032cc  080032cc  000132cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  2000000c  080032dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080032dc  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087fe  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b6  00000000  00000000  00028832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  00029ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  0002a540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbb9  00000000  00000000  0002ab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000908b  00000000  00000000  0003a6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cf59  00000000  00000000  00043754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a06ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001548  00000000  00000000  000a0700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003268 	.word	0x08003268

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003268 	.word	0x08003268

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000236:	f000 fac7 	bl	80007c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023a:	f000 f835 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023e:	f000 f8f3 	bl	8000428 <MX_GPIO_Init>
  MX_DMA_Init();
 8000242:	f000 f8d3 	bl	80003ec <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000246:	f000 f891 	bl	800036c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(5000); // Wait for ESP32 to stabilize
 800024a:	4b13      	ldr	r3, [pc, #76]	; (8000298 <main+0x68>)
 800024c:	0018      	movs	r0, r3
 800024e:	f000 fb1f 	bl	8000890 <HAL_Delay>
  // Enable UART1 IDLE Interrupt
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <main+0x6c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <main+0x6c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2110      	movs	r1, #16
 800025e:	430a      	orrs	r2, r1
 8000260:	601a      	str	r2, [r3, #0]

  // Start DMA reception
  HAL_UART_Receive_DMA(&huart1, rxBuffer, RX_BUFFER_SIZE);
 8000262:	2380      	movs	r3, #128	; 0x80
 8000264:	005a      	lsls	r2, r3, #1
 8000266:	490e      	ldr	r1, [pc, #56]	; (80002a0 <main+0x70>)
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <main+0x6c>)
 800026a:	0018      	movs	r0, r3
 800026c:	f001 fdca 	bl	8001e04 <HAL_UART_Receive_DMA>

  // Send AT command
  const char *atCommand = "AT+UART_CUR?\r\n";
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <main+0x74>)
 8000272:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit_IT(&huart1, (uint8_t *)atCommand, strlen(atCommand));
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	0018      	movs	r0, r3
 8000278:	f7ff ff46 	bl	8000108 <strlen>
 800027c:	0003      	movs	r3, r0
 800027e:	b29a      	uxth	r2, r3
 8000280:	6879      	ldr	r1, [r7, #4]
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <main+0x6c>)
 8000284:	0018      	movs	r0, r3
 8000286:	f001 fd4d 	bl	8001d24 <HAL_UART_Transmit_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Heartbeat LED
 800028a:	2390      	movs	r3, #144	; 0x90
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	2120      	movs	r1, #32
 8000290:	0018      	movs	r0, r3
 8000292:	f000 ffac 	bl	80011ee <HAL_GPIO_TogglePin>
 8000296:	e7f8      	b.n	800028a <main+0x5a>
 8000298:	00001388 	.word	0x00001388
 800029c:	20000028 	.word	0x20000028
 80002a0:	200000f4 	.word	0x200000f4
 80002a4:	08003280 	.word	0x08003280

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b095      	sub	sp, #84	; 0x54
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2420      	movs	r4, #32
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2330      	movs	r3, #48	; 0x30
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f002 ffcc 	bl	8003256 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	2310      	movs	r3, #16
 80002c0:	18fb      	adds	r3, r7, r3
 80002c2:	0018      	movs	r0, r3
 80002c4:	2310      	movs	r3, #16
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f002 ffc4 	bl	8003256 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ce:	003b      	movs	r3, r7
 80002d0:	0018      	movs	r0, r3
 80002d2:	2310      	movs	r3, #16
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 ffbd 	bl	8003256 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002dc:	0021      	movs	r1, r4
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2202      	movs	r2, #2
 80002e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2201      	movs	r2, #1
 80002e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2210      	movs	r2, #16
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2202      	movs	r2, #2
 80002f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	22a0      	movs	r2, #160	; 0xa0
 8000300:	0392      	lsls	r2, r2, #14
 8000302:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2200      	movs	r2, #0
 8000308:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	187b      	adds	r3, r7, r1
 800030c:	0018      	movs	r0, r3
 800030e:	f000 ff89 	bl	8001224 <HAL_RCC_OscConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000316:	f000 f907 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	2110      	movs	r1, #16
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2207      	movs	r2, #7
 8000320:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2202      	movs	r2, #2
 8000326:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2101      	movs	r1, #1
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fa8d 	bl	8001858 <HAL_RCC_ClockConfig>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000342:	f000 f8f1 	bl	8000528 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000346:	003b      	movs	r3, r7
 8000348:	2201      	movs	r2, #1
 800034a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800034c:	003b      	movs	r3, r7
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000352:	003b      	movs	r3, r7
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fbc3 	bl	8001ae0 <HAL_RCCEx_PeriphCLKConfig>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800035e:	f000 f8e3 	bl	8000528 <Error_Handler>
  }
}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	b015      	add	sp, #84	; 0x54
 8000368:	bd90      	pop	{r4, r7, pc}
	...

0800036c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000370:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 8000372:	4a1c      	ldr	r2, [pc, #112]	; (80003e4 <MX_USART1_UART_Init+0x78>)
 8000374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 8000378:	22e1      	movs	r2, #225	; 0xe1
 800037a:	0252      	lsls	r2, r2, #9
 800037c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ae:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 fc63 	bl	8001c7c <HAL_UART_Init>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d001      	beq.n	80003be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003ba:	f000 f8b5 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  // Link DMA to USART1 RX
  __HAL_LINKDMA(&huart1, hdmarx, hdma_usart1_rx);
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 80003c0:	4a09      	ldr	r2, [pc, #36]	; (80003e8 <MX_USART1_UART_Init+0x7c>)
 80003c2:	675a      	str	r2, [r3, #116]	; 0x74
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART1_UART_Init+0x7c>)
 80003c6:	4a06      	ldr	r2, [pc, #24]	; (80003e0 <MX_USART1_UART_Init+0x74>)
 80003c8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2101      	movs	r1, #1
 80003ce:	201b      	movs	r0, #27
 80003d0:	f000 fb2e 	bl	8000a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80003d4:	201b      	movs	r0, #27
 80003d6:	f000 fb40 	bl	8000a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000028 	.word	0x20000028
 80003e4:	40013800 	.word	0x40013800
 80003e8:	200000b0 	.word	0x200000b0

080003ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_DMA_Init+0x38>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_DMA_Init+0x38>)
 80003f8:	2101      	movs	r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	615a      	str	r2, [r3, #20]
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_DMA_Init+0x38>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	2201      	movs	r2, #1
 8000404:	4013      	ands	r3, r2
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	2100      	movs	r1, #0
 800040e:	200a      	movs	r0, #10
 8000410:	f000 fb0e 	bl	8000a30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000414:	200a      	movs	r0, #10
 8000416:	f000 fb20 	bl	8000a5a <HAL_NVIC_EnableIRQ>

}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b002      	add	sp, #8
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	40021000 	.word	0x40021000

08000428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b089      	sub	sp, #36	; 0x24
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	240c      	movs	r4, #12
 8000430:	193b      	adds	r3, r7, r4
 8000432:	0018      	movs	r0, r3
 8000434:	2314      	movs	r3, #20
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f002 ff0c 	bl	8003256 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043e:	4b38      	ldr	r3, [pc, #224]	; (8000520 <MX_GPIO_Init+0xf8>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b37      	ldr	r3, [pc, #220]	; (8000520 <MX_GPIO_Init+0xf8>)
 8000444:	2180      	movs	r1, #128	; 0x80
 8000446:	0309      	lsls	r1, r1, #12
 8000448:	430a      	orrs	r2, r1
 800044a:	615a      	str	r2, [r3, #20]
 800044c:	4b34      	ldr	r3, [pc, #208]	; (8000520 <MX_GPIO_Init+0xf8>)
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	031b      	lsls	r3, r3, #12
 8000454:	4013      	ands	r3, r2
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b31      	ldr	r3, [pc, #196]	; (8000520 <MX_GPIO_Init+0xf8>)
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	4b30      	ldr	r3, [pc, #192]	; (8000520 <MX_GPIO_Init+0xf8>)
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	03c9      	lsls	r1, r1, #15
 8000464:	430a      	orrs	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <MX_GPIO_Init+0xf8>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	03db      	lsls	r3, r3, #15
 8000470:	4013      	ands	r3, r2
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <MX_GPIO_Init+0xf8>)
 8000478:	695a      	ldr	r2, [r3, #20]
 800047a:	4b29      	ldr	r3, [pc, #164]	; (8000520 <MX_GPIO_Init+0xf8>)
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0289      	lsls	r1, r1, #10
 8000480:	430a      	orrs	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	4b26      	ldr	r3, [pc, #152]	; (8000520 <MX_GPIO_Init+0xf8>)
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	029b      	lsls	r3, r3, #10
 800048c:	4013      	ands	r3, r2
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000492:	2390      	movs	r3, #144	; 0x90
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	2200      	movs	r2, #0
 8000498:	2120      	movs	r1, #32
 800049a:	0018      	movs	r0, r3
 800049c:	f000 fe8a 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2280      	movs	r2, #128	; 0x80
 80004a4:	0192      	lsls	r2, r2, #6
 80004a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2284      	movs	r2, #132	; 0x84
 80004ac:	0392      	lsls	r2, r2, #14
 80004ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	4a1a      	ldr	r2, [pc, #104]	; (8000524 <MX_GPIO_Init+0xfc>)
 80004ba:	0019      	movs	r1, r3
 80004bc:	0010      	movs	r0, r2
 80004be:	f000 fd09 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	220c      	movs	r2, #12
 80004c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2202      	movs	r2, #2
 80004cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2201      	movs	r2, #1
 80004de:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	193a      	adds	r2, r7, r4
 80004e2:	2390      	movs	r3, #144	; 0x90
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fcf3 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004ee:	0021      	movs	r1, r4
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2220      	movs	r2, #32
 80004f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2201      	movs	r2, #1
 80004fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000508:	187a      	adds	r2, r7, r1
 800050a:	2390      	movs	r3, #144	; 0x90
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	0011      	movs	r1, r2
 8000510:	0018      	movs	r0, r3
 8000512:	f000 fcdf 	bl	8000ed4 <HAL_GPIO_Init>

}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b009      	add	sp, #36	; 0x24
 800051c:	bd90      	pop	{r4, r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	40021000 	.word	0x40021000
 8000524:	48000800 	.word	0x48000800

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	e7fe      	b.n	8000530 <Error_Handler+0x8>
	...

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x44>)
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <HAL_MspInit+0x44>)
 8000540:	2101      	movs	r1, #1
 8000542:	430a      	orrs	r2, r1
 8000544:	619a      	str	r2, [r3, #24]
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_MspInit+0x44>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	2201      	movs	r2, #1
 800054c:	4013      	ands	r3, r2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_MspInit+0x44>)
 8000554:	69da      	ldr	r2, [r3, #28]
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <HAL_MspInit+0x44>)
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	0549      	lsls	r1, r1, #21
 800055c:	430a      	orrs	r2, r1
 800055e:	61da      	str	r2, [r3, #28]
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_MspInit+0x44>)
 8000562:	69da      	ldr	r2, [r3, #28]
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	055b      	lsls	r3, r3, #21
 8000568:	4013      	ands	r3, r2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b08b      	sub	sp, #44	; 0x2c
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	2414      	movs	r4, #20
 8000586:	193b      	adds	r3, r7, r4
 8000588:	0018      	movs	r0, r3
 800058a:	2314      	movs	r3, #20
 800058c:	001a      	movs	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	f002 fe61 	bl	8003256 <memset>
  if(huart->Instance==USART1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a34      	ldr	r2, [pc, #208]	; (800066c <HAL_UART_MspInit+0xf0>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d162      	bne.n	8000664 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800059e:	4b34      	ldr	r3, [pc, #208]	; (8000670 <HAL_UART_MspInit+0xf4>)
 80005a0:	699a      	ldr	r2, [r3, #24]
 80005a2:	4b33      	ldr	r3, [pc, #204]	; (8000670 <HAL_UART_MspInit+0xf4>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	01c9      	lsls	r1, r1, #7
 80005a8:	430a      	orrs	r2, r1
 80005aa:	619a      	str	r2, [r3, #24]
 80005ac:	4b30      	ldr	r3, [pc, #192]	; (8000670 <HAL_UART_MspInit+0xf4>)
 80005ae:	699a      	ldr	r2, [r3, #24]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	01db      	lsls	r3, r3, #7
 80005b4:	4013      	ands	r3, r2
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <HAL_UART_MspInit+0xf4>)
 80005bc:	695a      	ldr	r2, [r3, #20]
 80005be:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <HAL_UART_MspInit+0xf4>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0289      	lsls	r1, r1, #10
 80005c4:	430a      	orrs	r2, r1
 80005c6:	615a      	str	r2, [r3, #20]
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <HAL_UART_MspInit+0xf4>)
 80005ca:	695a      	ldr	r2, [r3, #20]
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	029b      	lsls	r3, r3, #10
 80005d0:	4013      	ands	r3, r2
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	22c0      	movs	r2, #192	; 0xc0
 80005da:	00d2      	lsls	r2, r2, #3
 80005dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005de:	0021      	movs	r1, r4
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2202      	movs	r2, #2
 80005e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2201      	movs	r2, #1
 80005ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2203      	movs	r2, #3
 80005f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2201      	movs	r2, #1
 80005f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	187a      	adds	r2, r7, r1
 80005fa:	2390      	movs	r3, #144	; 0x90
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fc67 	bl	8000ed4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <HAL_UART_MspInit+0xf8>)
 8000608:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <HAL_UART_MspInit+0xfc>)
 800060a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <HAL_UART_MspInit+0xf8>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_UART_MspInit+0xf8>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <HAL_UART_MspInit+0xf8>)
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_UART_MspInit+0xf8>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_UART_MspInit+0xf8>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_UART_MspInit+0xf8>)
 800062c:	2220      	movs	r2, #32
 800062e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <HAL_UART_MspInit+0xf8>)
 8000632:	22c0      	movs	r2, #192	; 0xc0
 8000634:	0192      	lsls	r2, r2, #6
 8000636:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <HAL_UART_MspInit+0xf8>)
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fa2a 	bl	8000a94 <HAL_DMA_Init>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000644:	f7ff ff70 	bl	8000528 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <HAL_UART_MspInit+0xf8>)
 800064c:	675a      	str	r2, [r3, #116]	; 0x74
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_UART_MspInit+0xf8>)
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	201b      	movs	r0, #27
 800065a:	f000 f9e9 	bl	8000a30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800065e:	201b      	movs	r0, #27
 8000660:	f000 f9fb 	bl	8000a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b00b      	add	sp, #44	; 0x2c
 800066a:	bd90      	pop	{r4, r7, pc}
 800066c:	40013800 	.word	0x40013800
 8000670:	40021000 	.word	0x40021000
 8000674:	200000b0 	.word	0x200000b0
 8000678:	40020030 	.word	0x40020030

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <NMI_Handler+0x4>

08000682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <HardFault_Handler+0x4>

08000688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a0:	f000 f8da 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fb19 	bl	8000cea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	200000b0 	.word	0x200000b0

080006c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <USART1_IRQHandler+0x80>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	2210      	movs	r2, #16
 80006d0:	4013      	ands	r3, r2
 80006d2:	2b10      	cmp	r3, #16
 80006d4:	d12f      	bne.n	8000736 <USART1_IRQHandler+0x72>
    {
        // Clear the IDLE flag
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <USART1_IRQHandler+0x80>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2210      	movs	r2, #16
 80006dc:	621a      	str	r2, [r3, #32]

        // Stop DMA reception
        HAL_UART_DMAStop(&huart1);
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <USART1_IRQHandler+0x80>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 fbe6 	bl	8001eb2 <HAL_UART_DMAStop>

        // Calculate the number of received bytes
        receivedLength = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <USART1_IRQHandler+0x84>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <USART1_IRQHandler+0x88>)
 80006f8:	801a      	strh	r2, [r3, #0]

        // Copy the received data into the response buffer
        memcpy(receivedData, rxBuffer, receivedLength);
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <USART1_IRQHandler+0x88>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	001a      	movs	r2, r3
 8000702:	4913      	ldr	r1, [pc, #76]	; (8000750 <USART1_IRQHandler+0x8c>)
 8000704:	4b13      	ldr	r3, [pc, #76]	; (8000754 <USART1_IRQHandler+0x90>)
 8000706:	0018      	movs	r0, r3
 8000708:	f002 fd9c 	bl	8003244 <memcpy>
        receivedData[receivedLength] = '\0'; // Null-terminate the string
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <USART1_IRQHandler+0x88>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	b29b      	uxth	r3, r3
 8000712:	001a      	movs	r2, r3
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <USART1_IRQHandler+0x90>)
 8000716:	2100      	movs	r1, #0
 8000718:	5499      	strb	r1, [r3, r2]

        // Clear the RX buffer
        memset(rxBuffer, 0, RX_BUFFER_SIZE);
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	005a      	lsls	r2, r3, #1
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <USART1_IRQHandler+0x8c>)
 8000720:	2100      	movs	r1, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f002 fd97 	bl	8003256 <memset>

        // Restart DMA reception
        HAL_UART_Receive_DMA(&huart1, rxBuffer, RX_BUFFER_SIZE);
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	005a      	lsls	r2, r3, #1
 800072c:	4908      	ldr	r1, [pc, #32]	; (8000750 <USART1_IRQHandler+0x8c>)
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <USART1_IRQHandler+0x80>)
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fb67 	bl	8001e04 <HAL_UART_Receive_DMA>
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000736:	4b03      	ldr	r3, [pc, #12]	; (8000744 <USART1_IRQHandler+0x80>)
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fc4b 	bl	8001fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000028 	.word	0x20000028
 8000748:	200000b0 	.word	0x200000b0
 800074c:	200002f4 	.word	0x200002f4
 8000750:	200000f4 	.word	0x200000f4
 8000754:	200001f4 	.word	0x200001f4

08000758 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
        /* TX Completed, nothing to do here for now */
        // printf("[DEBUG] UART1 TX complete\r\n"); // Confirm AT command sent


    }
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b002      	add	sp, #8
 8000766:	bd80      	pop	{r7, pc}

08000768 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000776:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000778:	f7ff fff6 	bl	8000768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800077e:	490d      	ldr	r1, [pc, #52]	; (80007b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <LoopForever+0xe>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000794:	4c0a      	ldr	r4, [pc, #40]	; (80007c0 <LoopForever+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a2:	f002 fd2b 	bl	80031fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a6:	f7ff fd43 	bl	8000230 <main>

080007aa <LoopForever>:

LoopForever:
    b LoopForever
 80007aa:	e7fe      	b.n	80007aa <LoopForever>
  ldr   r0, =_estack
 80007ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007b8:	080032d0 	.word	0x080032d0
  ldr r2, =_sbss
 80007bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007c0:	200002fc 	.word	0x200002fc

080007c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c4:	e7fe      	b.n	80007c4 <ADC1_IRQHandler>
	...

080007c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <HAL_Init+0x24>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_Init+0x24>)
 80007d2:	2110      	movs	r1, #16
 80007d4:	430a      	orrs	r2, r1
 80007d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007d8:	2000      	movs	r0, #0
 80007da:	f000 f809 	bl	80007f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007de:	f7ff fea9 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	40022000 	.word	0x40022000

080007f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_InitTick+0x5c>)
 80007fa:	681c      	ldr	r4, [r3, #0]
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_InitTick+0x60>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	0019      	movs	r1, r3
 8000802:	23fa      	movs	r3, #250	; 0xfa
 8000804:	0098      	lsls	r0, r3, #2
 8000806:	f7ff fc87 	bl	8000118 <__udivsi3>
 800080a:	0003      	movs	r3, r0
 800080c:	0019      	movs	r1, r3
 800080e:	0020      	movs	r0, r4
 8000810:	f7ff fc82 	bl	8000118 <__udivsi3>
 8000814:	0003      	movs	r3, r0
 8000816:	0018      	movs	r0, r3
 8000818:	f000 f92f 	bl	8000a7a <HAL_SYSTICK_Config>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	e00f      	b.n	8000844 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b03      	cmp	r3, #3
 8000828:	d80b      	bhi.n	8000842 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	2301      	movs	r3, #1
 800082e:	425b      	negs	r3, r3
 8000830:	2200      	movs	r2, #0
 8000832:	0018      	movs	r0, r3
 8000834:	f000 f8fc 	bl	8000a30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_InitTick+0x64>)
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b003      	add	sp, #12
 800084a:	bd90      	pop	{r4, r7, pc}
 800084c:	20000000 	.word	0x20000000
 8000850:	20000008 	.word	0x20000008
 8000854:	20000004 	.word	0x20000004

08000858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x1c>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	001a      	movs	r2, r3
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_IncTick+0x20>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	18d2      	adds	r2, r2, r3
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <HAL_IncTick+0x20>)
 800086a:	601a      	str	r2, [r3, #0]
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	20000008 	.word	0x20000008
 8000878:	200002f8 	.word	0x200002f8

0800087c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  return uwTick;
 8000880:	4b02      	ldr	r3, [pc, #8]	; (800088c <HAL_GetTick+0x10>)
 8000882:	681b      	ldr	r3, [r3, #0]
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	200002f8 	.word	0x200002f8

08000890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff fff0 	bl	800087c <HAL_GetTick>
 800089c:	0003      	movs	r3, r0
 800089e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3301      	adds	r3, #1
 80008a8:	d005      	beq.n	80008b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_Delay+0x44>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	001a      	movs	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	189b      	adds	r3, r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	f7ff ffe0 	bl	800087c <HAL_GetTick>
 80008bc:	0002      	movs	r2, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d8f7      	bhi.n	80008b8 <HAL_Delay+0x28>
  {
  }
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b004      	add	sp, #16
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	20000008 	.word	0x20000008

080008d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	0002      	movs	r2, r0
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b7f      	cmp	r3, #127	; 0x7f
 80008ea:	d809      	bhi.n	8000900 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	001a      	movs	r2, r3
 80008f2:	231f      	movs	r3, #31
 80008f4:	401a      	ands	r2, r3
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_EnableIRQ+0x30>)
 80008f8:	2101      	movs	r1, #1
 80008fa:	4091      	lsls	r1, r2
 80008fc:	000a      	movs	r2, r1
 80008fe:	601a      	str	r2, [r3, #0]
  }
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b002      	add	sp, #8
 8000906:	bd80      	pop	{r7, pc}
 8000908:	e000e100 	.word	0xe000e100

0800090c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	0002      	movs	r2, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b7f      	cmp	r3, #127	; 0x7f
 8000920:	d828      	bhi.n	8000974 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000922:	4a2f      	ldr	r2, [pc, #188]	; (80009e0 <__NVIC_SetPriority+0xd4>)
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b25b      	sxtb	r3, r3
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	33c0      	adds	r3, #192	; 0xc0
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	589b      	ldr	r3, [r3, r2]
 8000932:	1dfa      	adds	r2, r7, #7
 8000934:	7812      	ldrb	r2, [r2, #0]
 8000936:	0011      	movs	r1, r2
 8000938:	2203      	movs	r2, #3
 800093a:	400a      	ands	r2, r1
 800093c:	00d2      	lsls	r2, r2, #3
 800093e:	21ff      	movs	r1, #255	; 0xff
 8000940:	4091      	lsls	r1, r2
 8000942:	000a      	movs	r2, r1
 8000944:	43d2      	mvns	r2, r2
 8000946:	401a      	ands	r2, r3
 8000948:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	019b      	lsls	r3, r3, #6
 800094e:	22ff      	movs	r2, #255	; 0xff
 8000950:	401a      	ands	r2, r3
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	0018      	movs	r0, r3
 8000958:	2303      	movs	r3, #3
 800095a:	4003      	ands	r3, r0
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000960:	481f      	ldr	r0, [pc, #124]	; (80009e0 <__NVIC_SetPriority+0xd4>)
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b25b      	sxtb	r3, r3
 8000968:	089b      	lsrs	r3, r3, #2
 800096a:	430a      	orrs	r2, r1
 800096c:	33c0      	adds	r3, #192	; 0xc0
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000972:	e031      	b.n	80009d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000974:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <__NVIC_SetPriority+0xd8>)
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	0019      	movs	r1, r3
 800097c:	230f      	movs	r3, #15
 800097e:	400b      	ands	r3, r1
 8000980:	3b08      	subs	r3, #8
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	3306      	adds	r3, #6
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	18d3      	adds	r3, r2, r3
 800098a:	3304      	adds	r3, #4
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	1dfa      	adds	r2, r7, #7
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	0011      	movs	r1, r2
 8000994:	2203      	movs	r2, #3
 8000996:	400a      	ands	r2, r1
 8000998:	00d2      	lsls	r2, r2, #3
 800099a:	21ff      	movs	r1, #255	; 0xff
 800099c:	4091      	lsls	r1, r2
 800099e:	000a      	movs	r2, r1
 80009a0:	43d2      	mvns	r2, r2
 80009a2:	401a      	ands	r2, r3
 80009a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	019b      	lsls	r3, r3, #6
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	401a      	ands	r2, r3
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	0018      	movs	r0, r3
 80009b4:	2303      	movs	r3, #3
 80009b6:	4003      	ands	r3, r0
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009bc:	4809      	ldr	r0, [pc, #36]	; (80009e4 <__NVIC_SetPriority+0xd8>)
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	001c      	movs	r4, r3
 80009c4:	230f      	movs	r3, #15
 80009c6:	4023      	ands	r3, r4
 80009c8:	3b08      	subs	r3, #8
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	430a      	orrs	r2, r1
 80009ce:	3306      	adds	r3, #6
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	18c3      	adds	r3, r0, r3
 80009d4:	3304      	adds	r3, #4
 80009d6:	601a      	str	r2, [r3, #0]
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b003      	add	sp, #12
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	1e5a      	subs	r2, r3, #1
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	045b      	lsls	r3, r3, #17
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d301      	bcc.n	8000a00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fc:	2301      	movs	r3, #1
 80009fe:	e010      	b.n	8000a22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <SysTick_Config+0x44>)
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	3a01      	subs	r2, #1
 8000a06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a08:	2301      	movs	r3, #1
 8000a0a:	425b      	negs	r3, r3
 8000a0c:	2103      	movs	r1, #3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff ff7c 	bl	800090c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x44>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x44>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	1c02      	adds	r2, r0, #0
 8000a40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	0011      	movs	r1, r2
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f7ff ff5d 	bl	800090c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b004      	add	sp, #16
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	0002      	movs	r2, r0
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff ff33 	bl	80008d8 <__NVIC_EnableIRQ>
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b002      	add	sp, #8
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff ffaf 	bl	80009e8 <SysTick_Config>
 8000a8a:	0003      	movs	r3, r0
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e036      	b.n	8000b18 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2221      	movs	r2, #33	; 0x21
 8000aae:	2102      	movs	r1, #2
 8000ab0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <HAL_DMA_Init+0x8c>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 f9ce 	bl	8000e9c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2221      	movs	r2, #33	; 0x21
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2220      	movs	r2, #32
 8000b12:	2100      	movs	r1, #0
 8000b14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b004      	add	sp, #16
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	ffffc00f 	.word	0xffffc00f

08000b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b32:	2317      	movs	r3, #23
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2220      	movs	r2, #32
 8000b3e:	5c9b      	ldrb	r3, [r3, r2]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d101      	bne.n	8000b48 <HAL_DMA_Start_IT+0x24>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e04f      	b.n	8000be8 <HAL_DMA_Start_IT+0xc4>
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2221      	movs	r2, #33	; 0x21
 8000b54:	5c9b      	ldrb	r3, [r3, r2]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d13a      	bne.n	8000bd2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2221      	movs	r2, #33	; 0x21
 8000b60:	2102      	movs	r1, #2
 8000b62:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2200      	movs	r2, #0
 8000b68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	438a      	bics	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f000 f95e 	bl	8000e42 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d008      	beq.n	8000ba0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	210e      	movs	r1, #14
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	e00f      	b.n	8000bc0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	210a      	movs	r1, #10
 8000bac:	430a      	orrs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2104      	movs	r1, #4
 8000bbc:	438a      	bics	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2101      	movs	r1, #1
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	e007      	b.n	8000be2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2220      	movs	r2, #32
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000bda:	2317      	movs	r3, #23
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	2202      	movs	r2, #2
 8000be0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000be2:	2317      	movs	r3, #23
 8000be4:	18fb      	adds	r3, r7, r3
 8000be6:	781b      	ldrb	r3, [r3, #0]
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b006      	add	sp, #24
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2221      	movs	r2, #33	; 0x21
 8000bfc:	5c9b      	ldrb	r3, [r3, r2]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d008      	beq.n	8000c16 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2204      	movs	r2, #4
 8000c08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	2100      	movs	r1, #0
 8000c10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e020      	b.n	8000c58 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	210e      	movs	r1, #14
 8000c22:	438a      	bics	r2, r1
 8000c24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2101      	movs	r1, #1
 8000c32:	438a      	bics	r2, r1
 8000c34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3e:	2101      	movs	r1, #1
 8000c40:	4091      	lsls	r1, r2
 8000c42:	000a      	movs	r2, r1
 8000c44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2221      	movs	r2, #33	; 0x21
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2220      	movs	r2, #32
 8000c52:	2100      	movs	r1, #0
 8000c54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c68:	210f      	movs	r1, #15
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2221      	movs	r2, #33	; 0x21
 8000c74:	5c9b      	ldrb	r3, [r3, r2]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d006      	beq.n	8000c8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2204      	movs	r2, #4
 8000c80:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	e028      	b.n	8000cdc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	210e      	movs	r1, #14
 8000c96:	438a      	bics	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	438a      	bics	r2, r1
 8000ca8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	000a      	movs	r2, r1
 8000cb8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2221      	movs	r2, #33	; 0x21
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d004      	beq.n	8000cdc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	0010      	movs	r0, r2
 8000cda:	4798      	blx	r3
    }
  }
  return status;
 8000cdc:	230f      	movs	r3, #15
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	781b      	ldrb	r3, [r3, #0]
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b004      	add	sp, #16
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	2204      	movs	r2, #4
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	0013      	movs	r3, r2
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	d024      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x72>
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	2204      	movs	r2, #4
 8000d16:	4013      	ands	r3, r2
 8000d18:	d020      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2220      	movs	r2, #32
 8000d22:	4013      	ands	r3, r2
 8000d24:	d107      	bne.n	8000d36 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2104      	movs	r1, #4
 8000d32:	438a      	bics	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4091      	lsls	r1, r2
 8000d42:	000a      	movs	r2, r1
 8000d44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <HAL_DMA_IRQHandler+0x66>
 8000d4e:	e06a      	b.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	0010      	movs	r0, r2
 8000d58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d5a:	e064      	b.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	2202      	movs	r2, #2
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d02b      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0xda>
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	2202      	movs	r2, #2
 8000d70:	4013      	ands	r3, r2
 8000d72:	d027      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d10b      	bne.n	8000d98 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	210a      	movs	r1, #10
 8000d8c:	438a      	bics	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2221      	movs	r2, #33	; 0x21
 8000d94:	2101      	movs	r1, #1
 8000d96:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da0:	2102      	movs	r1, #2
 8000da2:	4091      	lsls	r1, r2
 8000da4:	000a      	movs	r2, r1
 8000da6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2220      	movs	r2, #32
 8000dac:	2100      	movs	r1, #0
 8000dae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d036      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	0010      	movs	r0, r2
 8000dc0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000dc2:	e030      	b.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	2208      	movs	r2, #8
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d028      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d024      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	210e      	movs	r1, #14
 8000de8:	438a      	bics	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df4:	2101      	movs	r1, #1
 8000df6:	4091      	lsls	r1, r2
 8000df8:	000a      	movs	r2, r1
 8000dfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2221      	movs	r2, #33	; 0x21
 8000e06:	2101      	movs	r1, #1
 8000e08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2220      	movs	r2, #32
 8000e0e:	2100      	movs	r1, #0
 8000e10:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	0010      	movs	r0, r2
 8000e22:	4798      	blx	r3
    }
  }
}
 8000e24:	e7ff      	b.n	8000e26 <HAL_DMA_IRQHandler+0x13c>
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b004      	add	sp, #16
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4091      	lsls	r1, r2
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b10      	cmp	r3, #16
 8000e6e:	d108      	bne.n	8000e82 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e80:	e007      	b.n	8000e92 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	60da      	str	r2, [r3, #12]
}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b004      	add	sp, #16
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <DMA_CalcBaseAndBitshift+0x30>)
 8000eaa:	4694      	mov	ip, r2
 8000eac:	4463      	add	r3, ip
 8000eae:	2114      	movs	r1, #20
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff f931 	bl	8000118 <__udivsi3>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	009a      	lsls	r2, r3, #2
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a03      	ldr	r2, [pc, #12]	; (8000ed0 <DMA_CalcBaseAndBitshift+0x34>)
 8000ec2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	bffdfff8 	.word	0xbffdfff8
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	e14f      	b.n	8001184 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <HAL_GPIO_Init+0x28>
 8000efa:	e140      	b.n	800117e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2203      	movs	r2, #3
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d005      	beq.n	8000f14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	2201      	movs	r2, #1
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d017      	beq.n	8000fb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d123      	bne.n	8001006 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	58d3      	ldr	r3, [r2, r3]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2207      	movs	r2, #7
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2107      	movs	r1, #7
 8000fea:	400b      	ands	r3, r1
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	6939      	ldr	r1, [r7, #16]
 8001004:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	401a      	ands	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	23c0      	movs	r3, #192	; 0xc0
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d100      	bne.n	8001048 <HAL_GPIO_Init+0x174>
 8001046:	e09a      	b.n	800117e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001048:	4b54      	ldr	r3, [pc, #336]	; (800119c <HAL_GPIO_Init+0x2c8>)
 800104a:	699a      	ldr	r2, [r3, #24]
 800104c:	4b53      	ldr	r3, [pc, #332]	; (800119c <HAL_GPIO_Init+0x2c8>)
 800104e:	2101      	movs	r1, #1
 8001050:	430a      	orrs	r2, r1
 8001052:	619a      	str	r2, [r3, #24]
 8001054:	4b51      	ldr	r3, [pc, #324]	; (800119c <HAL_GPIO_Init+0x2c8>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	2201      	movs	r2, #1
 800105a:	4013      	ands	r3, r2
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001060:	4a4f      	ldr	r2, [pc, #316]	; (80011a0 <HAL_GPIO_Init+0x2cc>)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	589b      	ldr	r3, [r3, r2]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2203      	movs	r2, #3
 8001072:	4013      	ands	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	409a      	lsls	r2, r3
 800107a:	0013      	movs	r3, r2
 800107c:	43da      	mvns	r2, r3
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	2390      	movs	r3, #144	; 0x90
 8001088:	05db      	lsls	r3, r3, #23
 800108a:	429a      	cmp	r2, r3
 800108c:	d013      	beq.n	80010b6 <HAL_GPIO_Init+0x1e2>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a44      	ldr	r2, [pc, #272]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00d      	beq.n	80010b2 <HAL_GPIO_Init+0x1de>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a43      	ldr	r2, [pc, #268]	; (80011a8 <HAL_GPIO_Init+0x2d4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d007      	beq.n	80010ae <HAL_GPIO_Init+0x1da>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a42      	ldr	r2, [pc, #264]	; (80011ac <HAL_GPIO_Init+0x2d8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_GPIO_Init+0x1d6>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x1e4>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x1e4>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x1e4>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x1e4>
 80010b6:	2300      	movs	r3, #0
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	2103      	movs	r1, #3
 80010bc:	400a      	ands	r2, r1
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4093      	lsls	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010c8:	4935      	ldr	r1, [pc, #212]	; (80011a0 <HAL_GPIO_Init+0x2cc>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <HAL_GPIO_Init+0x2dc>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43da      	mvns	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	035b      	lsls	r3, r3, #13
 80010ee:	4013      	ands	r3, r2
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_GPIO_Init+0x2dc>)
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <HAL_GPIO_Init+0x2dc>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43da      	mvns	r2, r3
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	039b      	lsls	r3, r3, #14
 8001118:	4013      	ands	r3, r2
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001124:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <HAL_GPIO_Init+0x2dc>)
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <HAL_GPIO_Init+0x2dc>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	029b      	lsls	r3, r3, #10
 8001142:	4013      	ands	r3, r2
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_GPIO_Init+0x2dc>)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_GPIO_Init+0x2dc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43da      	mvns	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	025b      	lsls	r3, r3, #9
 800116c:	4013      	ands	r3, r2
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_GPIO_Init+0x2dc>)
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	40da      	lsrs	r2, r3
 800118c:	1e13      	subs	r3, r2, #0
 800118e:	d000      	beq.n	8001192 <HAL_GPIO_Init+0x2be>
 8001190:	e6a8      	b.n	8000ee4 <HAL_GPIO_Init+0x10>
  } 
}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b006      	add	sp, #24
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010000 	.word	0x40010000
 80011a4:	48000400 	.word	0x48000400
 80011a8:	48000800 	.word	0x48000800
 80011ac:	48000c00 	.word	0x48000c00
 80011b0:	40010400 	.word	0x40010400

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	0008      	movs	r0, r1
 80011be:	0011      	movs	r1, r2
 80011c0:	1cbb      	adds	r3, r7, #2
 80011c2:	1c02      	adds	r2, r0, #0
 80011c4:	801a      	strh	r2, [r3, #0]
 80011c6:	1c7b      	adds	r3, r7, #1
 80011c8:	1c0a      	adds	r2, r1, #0
 80011ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011cc:	1c7b      	adds	r3, r7, #1
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d4:	1cbb      	adds	r3, r7, #2
 80011d6:	881a      	ldrh	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011dc:	e003      	b.n	80011e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011de:	1cbb      	adds	r3, r7, #2
 80011e0:	881a      	ldrh	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	000a      	movs	r2, r1
 80011f8:	1cbb      	adds	r3, r7, #2
 80011fa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001202:	1cbb      	adds	r3, r7, #2
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4013      	ands	r3, r2
 800120a:	041a      	lsls	r2, r3, #16
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43db      	mvns	r3, r3
 8001210:	1cb9      	adds	r1, r7, #2
 8001212:	8809      	ldrh	r1, [r1, #0]
 8001214:	400b      	ands	r3, r1
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b004      	add	sp, #16
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e301      	b.n	800183a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2201      	movs	r2, #1
 800123c:	4013      	ands	r3, r2
 800123e:	d100      	bne.n	8001242 <HAL_RCC_OscConfig+0x1e>
 8001240:	e08d      	b.n	800135e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001242:	4bc3      	ldr	r3, [pc, #780]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	220c      	movs	r2, #12
 8001248:	4013      	ands	r3, r2
 800124a:	2b04      	cmp	r3, #4
 800124c:	d00e      	beq.n	800126c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800124e:	4bc0      	ldr	r3, [pc, #768]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	220c      	movs	r2, #12
 8001254:	4013      	ands	r3, r2
 8001256:	2b08      	cmp	r3, #8
 8001258:	d116      	bne.n	8001288 <HAL_RCC_OscConfig+0x64>
 800125a:	4bbd      	ldr	r3, [pc, #756]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	025b      	lsls	r3, r3, #9
 8001262:	401a      	ands	r2, r3
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	025b      	lsls	r3, r3, #9
 8001268:	429a      	cmp	r2, r3
 800126a:	d10d      	bne.n	8001288 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126c:	4bb8      	ldr	r3, [pc, #736]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	029b      	lsls	r3, r3, #10
 8001274:	4013      	ands	r3, r2
 8001276:	d100      	bne.n	800127a <HAL_RCC_OscConfig+0x56>
 8001278:	e070      	b.n	800135c <HAL_RCC_OscConfig+0x138>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d000      	beq.n	8001284 <HAL_RCC_OscConfig+0x60>
 8001282:	e06b      	b.n	800135c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e2d8      	b.n	800183a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d107      	bne.n	80012a0 <HAL_RCC_OscConfig+0x7c>
 8001290:	4baf      	ldr	r3, [pc, #700]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4bae      	ldr	r3, [pc, #696]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	0249      	lsls	r1, r1, #9
 800129a:	430a      	orrs	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e02f      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d10c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x9e>
 80012a8:	4ba9      	ldr	r3, [pc, #676]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4ba8      	ldr	r3, [pc, #672]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012ae:	49a9      	ldr	r1, [pc, #676]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80012b0:	400a      	ands	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	4ba6      	ldr	r3, [pc, #664]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4ba5      	ldr	r3, [pc, #660]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012ba:	49a7      	ldr	r1, [pc, #668]	; (8001558 <HAL_RCC_OscConfig+0x334>)
 80012bc:	400a      	ands	r2, r1
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e01e      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b05      	cmp	r3, #5
 80012c8:	d10e      	bne.n	80012e8 <HAL_RCC_OscConfig+0xc4>
 80012ca:	4ba1      	ldr	r3, [pc, #644]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4ba0      	ldr	r3, [pc, #640]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012d0:	2180      	movs	r1, #128	; 0x80
 80012d2:	02c9      	lsls	r1, r1, #11
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	4b9d      	ldr	r3, [pc, #628]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b9c      	ldr	r3, [pc, #624]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	0249      	lsls	r1, r1, #9
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e00b      	b.n	8001300 <HAL_RCC_OscConfig+0xdc>
 80012e8:	4b99      	ldr	r3, [pc, #612]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b98      	ldr	r3, [pc, #608]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012ee:	4999      	ldr	r1, [pc, #612]	; (8001554 <HAL_RCC_OscConfig+0x330>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	4b96      	ldr	r3, [pc, #600]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b95      	ldr	r3, [pc, #596]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	4997      	ldr	r1, [pc, #604]	; (8001558 <HAL_RCC_OscConfig+0x334>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d014      	beq.n	8001332 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fab8 	bl	800087c <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001312:	f7ff fab3 	bl	800087c <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b64      	cmp	r3, #100	; 0x64
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e28a      	b.n	800183a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001324:	4b8a      	ldr	r3, [pc, #552]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	029b      	lsls	r3, r3, #10
 800132c:	4013      	ands	r3, r2
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0xee>
 8001330:	e015      	b.n	800135e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff faa3 	bl	800087c <HAL_GetTick>
 8001336:	0003      	movs	r3, r0
 8001338:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fa9e 	bl	800087c <HAL_GetTick>
 8001340:	0002      	movs	r2, r0
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e275      	b.n	800183a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	4b80      	ldr	r3, [pc, #512]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	029b      	lsls	r3, r3, #10
 8001356:	4013      	ands	r3, r2
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x118>
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2202      	movs	r2, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d100      	bne.n	800136a <HAL_RCC_OscConfig+0x146>
 8001368:	e069      	b.n	800143e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800136a:	4b79      	ldr	r3, [pc, #484]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	220c      	movs	r2, #12
 8001370:	4013      	ands	r3, r2
 8001372:	d00b      	beq.n	800138c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001374:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	220c      	movs	r2, #12
 800137a:	4013      	ands	r3, r2
 800137c:	2b08      	cmp	r3, #8
 800137e:	d11c      	bne.n	80013ba <HAL_RCC_OscConfig+0x196>
 8001380:	4b73      	ldr	r3, [pc, #460]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	025b      	lsls	r3, r3, #9
 8001388:	4013      	ands	r3, r2
 800138a:	d116      	bne.n	80013ba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138c:	4b70      	ldr	r3, [pc, #448]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2202      	movs	r2, #2
 8001392:	4013      	ands	r3, r2
 8001394:	d005      	beq.n	80013a2 <HAL_RCC_OscConfig+0x17e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e24b      	b.n	800183a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a2:	4b6b      	ldr	r3, [pc, #428]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	22f8      	movs	r2, #248	; 0xf8
 80013a8:	4393      	bics	r3, r2
 80013aa:	0019      	movs	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	00da      	lsls	r2, r3, #3
 80013b2:	4b67      	ldr	r3, [pc, #412]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b8:	e041      	b.n	800143e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d024      	beq.n	800140c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c2:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b62      	ldr	r3, [pc, #392]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013c8:	2101      	movs	r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fa55 	bl	800087c <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d8:	f7ff fa50 	bl	800087c <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e227      	b.n	800183a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ea:	4b59      	ldr	r3, [pc, #356]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2202      	movs	r2, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	d0f1      	beq.n	80013d8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f4:	4b56      	ldr	r3, [pc, #344]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	22f8      	movs	r2, #248	; 0xf8
 80013fa:	4393      	bics	r3, r2
 80013fc:	0019      	movs	r1, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00da      	lsls	r2, r3, #3
 8001404:	4b52      	ldr	r3, [pc, #328]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001406:	430a      	orrs	r2, r1
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e018      	b.n	800143e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140c:	4b50      	ldr	r3, [pc, #320]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b4f      	ldr	r3, [pc, #316]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001412:	2101      	movs	r1, #1
 8001414:	438a      	bics	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fa30 	bl	800087c <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fa2b 	bl	800087c <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e202      	b.n	800183a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001434:	4b46      	ldr	r3, [pc, #280]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2202      	movs	r2, #2
 800143a:	4013      	ands	r3, r2
 800143c:	d1f1      	bne.n	8001422 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2208      	movs	r2, #8
 8001444:	4013      	ands	r3, r2
 8001446:	d036      	beq.n	80014b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d019      	beq.n	8001484 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001450:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001454:	4b3e      	ldr	r3, [pc, #248]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001456:	2101      	movs	r1, #1
 8001458:	430a      	orrs	r2, r1
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff fa0e 	bl	800087c <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fa09 	bl	800087c <HAL_GetTick>
 800146a:	0002      	movs	r2, r0
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e1e0      	b.n	800183a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001478:	4b35      	ldr	r3, [pc, #212]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	2202      	movs	r2, #2
 800147e:	4013      	ands	r3, r2
 8001480:	d0f1      	beq.n	8001466 <HAL_RCC_OscConfig+0x242>
 8001482:	e018      	b.n	80014b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001484:	4b32      	ldr	r3, [pc, #200]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 800148a:	2101      	movs	r1, #1
 800148c:	438a      	bics	r2, r1
 800148e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001490:	f7ff f9f4 	bl	800087c <HAL_GetTick>
 8001494:	0003      	movs	r3, r0
 8001496:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff f9ef 	bl	800087c <HAL_GetTick>
 800149e:	0002      	movs	r2, r0
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e1c6      	b.n	800183a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	2202      	movs	r2, #2
 80014b2:	4013      	ands	r3, r2
 80014b4:	d1f1      	bne.n	800149a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2204      	movs	r2, #4
 80014bc:	4013      	ands	r3, r2
 80014be:	d100      	bne.n	80014c2 <HAL_RCC_OscConfig+0x29e>
 80014c0:	e0b4      	b.n	800162c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c2:	201f      	movs	r0, #31
 80014c4:	183b      	adds	r3, r7, r0
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	69da      	ldr	r2, [r3, #28]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	055b      	lsls	r3, r3, #21
 80014d2:	4013      	ands	r3, r2
 80014d4:	d110      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	0549      	lsls	r1, r1, #21
 80014e0:	430a      	orrs	r2, r1
 80014e2:	61da      	str	r2, [r3, #28]
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	69da      	ldr	r2, [r3, #28]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	055b      	lsls	r3, r3, #21
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014f2:	183b      	adds	r3, r7, r0
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_RCC_OscConfig+0x338>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4013      	ands	r3, r2
 8001502:	d11a      	bne.n	800153a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_RCC_OscConfig+0x338>)
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	0049      	lsls	r1, r1, #1
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001512:	f7ff f9b3 	bl	800087c <HAL_GetTick>
 8001516:	0003      	movs	r3, r0
 8001518:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151c:	f7ff f9ae 	bl	800087c <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e185      	b.n	800183a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_OscConfig+0x338>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4013      	ands	r3, r2
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d10e      	bne.n	8001560 <HAL_RCC_OscConfig+0x33c>
 8001542:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001544:	6a1a      	ldr	r2, [r3, #32]
 8001546:	4b02      	ldr	r3, [pc, #8]	; (8001550 <HAL_RCC_OscConfig+0x32c>)
 8001548:	2101      	movs	r1, #1
 800154a:	430a      	orrs	r2, r1
 800154c:	621a      	str	r2, [r3, #32]
 800154e:	e035      	b.n	80015bc <HAL_RCC_OscConfig+0x398>
 8001550:	40021000 	.word	0x40021000
 8001554:	fffeffff 	.word	0xfffeffff
 8001558:	fffbffff 	.word	0xfffbffff
 800155c:	40007000 	.word	0x40007000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10c      	bne.n	8001582 <HAL_RCC_OscConfig+0x35e>
 8001568:	4bb6      	ldr	r3, [pc, #728]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 800156a:	6a1a      	ldr	r2, [r3, #32]
 800156c:	4bb5      	ldr	r3, [pc, #724]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 800156e:	2101      	movs	r1, #1
 8001570:	438a      	bics	r2, r1
 8001572:	621a      	str	r2, [r3, #32]
 8001574:	4bb3      	ldr	r3, [pc, #716]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001576:	6a1a      	ldr	r2, [r3, #32]
 8001578:	4bb2      	ldr	r3, [pc, #712]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 800157a:	2104      	movs	r1, #4
 800157c:	438a      	bics	r2, r1
 800157e:	621a      	str	r2, [r3, #32]
 8001580:	e01c      	b.n	80015bc <HAL_RCC_OscConfig+0x398>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b05      	cmp	r3, #5
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x380>
 800158a:	4bae      	ldr	r3, [pc, #696]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 800158c:	6a1a      	ldr	r2, [r3, #32]
 800158e:	4bad      	ldr	r3, [pc, #692]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001590:	2104      	movs	r1, #4
 8001592:	430a      	orrs	r2, r1
 8001594:	621a      	str	r2, [r3, #32]
 8001596:	4bab      	ldr	r3, [pc, #684]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001598:	6a1a      	ldr	r2, [r3, #32]
 800159a:	4baa      	ldr	r3, [pc, #680]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 800159c:	2101      	movs	r1, #1
 800159e:	430a      	orrs	r2, r1
 80015a0:	621a      	str	r2, [r3, #32]
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0x398>
 80015a4:	4ba7      	ldr	r3, [pc, #668]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	4ba6      	ldr	r3, [pc, #664]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	438a      	bics	r2, r1
 80015ae:	621a      	str	r2, [r3, #32]
 80015b0:	4ba4      	ldr	r3, [pc, #656]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80015b2:	6a1a      	ldr	r2, [r3, #32]
 80015b4:	4ba3      	ldr	r3, [pc, #652]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80015b6:	2104      	movs	r1, #4
 80015b8:	438a      	bics	r2, r1
 80015ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d014      	beq.n	80015ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c4:	f7ff f95a 	bl	800087c <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	e009      	b.n	80015e2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff f955 	bl	800087c <HAL_GetTick>
 80015d2:	0002      	movs	r2, r0
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4a9b      	ldr	r2, [pc, #620]	; (8001848 <HAL_RCC_OscConfig+0x624>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e12b      	b.n	800183a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e2:	4b98      	ldr	r3, [pc, #608]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	2202      	movs	r2, #2
 80015e8:	4013      	ands	r3, r2
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x3aa>
 80015ec:	e013      	b.n	8001616 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ee:	f7ff f945 	bl	800087c <HAL_GetTick>
 80015f2:	0003      	movs	r3, r0
 80015f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f6:	e009      	b.n	800160c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff f940 	bl	800087c <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	4a91      	ldr	r2, [pc, #580]	; (8001848 <HAL_RCC_OscConfig+0x624>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e116      	b.n	800183a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160c:	4b8d      	ldr	r3, [pc, #564]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	2202      	movs	r2, #2
 8001612:	4013      	ands	r3, r2
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001616:	231f      	movs	r3, #31
 8001618:	18fb      	adds	r3, r7, r3
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d105      	bne.n	800162c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001620:	4b88      	ldr	r3, [pc, #544]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001622:	69da      	ldr	r2, [r3, #28]
 8001624:	4b87      	ldr	r3, [pc, #540]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001626:	4989      	ldr	r1, [pc, #548]	; (800184c <HAL_RCC_OscConfig+0x628>)
 8001628:	400a      	ands	r2, r1
 800162a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2210      	movs	r2, #16
 8001632:	4013      	ands	r3, r2
 8001634:	d063      	beq.n	80016fe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d12a      	bne.n	8001694 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800163e:	4b81      	ldr	r3, [pc, #516]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001642:	4b80      	ldr	r3, [pc, #512]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001644:	2104      	movs	r1, #4
 8001646:	430a      	orrs	r2, r1
 8001648:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800164a:	4b7e      	ldr	r3, [pc, #504]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 800164c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800164e:	4b7d      	ldr	r3, [pc, #500]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001650:	2101      	movs	r1, #1
 8001652:	430a      	orrs	r2, r1
 8001654:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff f911 	bl	800087c <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001660:	f7ff f90c 	bl	800087c <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e0e3      	b.n	800183a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001672:	4b74      	ldr	r3, [pc, #464]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	d0f1      	beq.n	8001660 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800167c:	4b71      	ldr	r3, [pc, #452]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 800167e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001680:	22f8      	movs	r2, #248	; 0xf8
 8001682:	4393      	bics	r3, r2
 8001684:	0019      	movs	r1, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	00da      	lsls	r2, r3, #3
 800168c:	4b6d      	ldr	r3, [pc, #436]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 800168e:	430a      	orrs	r2, r1
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
 8001692:	e034      	b.n	80016fe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	3305      	adds	r3, #5
 800169a:	d111      	bne.n	80016c0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800169c:	4b69      	ldr	r3, [pc, #420]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 800169e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a0:	4b68      	ldr	r3, [pc, #416]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80016a2:	2104      	movs	r1, #4
 80016a4:	438a      	bics	r2, r1
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016a8:	4b66      	ldr	r3, [pc, #408]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80016aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ac:	22f8      	movs	r2, #248	; 0xf8
 80016ae:	4393      	bics	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	00da      	lsls	r2, r3, #3
 80016b8:	4b62      	ldr	r3, [pc, #392]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80016ba:	430a      	orrs	r2, r1
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34
 80016be:	e01e      	b.n	80016fe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016c0:	4b60      	ldr	r3, [pc, #384]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80016c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c4:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80016c6:	2104      	movs	r1, #4
 80016c8:	430a      	orrs	r2, r1
 80016ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016cc:	4b5d      	ldr	r3, [pc, #372]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80016ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d0:	4b5c      	ldr	r3, [pc, #368]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80016d2:	2101      	movs	r1, #1
 80016d4:	438a      	bics	r2, r1
 80016d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d8:	f7ff f8d0 	bl	800087c <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016e2:	f7ff f8cb 	bl	800087c <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0a2      	b.n	800183a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016f4:	4b53      	ldr	r3, [pc, #332]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	2202      	movs	r2, #2
 80016fa:	4013      	ands	r3, r2
 80016fc:	d1f1      	bne.n	80016e2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d100      	bne.n	8001708 <HAL_RCC_OscConfig+0x4e4>
 8001706:	e097      	b.n	8001838 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001708:	4b4e      	ldr	r3, [pc, #312]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	220c      	movs	r2, #12
 800170e:	4013      	ands	r3, r2
 8001710:	2b08      	cmp	r3, #8
 8001712:	d100      	bne.n	8001716 <HAL_RCC_OscConfig+0x4f2>
 8001714:	e06b      	b.n	80017ee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d14c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171e:	4b49      	ldr	r3, [pc, #292]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001724:	494a      	ldr	r1, [pc, #296]	; (8001850 <HAL_RCC_OscConfig+0x62c>)
 8001726:	400a      	ands	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff f8a7 	bl	800087c <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff f8a2 	bl	800087c <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e079      	b.n	800183a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001746:	4b3f      	ldr	r3, [pc, #252]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	049b      	lsls	r3, r3, #18
 800174e:	4013      	ands	r3, r2
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	220f      	movs	r2, #15
 8001758:	4393      	bics	r3, r2
 800175a:	0019      	movs	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001760:	4b38      	ldr	r3, [pc, #224]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001762:	430a      	orrs	r2, r1
 8001764:	62da      	str	r2, [r3, #44]	; 0x2c
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4a3a      	ldr	r2, [pc, #232]	; (8001854 <HAL_RCC_OscConfig+0x630>)
 800176c:	4013      	ands	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	431a      	orrs	r2, r3
 800177a:	4b32      	ldr	r3, [pc, #200]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001780:	4b30      	ldr	r3, [pc, #192]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	0449      	lsls	r1, r1, #17
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff f875 	bl	800087c <HAL_GetTick>
 8001792:	0003      	movs	r3, r0
 8001794:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff f870 	bl	800087c <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e047      	b.n	800183a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	049b      	lsls	r3, r3, #18
 80017b2:	4013      	ands	r3, r2
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x574>
 80017b6:	e03f      	b.n	8001838 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b21      	ldr	r3, [pc, #132]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80017be:	4924      	ldr	r1, [pc, #144]	; (8001850 <HAL_RCC_OscConfig+0x62c>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff f85a 	bl	800087c <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff f855 	bl	800087c <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e02c      	b.n	800183a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	049b      	lsls	r3, r3, #18
 80017e8:	4013      	ands	r3, r2
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x5aa>
 80017ec:	e024      	b.n	8001838 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e01f      	b.n	800183a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001800:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_RCC_OscConfig+0x620>)
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	025b      	lsls	r3, r3, #9
 800180c:	401a      	ands	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	429a      	cmp	r2, r3
 8001814:	d10e      	bne.n	8001834 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	220f      	movs	r2, #15
 800181a:	401a      	ands	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d107      	bne.n	8001834 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	23f0      	movs	r3, #240	; 0xf0
 8001828:	039b      	lsls	r3, r3, #14
 800182a:	401a      	ands	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	0018      	movs	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	b008      	add	sp, #32
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	40021000 	.word	0x40021000
 8001848:	00001388 	.word	0x00001388
 800184c:	efffffff 	.word	0xefffffff
 8001850:	feffffff 	.word	0xfeffffff
 8001854:	ffc2ffff 	.word	0xffc2ffff

08001858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0b3      	b.n	80019d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800186c:	4b5b      	ldr	r3, [pc, #364]	; (80019dc <HAL_RCC_ClockConfig+0x184>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d911      	bls.n	800189e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b58      	ldr	r3, [pc, #352]	; (80019dc <HAL_RCC_ClockConfig+0x184>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2201      	movs	r2, #1
 8001880:	4393      	bics	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	4b55      	ldr	r3, [pc, #340]	; (80019dc <HAL_RCC_ClockConfig+0x184>)
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188c:	4b53      	ldr	r3, [pc, #332]	; (80019dc <HAL_RCC_ClockConfig+0x184>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2201      	movs	r2, #1
 8001892:	4013      	ands	r3, r2
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d001      	beq.n	800189e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e09a      	b.n	80019d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2202      	movs	r2, #2
 80018a4:	4013      	ands	r3, r2
 80018a6:	d015      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2204      	movs	r2, #4
 80018ae:	4013      	ands	r3, r2
 80018b0:	d006      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018b2:	4b4b      	ldr	r3, [pc, #300]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	4b4a      	ldr	r3, [pc, #296]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 80018b8:	21e0      	movs	r1, #224	; 0xe0
 80018ba:	00c9      	lsls	r1, r1, #3
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	22f0      	movs	r2, #240	; 0xf0
 80018c6:	4393      	bics	r3, r2
 80018c8:	0019      	movs	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2201      	movs	r2, #1
 80018da:	4013      	ands	r3, r2
 80018dc:	d040      	beq.n	8001960 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	029b      	lsls	r3, r3, #10
 80018ee:	4013      	ands	r3, r2
 80018f0:	d114      	bne.n	800191c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e06e      	b.n	80019d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fe:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	049b      	lsls	r3, r3, #18
 8001906:	4013      	ands	r3, r2
 8001908:	d108      	bne.n	800191c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e062      	b.n	80019d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190e:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2202      	movs	r2, #2
 8001914:	4013      	ands	r3, r2
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e05b      	b.n	80019d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2203      	movs	r2, #3
 8001922:	4393      	bics	r3, r2
 8001924:	0019      	movs	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001930:	f7fe ffa4 	bl	800087c <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001938:	e009      	b.n	800194e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193a:	f7fe ff9f 	bl	800087c <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <HAL_RCC_ClockConfig+0x18c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e042      	b.n	80019d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	220c      	movs	r2, #12
 8001954:	401a      	ands	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	429a      	cmp	r2, r3
 800195e:	d1ec      	bne.n	800193a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_RCC_ClockConfig+0x184>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	4013      	ands	r3, r2
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d211      	bcs.n	8001992 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_RCC_ClockConfig+0x184>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2201      	movs	r2, #1
 8001974:	4393      	bics	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_RCC_ClockConfig+0x184>)
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_RCC_ClockConfig+0x184>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	4013      	ands	r3, r2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e020      	b.n	80019d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2204      	movs	r2, #4
 8001998:	4013      	ands	r3, r2
 800199a:	d009      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <HAL_RCC_ClockConfig+0x190>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	0019      	movs	r1, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 80019ac:	430a      	orrs	r2, r1
 80019ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019b0:	f000 f820 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 80019b4:	0001      	movs	r1, r0
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_RCC_ClockConfig+0x188>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	220f      	movs	r2, #15
 80019be:	4013      	ands	r3, r2
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x194>)
 80019c2:	5cd3      	ldrb	r3, [r2, r3]
 80019c4:	000a      	movs	r2, r1
 80019c6:	40da      	lsrs	r2, r3
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x198>)
 80019ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7fe ff0f 	bl	80007f0 <HAL_InitTick>
  
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b004      	add	sp, #16
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40022000 	.word	0x40022000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	00001388 	.word	0x00001388
 80019e8:	fffff8ff 	.word	0xfffff8ff
 80019ec:	08003290 	.word	0x08003290
 80019f0:	20000000 	.word	0x20000000

080019f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	220c      	movs	r2, #12
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d002      	beq.n	8001a24 <HAL_RCC_GetSysClockFreq+0x30>
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d003      	beq.n	8001a2a <HAL_RCC_GetSysClockFreq+0x36>
 8001a22:	e02c      	b.n	8001a7e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a26:	613b      	str	r3, [r7, #16]
      break;
 8001a28:	e02c      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	0c9b      	lsrs	r3, r3, #18
 8001a2e:	220f      	movs	r2, #15
 8001a30:	4013      	ands	r3, r2
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a38:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	4013      	ands	r3, r2
 8001a40:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	025b      	lsls	r3, r3, #9
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d009      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	4810      	ldr	r0, [pc, #64]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a54:	f7fe fb60 	bl	8000118 <__udivsi3>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4353      	muls	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	e009      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	000a      	movs	r2, r1
 8001a68:	0152      	lsls	r2, r2, #5
 8001a6a:	1a52      	subs	r2, r2, r1
 8001a6c:	0193      	lsls	r3, r2, #6
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	185b      	adds	r3, r3, r1
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
      break;
 8001a7c:	e002      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a80:	613b      	str	r3, [r7, #16]
      break;
 8001a82:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a84:	693b      	ldr	r3, [r7, #16]
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b006      	add	sp, #24
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	40021000 	.word	0x40021000
 8001a94:	007a1200 	.word	0x007a1200
 8001a98:	080032a8 	.word	0x080032a8
 8001a9c:	080032b8 	.word	0x080032b8

08001aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa4:	4b02      	ldr	r3, [pc, #8]	; (8001ab0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	20000000 	.word	0x20000000

08001ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ab8:	f7ff fff2 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001abc:	0001      	movs	r1, r0
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	40d9      	lsrs	r1, r3
 8001ace:	000b      	movs	r3, r1
}    
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	080032a0 	.word	0x080032a0

08001ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	025b      	lsls	r3, r3, #9
 8001af8:	4013      	ands	r3, r2
 8001afa:	d100      	bne.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001afc:	e08e      	b.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	2017      	movs	r0, #23
 8001b00:	183b      	adds	r3, r7, r0
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b57      	ldr	r3, [pc, #348]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	055b      	lsls	r3, r3, #21
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d110      	bne.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b54      	ldr	r3, [pc, #336]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0549      	lsls	r1, r1, #21
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	61da      	str	r2, [r3, #28]
 8001b20:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b22:	69da      	ldr	r2, [r3, #28]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	055b      	lsls	r3, r3, #21
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2e:	183b      	adds	r3, r7, r0
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d11a      	bne.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b40:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b48      	ldr	r3, [pc, #288]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	0049      	lsls	r1, r1, #1
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7fe fe95 	bl	800087c <HAL_GetTick>
 8001b52:	0003      	movs	r3, r0
 8001b54:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	e008      	b.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b58:	f7fe fe90 	bl	800087c <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e077      	b.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b76:	4b3b      	ldr	r3, [pc, #236]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b78:	6a1a      	ldr	r2, [r3, #32]
 8001b7a:	23c0      	movs	r3, #192	; 0xc0
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d034      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	23c0      	movs	r3, #192	; 0xc0
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4013      	ands	r3, r2
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d02c      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a33      	ldr	r2, [pc, #204]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ba2:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ba4:	6a1a      	ldr	r2, [r3, #32]
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	0249      	lsls	r1, r1, #9
 8001bac:	430a      	orrs	r2, r1
 8001bae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bb0:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bb6:	492e      	ldr	r1, [pc, #184]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001bbc:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7fe fe57 	bl	800087c <HAL_GetTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd2:	e009      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7fe fe52 	bl	800087c <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e038      	b.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	2202      	movs	r2, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c02:	430a      	orrs	r2, r1
 8001c04:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c06:	2317      	movs	r3, #23
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c12:	69da      	ldr	r2, [r3, #28]
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c16:	4918      	ldr	r1, [pc, #96]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001c18:	400a      	ands	r2, r1
 8001c1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	d009      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c36:	430a      	orrs	r2, r1
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	4013      	ands	r3, r2
 8001c42:	d009      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	2210      	movs	r2, #16
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c54:	430a      	orrs	r2, r1
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b006      	add	sp, #24
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	fffffcff 	.word	0xfffffcff
 8001c70:	fffeffff 	.word	0xfffeffff
 8001c74:	00001388 	.word	0x00001388
 8001c78:	efffffff 	.word	0xefffffff

08001c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e044      	b.n	8001d18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d107      	bne.n	8001ca6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2278      	movs	r2, #120	; 0x78
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7fe fc6b 	bl	800057c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2224      	movs	r2, #36	; 0x24
 8001caa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	438a      	bics	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 fdb0 	bl	800282c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 fc6c 	bl	80025ac <UART_SetConfig>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e01c      	b.n	8001d18 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	490d      	ldr	r1, [pc, #52]	; (8001d20 <HAL_UART_Init+0xa4>)
 8001cea:	400a      	ands	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	438a      	bics	r2, r1
 8001cfc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2101      	movs	r1, #1
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f000 fe3f 	bl	8002994 <UART_CheckIdleState>
 8001d16:	0003      	movs	r3, r0
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	fffff7ff 	.word	0xfffff7ff

08001d24 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	1dbb      	adds	r3, r7, #6
 8001d30:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d15b      	bne.n	8001df2 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_UART_Transmit_IT+0x24>
 8001d40:	1dbb      	adds	r3, r7, #6
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e053      	b.n	8001df4 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	015b      	lsls	r3, r3, #5
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d109      	bne.n	8001d6c <HAL_UART_Transmit_IT+0x48>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d105      	bne.n	8001d6c <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d001      	beq.n	8001d6c <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e043      	b.n	8001df4 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1dba      	adds	r2, r7, #6
 8001d76:	2150      	movs	r1, #80	; 0x50
 8001d78:	8812      	ldrh	r2, [r2, #0]
 8001d7a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1dba      	adds	r2, r7, #6
 8001d80:	2152      	movs	r1, #82	; 0x52
 8001d82:	8812      	ldrh	r2, [r2, #0]
 8001d84:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2284      	movs	r2, #132	; 0x84
 8001d90:	2100      	movs	r1, #0
 8001d92:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2221      	movs	r2, #33	; 0x21
 8001d98:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	015b      	lsls	r3, r3, #5
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d107      	bne.n	8001db6 <HAL_UART_Transmit_IT+0x92>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <HAL_UART_Transmit_IT+0xd8>)
 8001db2:	66da      	str	r2, [r3, #108]	; 0x6c
 8001db4:	e002      	b.n	8001dbc <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <HAL_UART_Transmit_IT+0xdc>)
 8001dba:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8001dc0:	613b      	str	r3, [r7, #16]
  return(result);
 8001dc2:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f383 8810 	msr	PRIMASK, r3
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	430a      	orrs	r2, r1
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f383 8810 	msr	PRIMASK, r3
}
 8001dec:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
  }
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b008      	add	sp, #32
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	080030e9 	.word	0x080030e9
 8001e00:	08003035 	.word	0x08003035

08001e04 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	1dbb      	adds	r3, r7, #6
 8001e10:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	589b      	ldr	r3, [r3, r2]
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d145      	bne.n	8001ea8 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_UART_Receive_DMA+0x26>
 8001e22:	1dbb      	adds	r3, r7, #6
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e03d      	b.n	8001eaa <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	015b      	lsls	r3, r3, #5
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d109      	bne.n	8001e4e <HAL_UART_Receive_DMA+0x4a>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d105      	bne.n	8001e4e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2201      	movs	r2, #1
 8001e46:	4013      	ands	r3, r2
 8001e48:	d001      	beq.n	8001e4e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e02d      	b.n	8001eaa <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d019      	beq.n	8001e96 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e62:	f3ef 8310 	mrs	r3, PRIMASK
 8001e66:	613b      	str	r3, [r7, #16]
  return(result);
 8001e68:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f383 8810 	msr	PRIMASK, r3
}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	04c9      	lsls	r1, r1, #19
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f383 8810 	msr	PRIMASK, r3
}
 8001e94:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001e96:	1dbb      	adds	r3, r7, #6
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f000 fe90 	bl	8002bc4 <UART_Start_Receive_DMA>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	e000      	b.n	8001eaa <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001ea8:	2302      	movs	r3, #2
  }
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b008      	add	sp, #32
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b08c      	sub	sp, #48	; 0x30
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	589b      	ldr	r3, [r3, r2]
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2280      	movs	r2, #128	; 0x80
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b80      	cmp	r3, #128	; 0x80
 8001ed4:	d138      	bne.n	8001f48 <HAL_UART_DMAStop+0x96>
 8001ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed8:	2b21      	cmp	r3, #33	; 0x21
 8001eda:	d135      	bne.n	8001f48 <HAL_UART_DMAStop+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001edc:	f3ef 8310 	mrs	r3, PRIMASK
 8001ee0:	617b      	str	r3, [r7, #20]
  return(result);
 8001ee2:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f383 8810 	msr	PRIMASK, r3
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	438a      	bics	r2, r1
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f383 8810 	msr	PRIMASK, r3
}
 8001f0c:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d014      	beq.n	8001f40 <HAL_UART_DMAStop+0x8e>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f7fe fe68 	bl	8000bf0 <HAL_DMA_Abort>
 8001f20:	1e03      	subs	r3, r0, #0
 8001f22:	d00d      	beq.n	8001f40 <HAL_UART_DMAStop+0x8e>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7fe ff80 	bl	8000e2e <HAL_DMA_GetError>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d105      	bne.n	8001f40 <HAL_UART_DMAStop+0x8e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2284      	movs	r2, #132	; 0x84
 8001f38:	2110      	movs	r1, #16
 8001f3a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e044      	b.n	8001fca <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	0018      	movs	r0, r3
 8001f44:	f000 fede 	bl	8002d04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b40      	cmp	r3, #64	; 0x40
 8001f54:	d138      	bne.n	8001fc8 <HAL_UART_DMAStop+0x116>
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	2b22      	cmp	r3, #34	; 0x22
 8001f5a:	d135      	bne.n	8001fc8 <HAL_UART_DMAStop+0x116>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8001f60:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f62:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f64:	623b      	str	r3, [r7, #32]
 8001f66:	2301      	movs	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f383 8810 	msr	PRIMASK, r3
}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2140      	movs	r1, #64	; 0x40
 8001f7e:	438a      	bics	r2, r1
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f383 8810 	msr	PRIMASK, r3
}
 8001f8c:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d014      	beq.n	8001fc0 <HAL_UART_DMAStop+0x10e>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7fe fe28 	bl	8000bf0 <HAL_DMA_Abort>
 8001fa0:	1e03      	subs	r3, r0, #0
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_UART_DMAStop+0x10e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7fe ff40 	bl	8000e2e <HAL_DMA_GetError>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d105      	bne.n	8001fc0 <HAL_UART_DMAStop+0x10e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2284      	movs	r2, #132	; 0x84
 8001fb8:	2110      	movs	r1, #16
 8001fba:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e004      	b.n	8001fca <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f000 fec2 	bl	8002d4c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b00c      	add	sp, #48	; 0x30
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b0ab      	sub	sp, #172	; 0xac
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	22a4      	movs	r2, #164	; 0xa4
 8001fe4:	18b9      	adds	r1, r7, r2
 8001fe6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	20a0      	movs	r0, #160	; 0xa0
 8001ff0:	1839      	adds	r1, r7, r0
 8001ff2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	219c      	movs	r1, #156	; 0x9c
 8001ffc:	1879      	adds	r1, r7, r1
 8001ffe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002000:	0011      	movs	r1, r2
 8002002:	18bb      	adds	r3, r7, r2
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a99      	ldr	r2, [pc, #612]	; (800226c <HAL_UART_IRQHandler+0x298>)
 8002008:	4013      	ands	r3, r2
 800200a:	2298      	movs	r2, #152	; 0x98
 800200c:	18bc      	adds	r4, r7, r2
 800200e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002010:	18bb      	adds	r3, r7, r2
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d114      	bne.n	8002042 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002018:	187b      	adds	r3, r7, r1
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2220      	movs	r2, #32
 800201e:	4013      	ands	r3, r2
 8002020:	d00f      	beq.n	8002042 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002022:	183b      	adds	r3, r7, r0
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2220      	movs	r2, #32
 8002028:	4013      	ands	r3, r2
 800202a:	d00a      	beq.n	8002042 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002030:	2b00      	cmp	r3, #0
 8002032:	d100      	bne.n	8002036 <HAL_UART_IRQHandler+0x62>
 8002034:	e286      	b.n	8002544 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	0010      	movs	r0, r2
 800203e:	4798      	blx	r3
      }
      return;
 8002040:	e280      	b.n	8002544 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002042:	2398      	movs	r3, #152	; 0x98
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d100      	bne.n	800204e <HAL_UART_IRQHandler+0x7a>
 800204c:	e114      	b.n	8002278 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800204e:	239c      	movs	r3, #156	; 0x9c
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2201      	movs	r2, #1
 8002056:	4013      	ands	r3, r2
 8002058:	d106      	bne.n	8002068 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800205a:	23a0      	movs	r3, #160	; 0xa0
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a83      	ldr	r2, [pc, #524]	; (8002270 <HAL_UART_IRQHandler+0x29c>)
 8002062:	4013      	ands	r3, r2
 8002064:	d100      	bne.n	8002068 <HAL_UART_IRQHandler+0x94>
 8002066:	e107      	b.n	8002278 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002068:	23a4      	movs	r3, #164	; 0xa4
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2201      	movs	r2, #1
 8002070:	4013      	ands	r3, r2
 8002072:	d012      	beq.n	800209a <HAL_UART_IRQHandler+0xc6>
 8002074:	23a0      	movs	r3, #160	; 0xa0
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4013      	ands	r3, r2
 8002080:	d00b      	beq.n	800209a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2201      	movs	r2, #1
 8002088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2284      	movs	r2, #132	; 0x84
 800208e:	589b      	ldr	r3, [r3, r2]
 8002090:	2201      	movs	r2, #1
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2184      	movs	r1, #132	; 0x84
 8002098:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800209a:	23a4      	movs	r3, #164	; 0xa4
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d011      	beq.n	80020ca <HAL_UART_IRQHandler+0xf6>
 80020a6:	239c      	movs	r3, #156	; 0x9c
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2201      	movs	r2, #1
 80020ae:	4013      	ands	r3, r2
 80020b0:	d00b      	beq.n	80020ca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2202      	movs	r2, #2
 80020b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2284      	movs	r2, #132	; 0x84
 80020be:	589b      	ldr	r3, [r3, r2]
 80020c0:	2204      	movs	r2, #4
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2184      	movs	r1, #132	; 0x84
 80020c8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80020ca:	23a4      	movs	r3, #164	; 0xa4
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2204      	movs	r2, #4
 80020d2:	4013      	ands	r3, r2
 80020d4:	d011      	beq.n	80020fa <HAL_UART_IRQHandler+0x126>
 80020d6:	239c      	movs	r3, #156	; 0x9c
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	4013      	ands	r3, r2
 80020e0:	d00b      	beq.n	80020fa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2204      	movs	r2, #4
 80020e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2284      	movs	r2, #132	; 0x84
 80020ee:	589b      	ldr	r3, [r3, r2]
 80020f0:	2202      	movs	r2, #2
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2184      	movs	r1, #132	; 0x84
 80020f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80020fa:	23a4      	movs	r3, #164	; 0xa4
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2208      	movs	r2, #8
 8002102:	4013      	ands	r3, r2
 8002104:	d017      	beq.n	8002136 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002106:	23a0      	movs	r3, #160	; 0xa0
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2220      	movs	r2, #32
 800210e:	4013      	ands	r3, r2
 8002110:	d105      	bne.n	800211e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002112:	239c      	movs	r3, #156	; 0x9c
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2201      	movs	r2, #1
 800211a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800211c:	d00b      	beq.n	8002136 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2208      	movs	r2, #8
 8002124:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2284      	movs	r2, #132	; 0x84
 800212a:	589b      	ldr	r3, [r3, r2]
 800212c:	2208      	movs	r2, #8
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2184      	movs	r1, #132	; 0x84
 8002134:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002136:	23a4      	movs	r3, #164	; 0xa4
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	4013      	ands	r3, r2
 8002142:	d013      	beq.n	800216c <HAL_UART_IRQHandler+0x198>
 8002144:	23a0      	movs	r3, #160	; 0xa0
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	04db      	lsls	r3, r3, #19
 800214e:	4013      	ands	r3, r2
 8002150:	d00c      	beq.n	800216c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2280      	movs	r2, #128	; 0x80
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2284      	movs	r2, #132	; 0x84
 8002160:	589b      	ldr	r3, [r3, r2]
 8002162:	2220      	movs	r2, #32
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2184      	movs	r1, #132	; 0x84
 800216a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2284      	movs	r2, #132	; 0x84
 8002170:	589b      	ldr	r3, [r3, r2]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d100      	bne.n	8002178 <HAL_UART_IRQHandler+0x1a4>
 8002176:	e1e7      	b.n	8002548 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002178:	23a4      	movs	r3, #164	; 0xa4
 800217a:	18fb      	adds	r3, r7, r3
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2220      	movs	r2, #32
 8002180:	4013      	ands	r3, r2
 8002182:	d00e      	beq.n	80021a2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002184:	23a0      	movs	r3, #160	; 0xa0
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2220      	movs	r2, #32
 800218c:	4013      	ands	r3, r2
 800218e:	d008      	beq.n	80021a2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002194:	2b00      	cmp	r3, #0
 8002196:	d004      	beq.n	80021a2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	0010      	movs	r0, r2
 80021a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2284      	movs	r2, #132	; 0x84
 80021a6:	589b      	ldr	r3, [r3, r2]
 80021a8:	2194      	movs	r1, #148	; 0x94
 80021aa:	187a      	adds	r2, r7, r1
 80021ac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2240      	movs	r2, #64	; 0x40
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b40      	cmp	r3, #64	; 0x40
 80021ba:	d004      	beq.n	80021c6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80021bc:	187b      	adds	r3, r7, r1
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2228      	movs	r2, #40	; 0x28
 80021c2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80021c4:	d047      	beq.n	8002256 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 fdbf 	bl	8002d4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2240      	movs	r2, #64	; 0x40
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b40      	cmp	r3, #64	; 0x40
 80021da:	d137      	bne.n	800224c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021dc:	f3ef 8310 	mrs	r3, PRIMASK
 80021e0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80021e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021e4:	2090      	movs	r0, #144	; 0x90
 80021e6:	183a      	adds	r2, r7, r0
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	2301      	movs	r3, #1
 80021ec:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f0:	f383 8810 	msr	PRIMASK, r3
}
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2140      	movs	r1, #64	; 0x40
 8002202:	438a      	bics	r2, r1
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	183b      	adds	r3, r7, r0
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800220c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800220e:	f383 8810 	msr	PRIMASK, r3
}
 8002212:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002218:	2b00      	cmp	r3, #0
 800221a:	d012      	beq.n	8002242 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <HAL_UART_IRQHandler+0x2a0>)
 8002222:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002228:	0018      	movs	r0, r3
 800222a:	f7fe fd19 	bl	8000c60 <HAL_DMA_Abort_IT>
 800222e:	1e03      	subs	r3, r0, #0
 8002230:	d01a      	beq.n	8002268 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223c:	0018      	movs	r0, r3
 800223e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002240:	e012      	b.n	8002268 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	0018      	movs	r0, r3
 8002246:	f000 f99d 	bl	8002584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800224a:	e00d      	b.n	8002268 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f998 	bl	8002584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002254:	e008      	b.n	8002268 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	0018      	movs	r0, r3
 800225a:	f000 f993 	bl	8002584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2284      	movs	r2, #132	; 0x84
 8002262:	2100      	movs	r1, #0
 8002264:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002266:	e16f      	b.n	8002548 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002268:	46c0      	nop			; (mov r8, r8)
    return;
 800226a:	e16d      	b.n	8002548 <HAL_UART_IRQHandler+0x574>
 800226c:	0000080f 	.word	0x0000080f
 8002270:	04000120 	.word	0x04000120
 8002274:	08003007 	.word	0x08003007

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227c:	2b01      	cmp	r3, #1
 800227e:	d000      	beq.n	8002282 <HAL_UART_IRQHandler+0x2ae>
 8002280:	e139      	b.n	80024f6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002282:	23a4      	movs	r3, #164	; 0xa4
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2210      	movs	r2, #16
 800228a:	4013      	ands	r3, r2
 800228c:	d100      	bne.n	8002290 <HAL_UART_IRQHandler+0x2bc>
 800228e:	e132      	b.n	80024f6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002290:	23a0      	movs	r3, #160	; 0xa0
 8002292:	18fb      	adds	r3, r7, r3
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2210      	movs	r2, #16
 8002298:	4013      	ands	r3, r2
 800229a:	d100      	bne.n	800229e <HAL_UART_IRQHandler+0x2ca>
 800229c:	e12b      	b.n	80024f6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2210      	movs	r2, #16
 80022a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2240      	movs	r2, #64	; 0x40
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b40      	cmp	r3, #64	; 0x40
 80022b2:	d000      	beq.n	80022b6 <HAL_UART_IRQHandler+0x2e2>
 80022b4:	e09f      	b.n	80023f6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	217e      	movs	r1, #126	; 0x7e
 80022c0:	187b      	adds	r3, r7, r1
 80022c2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d100      	bne.n	80022ce <HAL_UART_IRQHandler+0x2fa>
 80022cc:	e13e      	b.n	800254c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2258      	movs	r2, #88	; 0x58
 80022d2:	5a9b      	ldrh	r3, [r3, r2]
 80022d4:	187a      	adds	r2, r7, r1
 80022d6:	8812      	ldrh	r2, [r2, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d300      	bcc.n	80022de <HAL_UART_IRQHandler+0x30a>
 80022dc:	e136      	b.n	800254c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	187a      	adds	r2, r7, r1
 80022e2:	215a      	movs	r1, #90	; 0x5a
 80022e4:	8812      	ldrh	r2, [r2, #0]
 80022e6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d06f      	beq.n	80023d2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f2:	f3ef 8310 	mrs	r3, PRIMASK
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80022fc:	2301      	movs	r3, #1
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002302:	f383 8810 	msr	PRIMASK, r3
}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4992      	ldr	r1, [pc, #584]	; (800255c <HAL_UART_IRQHandler+0x588>)
 8002314:	400a      	ands	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800231a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231e:	f383 8810 	msr	PRIMASK, r3
}
 8002322:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002324:	f3ef 8310 	mrs	r3, PRIMASK
 8002328:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800232a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800232c:	677b      	str	r3, [r7, #116]	; 0x74
 800232e:	2301      	movs	r3, #1
 8002330:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002334:	f383 8810 	msr	PRIMASK, r3
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	438a      	bics	r2, r1
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800234c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002350:	f383 8810 	msr	PRIMASK, r3
}
 8002354:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002356:	f3ef 8310 	mrs	r3, PRIMASK
 800235a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800235c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800235e:	673b      	str	r3, [r7, #112]	; 0x70
 8002360:	2301      	movs	r3, #1
 8002362:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002366:	f383 8810 	msr	PRIMASK, r3
}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2140      	movs	r1, #64	; 0x40
 8002378:	438a      	bics	r2, r1
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800237e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002382:	f383 8810 	msr	PRIMASK, r3
}
 8002386:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	2120      	movs	r1, #32
 800238e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002396:	f3ef 8310 	mrs	r3, PRIMASK
 800239a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800239c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800239e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023a0:	2301      	movs	r3, #1
 80023a2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023a6:	f383 8810 	msr	PRIMASK, r3
}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2110      	movs	r1, #16
 80023b8:	438a      	bics	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023be:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c2:	f383 8810 	msr	PRIMASK, r3
}
 80023c6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7fe fc0f 	bl	8000bf0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2258      	movs	r2, #88	; 0x58
 80023dc:	5a9a      	ldrh	r2, [r3, r2]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	215a      	movs	r1, #90	; 0x5a
 80023e2:	5a5b      	ldrh	r3, [r3, r1]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0011      	movs	r1, r2
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 f8d0 	bl	8002594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80023f4:	e0aa      	b.n	800254c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2258      	movs	r2, #88	; 0x58
 80023fa:	5a99      	ldrh	r1, [r3, r2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	225a      	movs	r2, #90	; 0x5a
 8002400:	5a9b      	ldrh	r3, [r3, r2]
 8002402:	b29a      	uxth	r2, r3
 8002404:	208e      	movs	r0, #142	; 0x8e
 8002406:	183b      	adds	r3, r7, r0
 8002408:	1a8a      	subs	r2, r1, r2
 800240a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	225a      	movs	r2, #90	; 0x5a
 8002410:	5a9b      	ldrh	r3, [r3, r2]
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d100      	bne.n	800241a <HAL_UART_IRQHandler+0x446>
 8002418:	e09a      	b.n	8002550 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800241a:	183b      	adds	r3, r7, r0
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d100      	bne.n	8002424 <HAL_UART_IRQHandler+0x450>
 8002422:	e095      	b.n	8002550 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002424:	f3ef 8310 	mrs	r3, PRIMASK
 8002428:	60fb      	str	r3, [r7, #12]
  return(result);
 800242a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800242c:	2488      	movs	r4, #136	; 0x88
 800242e:	193a      	adds	r2, r7, r4
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	2301      	movs	r3, #1
 8002434:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f383 8810 	msr	PRIMASK, r3
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4945      	ldr	r1, [pc, #276]	; (8002560 <HAL_UART_IRQHandler+0x58c>)
 800244a:	400a      	ands	r2, r1
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	193b      	adds	r3, r7, r4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f383 8810 	msr	PRIMASK, r3
}
 800245a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800245c:	f3ef 8310 	mrs	r3, PRIMASK
 8002460:	61bb      	str	r3, [r7, #24]
  return(result);
 8002462:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002464:	2484      	movs	r4, #132	; 0x84
 8002466:	193a      	adds	r2, r7, r4
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	2301      	movs	r3, #1
 800246c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f383 8810 	msr	PRIMASK, r3
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2101      	movs	r1, #1
 8002482:	438a      	bics	r2, r1
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	193b      	adds	r3, r7, r4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	f383 8810 	msr	PRIMASK, r3
}
 8002492:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	2120      	movs	r1, #32
 800249a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024a8:	f3ef 8310 	mrs	r3, PRIMASK
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024b0:	2480      	movs	r4, #128	; 0x80
 80024b2:	193a      	adds	r2, r7, r4
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	2301      	movs	r3, #1
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	f383 8810 	msr	PRIMASK, r3
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2110      	movs	r1, #16
 80024ce:	438a      	bics	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	193b      	adds	r3, r7, r4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	f383 8810 	msr	PRIMASK, r3
}
 80024de:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024e6:	183b      	adds	r3, r7, r0
 80024e8:	881a      	ldrh	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	0011      	movs	r1, r2
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 f850 	bl	8002594 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80024f4:	e02c      	b.n	8002550 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80024f6:	23a4      	movs	r3, #164	; 0xa4
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	4013      	ands	r3, r2
 8002500:	d00f      	beq.n	8002522 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002502:	23a0      	movs	r3, #160	; 0xa0
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	4013      	ands	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01e      	beq.n	8002554 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	0010      	movs	r0, r2
 800251e:	4798      	blx	r3
    }
    return;
 8002520:	e018      	b.n	8002554 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002522:	23a4      	movs	r3, #164	; 0xa4
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2240      	movs	r2, #64	; 0x40
 800252a:	4013      	ands	r3, r2
 800252c:	d013      	beq.n	8002556 <HAL_UART_IRQHandler+0x582>
 800252e:	23a0      	movs	r3, #160	; 0xa0
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2240      	movs	r2, #64	; 0x40
 8002536:	4013      	ands	r3, r2
 8002538:	d00d      	beq.n	8002556 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	0018      	movs	r0, r3
 800253e:	f000 fe31 	bl	80031a4 <UART_EndTransmit_IT>
    return;
 8002542:	e008      	b.n	8002556 <HAL_UART_IRQHandler+0x582>
      return;
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	e006      	b.n	8002556 <HAL_UART_IRQHandler+0x582>
    return;
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	e004      	b.n	8002556 <HAL_UART_IRQHandler+0x582>
      return;
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	e002      	b.n	8002556 <HAL_UART_IRQHandler+0x582>
      return;
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	e000      	b.n	8002556 <HAL_UART_IRQHandler+0x582>
    return;
 8002554:	46c0      	nop			; (mov r8, r8)
  }

}
 8002556:	46bd      	mov	sp, r7
 8002558:	b02b      	add	sp, #172	; 0xac
 800255a:	bd90      	pop	{r4, r7, pc}
 800255c:	fffffeff 	.word	0xfffffeff
 8002560:	fffffedf 	.word	0xfffffedf

08002564 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b002      	add	sp, #8
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	46bd      	mov	sp, r7
 8002580:	b002      	add	sp, #8
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800258c:	46c0      	nop			; (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	000a      	movs	r2, r1
 800259e:	1cbb      	adds	r3, r7, #2
 80025a0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b002      	add	sp, #8
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025b4:	231e      	movs	r3, #30
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a8d      	ldr	r2, [pc, #564]	; (8002810 <UART_SetConfig+0x264>)
 80025dc:	4013      	ands	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4a88      	ldr	r2, [pc, #544]	; (8002814 <UART_SetConfig+0x268>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a7f      	ldr	r2, [pc, #508]	; (8002818 <UART_SetConfig+0x26c>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	430a      	orrs	r2, r1
 8002626:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a7b      	ldr	r2, [pc, #492]	; (800281c <UART_SetConfig+0x270>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d127      	bne.n	8002682 <UART_SetConfig+0xd6>
 8002632:	4b7b      	ldr	r3, [pc, #492]	; (8002820 <UART_SetConfig+0x274>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	2203      	movs	r2, #3
 8002638:	4013      	ands	r3, r2
 800263a:	2b03      	cmp	r3, #3
 800263c:	d00d      	beq.n	800265a <UART_SetConfig+0xae>
 800263e:	d81b      	bhi.n	8002678 <UART_SetConfig+0xcc>
 8002640:	2b02      	cmp	r3, #2
 8002642:	d014      	beq.n	800266e <UART_SetConfig+0xc2>
 8002644:	d818      	bhi.n	8002678 <UART_SetConfig+0xcc>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <UART_SetConfig+0xa4>
 800264a:	2b01      	cmp	r3, #1
 800264c:	d00a      	beq.n	8002664 <UART_SetConfig+0xb8>
 800264e:	e013      	b.n	8002678 <UART_SetConfig+0xcc>
 8002650:	231f      	movs	r3, #31
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e021      	b.n	800269e <UART_SetConfig+0xf2>
 800265a:	231f      	movs	r3, #31
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2202      	movs	r2, #2
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e01c      	b.n	800269e <UART_SetConfig+0xf2>
 8002664:	231f      	movs	r3, #31
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2204      	movs	r2, #4
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e017      	b.n	800269e <UART_SetConfig+0xf2>
 800266e:	231f      	movs	r3, #31
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	2208      	movs	r2, #8
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e012      	b.n	800269e <UART_SetConfig+0xf2>
 8002678:	231f      	movs	r3, #31
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	2210      	movs	r2, #16
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e00d      	b.n	800269e <UART_SetConfig+0xf2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a67      	ldr	r2, [pc, #412]	; (8002824 <UART_SetConfig+0x278>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d104      	bne.n	8002696 <UART_SetConfig+0xea>
 800268c:	231f      	movs	r3, #31
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e003      	b.n	800269e <UART_SetConfig+0xf2>
 8002696:	231f      	movs	r3, #31
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2210      	movs	r2, #16
 800269c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d15c      	bne.n	8002764 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80026aa:	231f      	movs	r3, #31
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d015      	beq.n	80026e0 <UART_SetConfig+0x134>
 80026b4:	dc18      	bgt.n	80026e8 <UART_SetConfig+0x13c>
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d00d      	beq.n	80026d6 <UART_SetConfig+0x12a>
 80026ba:	dc15      	bgt.n	80026e8 <UART_SetConfig+0x13c>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <UART_SetConfig+0x11a>
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d005      	beq.n	80026d0 <UART_SetConfig+0x124>
 80026c4:	e010      	b.n	80026e8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026c6:	f7ff f9f5 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 80026ca:	0003      	movs	r3, r0
 80026cc:	61bb      	str	r3, [r7, #24]
        break;
 80026ce:	e012      	b.n	80026f6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026d0:	4b55      	ldr	r3, [pc, #340]	; (8002828 <UART_SetConfig+0x27c>)
 80026d2:	61bb      	str	r3, [r7, #24]
        break;
 80026d4:	e00f      	b.n	80026f6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026d6:	f7ff f98d 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 80026da:	0003      	movs	r3, r0
 80026dc:	61bb      	str	r3, [r7, #24]
        break;
 80026de:	e00a      	b.n	80026f6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	61bb      	str	r3, [r7, #24]
        break;
 80026e6:	e006      	b.n	80026f6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026ec:	231e      	movs	r3, #30
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
        break;
 80026f4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d100      	bne.n	80026fe <UART_SetConfig+0x152>
 80026fc:	e07a      	b.n	80027f4 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	005a      	lsls	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	18d2      	adds	r2, r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	0019      	movs	r1, r3
 8002710:	0010      	movs	r0, r2
 8002712:	f7fd fd01 	bl	8000118 <__udivsi3>
 8002716:	0003      	movs	r3, r0
 8002718:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d91c      	bls.n	800275a <UART_SetConfig+0x1ae>
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	025b      	lsls	r3, r3, #9
 8002726:	429a      	cmp	r2, r3
 8002728:	d217      	bcs.n	800275a <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	b29a      	uxth	r2, r3
 800272e:	200e      	movs	r0, #14
 8002730:	183b      	adds	r3, r7, r0
 8002732:	210f      	movs	r1, #15
 8002734:	438a      	bics	r2, r1
 8002736:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	b29b      	uxth	r3, r3
 800273e:	2207      	movs	r2, #7
 8002740:	4013      	ands	r3, r2
 8002742:	b299      	uxth	r1, r3
 8002744:	183b      	adds	r3, r7, r0
 8002746:	183a      	adds	r2, r7, r0
 8002748:	8812      	ldrh	r2, [r2, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	183a      	adds	r2, r7, r0
 8002754:	8812      	ldrh	r2, [r2, #0]
 8002756:	60da      	str	r2, [r3, #12]
 8002758:	e04c      	b.n	80027f4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800275a:	231e      	movs	r3, #30
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	2201      	movs	r2, #1
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	e047      	b.n	80027f4 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002764:	231f      	movs	r3, #31
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b08      	cmp	r3, #8
 800276c:	d015      	beq.n	800279a <UART_SetConfig+0x1ee>
 800276e:	dc18      	bgt.n	80027a2 <UART_SetConfig+0x1f6>
 8002770:	2b04      	cmp	r3, #4
 8002772:	d00d      	beq.n	8002790 <UART_SetConfig+0x1e4>
 8002774:	dc15      	bgt.n	80027a2 <UART_SetConfig+0x1f6>
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <UART_SetConfig+0x1d4>
 800277a:	2b02      	cmp	r3, #2
 800277c:	d005      	beq.n	800278a <UART_SetConfig+0x1de>
 800277e:	e010      	b.n	80027a2 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002780:	f7ff f998 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 8002784:	0003      	movs	r3, r0
 8002786:	61bb      	str	r3, [r7, #24]
        break;
 8002788:	e012      	b.n	80027b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800278a:	4b27      	ldr	r3, [pc, #156]	; (8002828 <UART_SetConfig+0x27c>)
 800278c:	61bb      	str	r3, [r7, #24]
        break;
 800278e:	e00f      	b.n	80027b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002790:	f7ff f930 	bl	80019f4 <HAL_RCC_GetSysClockFreq>
 8002794:	0003      	movs	r3, r0
 8002796:	61bb      	str	r3, [r7, #24]
        break;
 8002798:	e00a      	b.n	80027b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	61bb      	str	r3, [r7, #24]
        break;
 80027a0:	e006      	b.n	80027b0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027a6:	231e      	movs	r3, #30
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
        break;
 80027ae:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01e      	beq.n	80027f4 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	085a      	lsrs	r2, r3, #1
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	18d2      	adds	r2, r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	0019      	movs	r1, r3
 80027c6:	0010      	movs	r0, r2
 80027c8:	f7fd fca6 	bl	8000118 <__udivsi3>
 80027cc:	0003      	movs	r3, r0
 80027ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	d90a      	bls.n	80027ec <UART_SetConfig+0x240>
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	025b      	lsls	r3, r3, #9
 80027dc:	429a      	cmp	r2, r3
 80027de:	d205      	bcs.n	80027ec <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	e003      	b.n	80027f4 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80027ec:	231e      	movs	r3, #30
 80027ee:	18fb      	adds	r3, r7, r3
 80027f0:	2201      	movs	r2, #1
 80027f2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002800:	231e      	movs	r3, #30
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	781b      	ldrb	r3, [r3, #0]
}
 8002806:	0018      	movs	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	b008      	add	sp, #32
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	ffff69f3 	.word	0xffff69f3
 8002814:	ffffcfff 	.word	0xffffcfff
 8002818:	fffff4ff 	.word	0xfffff4ff
 800281c:	40013800 	.word	0x40013800
 8002820:	40021000 	.word	0x40021000
 8002824:	40004400 	.word	0x40004400
 8002828:	007a1200 	.word	0x007a1200

0800282c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	2208      	movs	r2, #8
 800283a:	4013      	ands	r3, r2
 800283c:	d00b      	beq.n	8002856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a4a      	ldr	r2, [pc, #296]	; (8002970 <UART_AdvFeatureConfig+0x144>)
 8002846:	4013      	ands	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	d00b      	beq.n	8002878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4a43      	ldr	r2, [pc, #268]	; (8002974 <UART_AdvFeatureConfig+0x148>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	2202      	movs	r2, #2
 800287e:	4013      	ands	r3, r2
 8002880:	d00b      	beq.n	800289a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a3b      	ldr	r2, [pc, #236]	; (8002978 <UART_AdvFeatureConfig+0x14c>)
 800288a:	4013      	ands	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2204      	movs	r2, #4
 80028a0:	4013      	ands	r3, r2
 80028a2:	d00b      	beq.n	80028bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4a34      	ldr	r2, [pc, #208]	; (800297c <UART_AdvFeatureConfig+0x150>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	2210      	movs	r2, #16
 80028c2:	4013      	ands	r3, r2
 80028c4:	d00b      	beq.n	80028de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a2c      	ldr	r2, [pc, #176]	; (8002980 <UART_AdvFeatureConfig+0x154>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	2220      	movs	r2, #32
 80028e4:	4013      	ands	r3, r2
 80028e6:	d00b      	beq.n	8002900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	4a25      	ldr	r2, [pc, #148]	; (8002984 <UART_AdvFeatureConfig+0x158>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	0019      	movs	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	2240      	movs	r2, #64	; 0x40
 8002906:	4013      	ands	r3, r2
 8002908:	d01d      	beq.n	8002946 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <UART_AdvFeatureConfig+0x15c>)
 8002912:	4013      	ands	r3, r2
 8002914:	0019      	movs	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	035b      	lsls	r3, r3, #13
 800292a:	429a      	cmp	r2, r3
 800292c:	d10b      	bne.n	8002946 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a15      	ldr	r2, [pc, #84]	; (800298c <UART_AdvFeatureConfig+0x160>)
 8002936:	4013      	ands	r3, r2
 8002938:	0019      	movs	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	4013      	ands	r3, r2
 800294e:	d00b      	beq.n	8002968 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <UART_AdvFeatureConfig+0x164>)
 8002958:	4013      	ands	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	605a      	str	r2, [r3, #4]
  }
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}
 8002970:	ffff7fff 	.word	0xffff7fff
 8002974:	fffdffff 	.word	0xfffdffff
 8002978:	fffeffff 	.word	0xfffeffff
 800297c:	fffbffff 	.word	0xfffbffff
 8002980:	ffffefff 	.word	0xffffefff
 8002984:	ffffdfff 	.word	0xffffdfff
 8002988:	ffefffff 	.word	0xffefffff
 800298c:	ff9fffff 	.word	0xff9fffff
 8002990:	fff7ffff 	.word	0xfff7ffff

08002994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b092      	sub	sp, #72	; 0x48
 8002998:	af02      	add	r7, sp, #8
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2284      	movs	r2, #132	; 0x84
 80029a0:	2100      	movs	r1, #0
 80029a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029a4:	f7fd ff6a 	bl	800087c <HAL_GetTick>
 80029a8:	0003      	movs	r3, r0
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2208      	movs	r2, #8
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d12c      	bne.n	8002a14 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029bc:	2280      	movs	r2, #128	; 0x80
 80029be:	0391      	lsls	r1, r2, #14
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	4a46      	ldr	r2, [pc, #280]	; (8002adc <UART_CheckIdleState+0x148>)
 80029c4:	9200      	str	r2, [sp, #0]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f000 f88c 	bl	8002ae4 <UART_WaitOnFlagUntilTimeout>
 80029cc:	1e03      	subs	r3, r0, #0
 80029ce:	d021      	beq.n	8002a14 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029d0:	f3ef 8310 	mrs	r3, PRIMASK
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80029d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80029da:	2301      	movs	r3, #1
 80029dc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	f383 8810 	msr	PRIMASK, r3
}
 80029e4:	46c0      	nop			; (mov r8, r8)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	438a      	bics	r2, r1
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	f383 8810 	msr	PRIMASK, r3
}
 8002a00:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2278      	movs	r2, #120	; 0x78
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e05f      	b.n	8002ad4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d146      	bne.n	8002ab0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	03d1      	lsls	r1, r2, #15
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4a2c      	ldr	r2, [pc, #176]	; (8002adc <UART_CheckIdleState+0x148>)
 8002a2c:	9200      	str	r2, [sp, #0]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f000 f858 	bl	8002ae4 <UART_WaitOnFlagUntilTimeout>
 8002a34:	1e03      	subs	r3, r0, #0
 8002a36:	d03b      	beq.n	8002ab0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a38:	f3ef 8310 	mrs	r3, PRIMASK
 8002a3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
 8002a42:	2301      	movs	r3, #1
 8002a44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f383 8810 	msr	PRIMASK, r3
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4921      	ldr	r1, [pc, #132]	; (8002ae0 <UART_CheckIdleState+0x14c>)
 8002a5a:	400a      	ands	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f383 8810 	msr	PRIMASK, r3
}
 8002a68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a70:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
 8002a74:	2301      	movs	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f383 8810 	msr	PRIMASK, r3
}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	438a      	bics	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	f383 8810 	msr	PRIMASK, r3
}
 8002a9a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	2120      	movs	r1, #32
 8002aa2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2278      	movs	r2, #120	; 0x78
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e011      	b.n	8002ad4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2280      	movs	r2, #128	; 0x80
 8002aba:	2120      	movs	r1, #32
 8002abc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2278      	movs	r2, #120	; 0x78
 8002ace:	2100      	movs	r1, #0
 8002ad0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b010      	add	sp, #64	; 0x40
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	01ffffff 	.word	0x01ffffff
 8002ae0:	fffffedf 	.word	0xfffffedf

08002ae4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	1dfb      	adds	r3, r7, #7
 8002af2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af4:	e051      	b.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	3301      	adds	r3, #1
 8002afa:	d04e      	beq.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afc:	f7fd febe 	bl	800087c <HAL_GetTick>
 8002b00:	0002      	movs	r2, r0
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d302      	bcc.n	8002b12 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e051      	b.n	8002bba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d03b      	beq.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d038      	beq.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b40      	cmp	r3, #64	; 0x40
 8002b2c:	d035      	beq.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2208      	movs	r2, #8
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d111      	bne.n	8002b60 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2208      	movs	r2, #8
 8002b42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 f900 	bl	8002d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2284      	movs	r2, #132	; 0x84
 8002b50:	2108      	movs	r1, #8
 8002b52:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2278      	movs	r2, #120	; 0x78
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e02c      	b.n	8002bba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d112      	bne.n	8002b9a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	0112      	lsls	r2, r2, #4
 8002b7c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f8e3 	bl	8002d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2284      	movs	r2, #132	; 0x84
 8002b8a:	2120      	movs	r1, #32
 8002b8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2278      	movs	r2, #120	; 0x78
 8002b92:	2100      	movs	r1, #0
 8002b94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e00f      	b.n	8002bba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	425a      	negs	r2, r3
 8002baa:	4153      	adcs	r3, r2
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	001a      	movs	r2, r3
 8002bb0:	1dfb      	adds	r3, r7, #7
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d09e      	beq.n	8002af6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	0018      	movs	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b004      	add	sp, #16
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b090      	sub	sp, #64	; 0x40
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	1dbb      	adds	r3, r7, #6
 8002bd0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1dba      	adds	r2, r7, #6
 8002bdc:	2158      	movs	r1, #88	; 0x58
 8002bde:	8812      	ldrh	r2, [r2, #0]
 8002be0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2284      	movs	r2, #132	; 0x84
 8002be6:	2100      	movs	r1, #0
 8002be8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	2122      	movs	r1, #34	; 0x22
 8002bf0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d028      	beq.n	8002c4c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfe:	4a3e      	ldr	r2, [pc, #248]	; (8002cf8 <UART_Start_Receive_DMA+0x134>)
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	4a3d      	ldr	r2, [pc, #244]	; (8002cfc <UART_Start_Receive_DMA+0x138>)
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0e:	4a3c      	ldr	r2, [pc, #240]	; (8002d00 <UART_Start_Receive_DMA+0x13c>)
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	2200      	movs	r2, #0
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3324      	adds	r3, #36	; 0x24
 8002c24:	0019      	movs	r1, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	1dbb      	adds	r3, r7, #6
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	f7fd ff78 	bl	8000b24 <HAL_DMA_Start_IT>
 8002c34:	1e03      	subs	r3, r0, #0
 8002c36:	d009      	beq.n	8002c4c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2284      	movs	r2, #132	; 0x84
 8002c3c:	2110      	movs	r1, #16
 8002c3e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	2120      	movs	r1, #32
 8002c46:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e050      	b.n	8002cee <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d019      	beq.n	8002c88 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c54:	f3ef 8310 	mrs	r3, PRIMASK
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5e:	2301      	movs	r3, #1
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	f383 8810 	msr	PRIMASK, r3
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	0049      	lsls	r1, r1, #1
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	f383 8810 	msr	PRIMASK, r3
}
 8002c86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c88:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8c:	613b      	str	r3, [r7, #16]
  return(result);
 8002c8e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c92:	2301      	movs	r3, #1
 8002c94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f383 8810 	msr	PRIMASK, r3
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2101      	movs	r1, #1
 8002caa:	430a      	orrs	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f383 8810 	msr	PRIMASK, r3
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cba:	f3ef 8310 	mrs	r3, PRIMASK
 8002cbe:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cc0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f383 8810 	msr	PRIMASK, r3
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	f383 8810 	msr	PRIMASK, r3
}
 8002cea:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b010      	add	sp, #64	; 0x40
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	08002e15 	.word	0x08002e15
 8002cfc:	08002f41 	.word	0x08002f41
 8002d00:	08002f83 	.word	0x08002f83

08002d04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d10:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d12:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	2301      	movs	r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	21c0      	movs	r1, #192	; 0xc0
 8002d2e:	438a      	bics	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f383 8810 	msr	PRIMASK, r3
}
 8002d3c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b006      	add	sp, #24
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08e      	sub	sp, #56	; 0x38
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d54:	f3ef 8310 	mrs	r3, PRIMASK
 8002d58:	617b      	str	r3, [r7, #20]
  return(result);
 8002d5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d5e:	2301      	movs	r3, #1
 8002d60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f383 8810 	msr	PRIMASK, r3
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4926      	ldr	r1, [pc, #152]	; (8002e10 <UART_EndRxTransfer+0xc4>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f383 8810 	msr	PRIMASK, r3
}
 8002d84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d86:	f3ef 8310 	mrs	r3, PRIMASK
 8002d8a:	623b      	str	r3, [r7, #32]
  return(result);
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d90:	2301      	movs	r3, #1
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f383 8810 	msr	PRIMASK, r3
}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2101      	movs	r1, #1
 8002da8:	438a      	bics	r2, r1
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	f383 8810 	msr	PRIMASK, r3
}
 8002db6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d118      	bne.n	8002df2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dca:	2301      	movs	r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f383 8810 	msr	PRIMASK, r3
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2110      	movs	r1, #16
 8002de2:	438a      	bics	r2, r1
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f383 8810 	msr	PRIMASK, r3
}
 8002df0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	2120      	movs	r1, #32
 8002df8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b00e      	add	sp, #56	; 0x38
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	fffffedf 	.word	0xfffffedf

08002e14 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b094      	sub	sp, #80	; 0x50
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d06f      	beq.n	8002f0a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8002e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e2c:	225a      	movs	r2, #90	; 0x5a
 8002e2e:	2100      	movs	r1, #0
 8002e30:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e32:	f3ef 8310 	mrs	r3, PRIMASK
 8002e36:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e38:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f383 8810 	msr	PRIMASK, r3
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	493a      	ldr	r1, [pc, #232]	; (8002f3c <UART_DMAReceiveCplt+0x128>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	f383 8810 	msr	PRIMASK, r3
}
 8002e62:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e64:	f3ef 8310 	mrs	r3, PRIMASK
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e6e:	2301      	movs	r3, #1
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	f383 8810 	msr	PRIMASK, r3
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2101      	movs	r1, #1
 8002e86:	438a      	bics	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
 8002e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	f383 8810 	msr	PRIMASK, r3
}
 8002e94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e96:	f3ef 8310 	mrs	r3, PRIMASK
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea6:	f383 8810 	msr	PRIMASK, r3
}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2140      	movs	r1, #64	; 0x40
 8002eb8:	438a      	bics	r2, r1
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	f383 8810 	msr	PRIMASK, r3
}
 8002ec6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	2120      	movs	r1, #32
 8002ece:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d118      	bne.n	8002f0a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8002edc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ede:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f383 8810 	msr	PRIMASK, r3
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2110      	movs	r1, #16
 8002efa:	438a      	bics	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d108      	bne.n	8002f2a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1a:	2258      	movs	r2, #88	; 0x58
 8002f1c:	5a9a      	ldrh	r2, [r3, r2]
 8002f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f20:	0011      	movs	r1, r2
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7ff fb36 	bl	8002594 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f28:	e003      	b.n	8002f32 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7ff fb19 	bl	8002564 <HAL_UART_RxCpltCallback>
}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b014      	add	sp, #80	; 0x50
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	fffffeff 	.word	0xfffffeff

08002f40 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10a      	bne.n	8002f72 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2258      	movs	r2, #88	; 0x58
 8002f60:	5a9b      	ldrh	r3, [r3, r2]
 8002f62:	085b      	lsrs	r3, r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	0011      	movs	r1, r2
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff fb12 	bl	8002594 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f70:	e003      	b.n	8002f7a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7ff fafd 	bl	8002574 <HAL_UART_RxHalfCpltCallback>
}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b004      	add	sp, #16
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	589b      	ldr	r3, [r3, r2]
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b80      	cmp	r3, #128	; 0x80
 8002faa:	d10a      	bne.n	8002fc2 <UART_DMAError+0x40>
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b21      	cmp	r3, #33	; 0x21
 8002fb0:	d107      	bne.n	8002fc2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2252      	movs	r2, #82	; 0x52
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff fea1 	bl	8002d04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2240      	movs	r2, #64	; 0x40
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d10a      	bne.n	8002fe6 <UART_DMAError+0x64>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b22      	cmp	r3, #34	; 0x22
 8002fd4:	d107      	bne.n	8002fe6 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	225a      	movs	r2, #90	; 0x5a
 8002fda:	2100      	movs	r1, #0
 8002fdc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7ff feb3 	bl	8002d4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2284      	movs	r2, #132	; 0x84
 8002fea:	589b      	ldr	r3, [r3, r2]
 8002fec:	2210      	movs	r2, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2184      	movs	r1, #132	; 0x84
 8002ff4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7ff fac3 	bl	8002584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b006      	add	sp, #24
 8003004:	bd80      	pop	{r7, pc}

08003006 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	225a      	movs	r2, #90	; 0x5a
 8003018:	2100      	movs	r1, #0
 800301a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2252      	movs	r2, #82	; 0x52
 8003020:	2100      	movs	r1, #0
 8003022:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	0018      	movs	r0, r3
 8003028:	f7ff faac 	bl	8002584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800302c:	46c0      	nop			; (mov r8, r8)
 800302e:	46bd      	mov	sp, r7
 8003030:	b004      	add	sp, #16
 8003032:	bd80      	pop	{r7, pc}

08003034 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003040:	2b21      	cmp	r3, #33	; 0x21
 8003042:	d14d      	bne.n	80030e0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2252      	movs	r2, #82	; 0x52
 8003048:	5a9b      	ldrh	r3, [r3, r2]
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d132      	bne.n	80030b6 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003050:	f3ef 8310 	mrs	r3, PRIMASK
 8003054:	60bb      	str	r3, [r7, #8]
  return(result);
 8003056:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	2301      	movs	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f383 8810 	msr	PRIMASK, r3
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2180      	movs	r1, #128	; 0x80
 8003072:	438a      	bics	r2, r1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f383 8810 	msr	PRIMASK, r3
}
 8003080:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003082:	f3ef 8310 	mrs	r3, PRIMASK
 8003086:	617b      	str	r3, [r7, #20]
  return(result);
 8003088:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800308a:	623b      	str	r3, [r7, #32]
 800308c:	2301      	movs	r3, #1
 800308e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	f383 8810 	msr	PRIMASK, r3
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2140      	movs	r1, #64	; 0x40
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f383 8810 	msr	PRIMASK, r3
}
 80030b2:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80030b4:	e014      	b.n	80030e0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b292      	uxth	r2, r2
 80030c2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2252      	movs	r2, #82	; 0x52
 80030d2:	5a9b      	ldrh	r3, [r3, r2]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b299      	uxth	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2252      	movs	r2, #82	; 0x52
 80030de:	5299      	strh	r1, [r3, r2]
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b00a      	add	sp, #40	; 0x28
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08c      	sub	sp, #48	; 0x30
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030f4:	2b21      	cmp	r3, #33	; 0x21
 80030f6:	d151      	bne.n	800319c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2252      	movs	r2, #82	; 0x52
 80030fc:	5a9b      	ldrh	r3, [r3, r2]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d132      	bne.n	800316a <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003104:	f3ef 8310 	mrs	r3, PRIMASK
 8003108:	60fb      	str	r3, [r7, #12]
  return(result);
 800310a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
 800310e:	2301      	movs	r3, #1
 8003110:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f383 8810 	msr	PRIMASK, r3
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	438a      	bics	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f383 8810 	msr	PRIMASK, r3
}
 8003134:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003136:	f3ef 8310 	mrs	r3, PRIMASK
 800313a:	61bb      	str	r3, [r7, #24]
  return(result);
 800313c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
 8003140:	2301      	movs	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f383 8810 	msr	PRIMASK, r3
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2140      	movs	r1, #64	; 0x40
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	f383 8810 	msr	PRIMASK, r3
}
 8003166:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003168:	e018      	b.n	800319c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	881a      	ldrh	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	05d2      	lsls	r2, r2, #23
 800317a:	0dd2      	lsrs	r2, r2, #23
 800317c:	b292      	uxth	r2, r2
 800317e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003184:	1c9a      	adds	r2, r3, #2
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2252      	movs	r2, #82	; 0x52
 800318e:	5a9b      	ldrh	r3, [r3, r2]
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b299      	uxth	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2252      	movs	r2, #82	; 0x52
 800319a:	5299      	strh	r1, [r3, r2]
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b00c      	add	sp, #48	; 0x30
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ac:	f3ef 8310 	mrs	r3, PRIMASK
 80031b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80031b2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	2301      	movs	r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f383 8810 	msr	PRIMASK, r3
}
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2140      	movs	r1, #64	; 0x40
 80031ce:	438a      	bics	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f383 8810 	msr	PRIMASK, r3
}
 80031dc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7fd fab3 	bl	8000758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b006      	add	sp, #24
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <__libc_init_array>:
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	2600      	movs	r6, #0
 8003200:	4d0c      	ldr	r5, [pc, #48]	; (8003234 <__libc_init_array+0x38>)
 8003202:	4c0d      	ldr	r4, [pc, #52]	; (8003238 <__libc_init_array+0x3c>)
 8003204:	1b64      	subs	r4, r4, r5
 8003206:	10a4      	asrs	r4, r4, #2
 8003208:	42a6      	cmp	r6, r4
 800320a:	d109      	bne.n	8003220 <__libc_init_array+0x24>
 800320c:	2600      	movs	r6, #0
 800320e:	f000 f82b 	bl	8003268 <_init>
 8003212:	4d0a      	ldr	r5, [pc, #40]	; (800323c <__libc_init_array+0x40>)
 8003214:	4c0a      	ldr	r4, [pc, #40]	; (8003240 <__libc_init_array+0x44>)
 8003216:	1b64      	subs	r4, r4, r5
 8003218:	10a4      	asrs	r4, r4, #2
 800321a:	42a6      	cmp	r6, r4
 800321c:	d105      	bne.n	800322a <__libc_init_array+0x2e>
 800321e:	bd70      	pop	{r4, r5, r6, pc}
 8003220:	00b3      	lsls	r3, r6, #2
 8003222:	58eb      	ldr	r3, [r5, r3]
 8003224:	4798      	blx	r3
 8003226:	3601      	adds	r6, #1
 8003228:	e7ee      	b.n	8003208 <__libc_init_array+0xc>
 800322a:	00b3      	lsls	r3, r6, #2
 800322c:	58eb      	ldr	r3, [r5, r3]
 800322e:	4798      	blx	r3
 8003230:	3601      	adds	r6, #1
 8003232:	e7f2      	b.n	800321a <__libc_init_array+0x1e>
 8003234:	080032c8 	.word	0x080032c8
 8003238:	080032c8 	.word	0x080032c8
 800323c:	080032c8 	.word	0x080032c8
 8003240:	080032cc 	.word	0x080032cc

08003244 <memcpy>:
 8003244:	2300      	movs	r3, #0
 8003246:	b510      	push	{r4, lr}
 8003248:	429a      	cmp	r2, r3
 800324a:	d100      	bne.n	800324e <memcpy+0xa>
 800324c:	bd10      	pop	{r4, pc}
 800324e:	5ccc      	ldrb	r4, [r1, r3]
 8003250:	54c4      	strb	r4, [r0, r3]
 8003252:	3301      	adds	r3, #1
 8003254:	e7f8      	b.n	8003248 <memcpy+0x4>

08003256 <memset>:
 8003256:	0003      	movs	r3, r0
 8003258:	1882      	adds	r2, r0, r2
 800325a:	4293      	cmp	r3, r2
 800325c:	d100      	bne.n	8003260 <memset+0xa>
 800325e:	4770      	bx	lr
 8003260:	7019      	strb	r1, [r3, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	e7f9      	b.n	800325a <memset+0x4>
	...

08003268 <_init>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr

08003274 <_fini>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr
