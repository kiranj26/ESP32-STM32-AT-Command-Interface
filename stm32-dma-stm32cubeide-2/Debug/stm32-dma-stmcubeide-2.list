
stm32-dma-stmcubeide-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003718  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003810  08003810  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003810  08003810  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003810  08003810  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000018  08003830  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003830  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008801  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016df  00000000  00000000  00028841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  00029f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  0002a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbb9  00000000  00000000  0002ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000090be  00000000  00000000  0003a721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cf5d  00000000  00000000  000437df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a073c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001560  00000000  00000000  000a078c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037c0 	.word	0x080037c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080037c0 	.word	0x080037c0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <SendATCommand_IT>:
uint8_t txMessage[] = "AT+GMR\r\n";  // AT command to send
uint8_t rxByte;  // Single-byte RX buffer

/* Function to Send AT Command via Interrupt */
void SendATCommand_IT(char *command)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*)command, strlen(command));
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	0018      	movs	r0, r3
 800023c:	f7ff ff64 	bl	8000108 <strlen>
 8000240:	0003      	movs	r3, r0
 8000242:	b29a      	uxth	r2, r3
 8000244:	6879      	ldr	r1, [r7, #4]
 8000246:	4b04      	ldr	r3, [pc, #16]	; (8000258 <SendATCommand_IT+0x28>)
 8000248:	0018      	movs	r0, r3
 800024a:	f001 fd65 	bl	8001d18 <HAL_UART_Transmit_IT>
}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	20000034 	.word	0x20000034

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000260:	f000 fac6 	bl	80007f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000264:	f000 f824 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000268:	f000 f8dc 	bl	8000424 <MX_GPIO_Init>
  MX_DMA_Init();
 800026c:	f000 f8bc 	bl	80003e8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000270:	f000 f880 	bl	8000374 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000);
 8000274:	23fa      	movs	r3, #250	; 0xfa
 8000276:	00db      	lsls	r3, r3, #3
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fb1d 	bl	80008b8 <HAL_Delay>

  /* Send AT Command using Interrupt */
  SendATCommand_IT((char*)txMessage);
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <main+0x48>)
 8000280:	0018      	movs	r0, r3
 8000282:	f7ff ffd5 	bl	8000230 <SendATCommand_IT>

  /* Enable IDLE Line Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <main+0x4c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <main+0x4c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2110      	movs	r1, #16
 8000292:	430a      	orrs	r2, r1
 8000294:	601a      	str	r2, [r3, #0]

  /* Start DMA RX */
  HAL_UART_Receive_DMA(&huart1, rxBuffer, RX_BUFFER_SIZE);
 8000296:	4905      	ldr	r1, [pc, #20]	; (80002ac <main+0x50>)
 8000298:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <main+0x4c>)
 800029a:	2264      	movs	r2, #100	; 0x64
 800029c:	0018      	movs	r0, r3
 800029e:	f001 fe02 	bl	8001ea6 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a2:	e7fe      	b.n	80002a2 <main+0x46>
 80002a4:	20000000 	.word	0x20000000
 80002a8:	20000034 	.word	0x20000034
 80002ac:	20000100 	.word	0x20000100

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b095      	sub	sp, #84	; 0x54
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	2420      	movs	r4, #32
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	0018      	movs	r0, r3
 80002bc:	2330      	movs	r3, #48	; 0x30
 80002be:	001a      	movs	r2, r3
 80002c0:	2100      	movs	r1, #0
 80002c2:	f003 fa75 	bl	80037b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c6:	2310      	movs	r3, #16
 80002c8:	18fb      	adds	r3, r7, r3
 80002ca:	0018      	movs	r0, r3
 80002cc:	2310      	movs	r3, #16
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f003 fa6d 	bl	80037b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d6:	003b      	movs	r3, r7
 80002d8:	0018      	movs	r0, r3
 80002da:	2310      	movs	r3, #16
 80002dc:	001a      	movs	r2, r3
 80002de:	2100      	movs	r1, #0
 80002e0:	f003 fa66 	bl	80037b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e4:	0021      	movs	r1, r4
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2202      	movs	r2, #2
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2201      	movs	r2, #1
 80002f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2210      	movs	r2, #16
 80002f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2202      	movs	r2, #2
 80002fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	22a0      	movs	r2, #160	; 0xa0
 8000308:	0392      	lsls	r2, r2, #14
 800030a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2200      	movs	r2, #0
 8000310:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	187b      	adds	r3, r7, r1
 8000314:	0018      	movs	r0, r3
 8000316:	f000 ff7f 	bl	8001218 <HAL_RCC_OscConfig>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800031e:	f000 f901 	bl	8000524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	2110      	movs	r1, #16
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2207      	movs	r2, #7
 8000328:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2202      	movs	r2, #2
 800032e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2101      	movs	r1, #1
 8000340:	0018      	movs	r0, r3
 8000342:	f001 fa83 	bl	800184c <HAL_RCC_ClockConfig>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800034a:	f000 f8eb 	bl	8000524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800034e:	003b      	movs	r3, r7
 8000350:	2201      	movs	r2, #1
 8000352:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000354:	003b      	movs	r3, r7
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035a:	003b      	movs	r3, r7
 800035c:	0018      	movs	r0, r3
 800035e:	f001 fbb9 	bl	8001ad4 <HAL_RCCEx_PeriphCLKConfig>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000366:	f000 f8dd 	bl	8000524 <Error_Handler>
  }
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b015      	add	sp, #84	; 0x54
 8000370:	bd90      	pop	{r4, r7, pc}
	...

08000374 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_USART1_UART_Init+0x68>)
 800037a:	4a19      	ldr	r2, [pc, #100]	; (80003e0 <MX_USART1_UART_Init+0x6c>)
 800037c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115100;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <MX_USART1_UART_Init+0x68>)
 8000380:	4a18      	ldr	r2, [pc, #96]	; (80003e4 <MX_USART1_UART_Init+0x70>)
 8000382:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_USART1_UART_Init+0x68>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_USART1_UART_Init+0x68>)
 800038c:	2200      	movs	r2, #0
 800038e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_USART1_UART_Init+0x68>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_USART1_UART_Init+0x68>)
 8000398:	220c      	movs	r2, #12
 800039a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_USART1_UART_Init+0x68>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_USART1_UART_Init+0x68>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_USART1_UART_Init+0x68>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <MX_USART1_UART_Init+0x68>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_USART1_UART_Init+0x68>)
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 fc5a 	bl	8001c70 <HAL_UART_Init>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80003c0:	f000 f8b0 	bl	8000524 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2101      	movs	r1, #1
 80003c8:	201b      	movs	r0, #27
 80003ca:	f000 fb45 	bl	8000a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80003ce:	201b      	movs	r0, #27
 80003d0:	f000 fb57 	bl	8000a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 80003d4:	46c0      	nop			; (mov r8, r8)
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	20000034 	.word	0x20000034
 80003e0:	40013800 	.word	0x40013800
 80003e4:	0001c19c 	.word	0x0001c19c

080003e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_DMA_Init+0x38>)
 80003f0:	695a      	ldr	r2, [r3, #20]
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <MX_DMA_Init+0x38>)
 80003f4:	2101      	movs	r1, #1
 80003f6:	430a      	orrs	r2, r1
 80003f8:	615a      	str	r2, [r3, #20]
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_DMA_Init+0x38>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	2201      	movs	r2, #1
 8000400:	4013      	ands	r3, r2
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	2100      	movs	r1, #0
 800040a:	200a      	movs	r0, #10
 800040c:	f000 fb24 	bl	8000a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000410:	200a      	movs	r0, #10
 8000412:	f000 fb36 	bl	8000a82 <HAL_NVIC_EnableIRQ>

}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b002      	add	sp, #8
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	40021000 	.word	0x40021000

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b089      	sub	sp, #36	; 0x24
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	240c      	movs	r4, #12
 800042c:	193b      	adds	r3, r7, r4
 800042e:	0018      	movs	r0, r3
 8000430:	2314      	movs	r3, #20
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f003 f9bb 	bl	80037b0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b38      	ldr	r3, [pc, #224]	; (800051c <MX_GPIO_Init+0xf8>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b37      	ldr	r3, [pc, #220]	; (800051c <MX_GPIO_Init+0xf8>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0309      	lsls	r1, r1, #12
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b34      	ldr	r3, [pc, #208]	; (800051c <MX_GPIO_Init+0xf8>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	031b      	lsls	r3, r3, #12
 8000450:	4013      	ands	r3, r2
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000456:	4b31      	ldr	r3, [pc, #196]	; (800051c <MX_GPIO_Init+0xf8>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b30      	ldr	r3, [pc, #192]	; (800051c <MX_GPIO_Init+0xf8>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	03c9      	lsls	r1, r1, #15
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b2d      	ldr	r3, [pc, #180]	; (800051c <MX_GPIO_Init+0xf8>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	03db      	lsls	r3, r3, #15
 800046c:	4013      	ands	r3, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b2a      	ldr	r3, [pc, #168]	; (800051c <MX_GPIO_Init+0xf8>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b29      	ldr	r3, [pc, #164]	; (800051c <MX_GPIO_Init+0xf8>)
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	0289      	lsls	r1, r1, #10
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b26      	ldr	r3, [pc, #152]	; (800051c <MX_GPIO_Init+0xf8>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	029b      	lsls	r3, r3, #10
 8000488:	4013      	ands	r3, r2
 800048a:	603b      	str	r3, [r7, #0]
 800048c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800048e:	2390      	movs	r3, #144	; 0x90
 8000490:	05db      	lsls	r3, r3, #23
 8000492:	2200      	movs	r2, #0
 8000494:	2120      	movs	r1, #32
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fea0 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2280      	movs	r2, #128	; 0x80
 80004a0:	0192      	lsls	r2, r2, #6
 80004a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2284      	movs	r2, #132	; 0x84
 80004a8:	0392      	lsls	r2, r2, #14
 80004aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	4a1a      	ldr	r2, [pc, #104]	; (8000520 <MX_GPIO_Init+0xfc>)
 80004b6:	0019      	movs	r1, r3
 80004b8:	0010      	movs	r0, r2
 80004ba:	f000 fd1f 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	220c      	movs	r2, #12
 80004c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	2202      	movs	r2, #2
 80004c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2201      	movs	r2, #1
 80004da:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	193a      	adds	r2, r7, r4
 80004de:	2390      	movs	r3, #144	; 0x90
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	0011      	movs	r1, r2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fd09 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004ea:	0021      	movs	r1, r4
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2220      	movs	r2, #32
 80004f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2201      	movs	r2, #1
 80004f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	187a      	adds	r2, r7, r1
 8000506:	2390      	movs	r3, #144	; 0x90
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fcf5 	bl	8000efc <HAL_GPIO_Init>

}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b009      	add	sp, #36	; 0x24
 8000518:	bd90      	pop	{r4, r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	40021000 	.word	0x40021000
 8000520:	48000800 	.word	0x48000800

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
}
 800052a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052c:	e7fe      	b.n	800052c <Error_Handler+0x8>
	...

08000530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <HAL_MspInit+0x44>)
 8000538:	699a      	ldr	r2, [r3, #24]
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <HAL_MspInit+0x44>)
 800053c:	2101      	movs	r1, #1
 800053e:	430a      	orrs	r2, r1
 8000540:	619a      	str	r2, [r3, #24]
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <HAL_MspInit+0x44>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	2201      	movs	r2, #1
 8000548:	4013      	ands	r3, r2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <HAL_MspInit+0x44>)
 8000550:	69da      	ldr	r2, [r3, #28]
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <HAL_MspInit+0x44>)
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	0549      	lsls	r1, r1, #21
 8000558:	430a      	orrs	r2, r1
 800055a:	61da      	str	r2, [r3, #28]
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_MspInit+0x44>)
 800055e:	69da      	ldr	r2, [r3, #28]
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	055b      	lsls	r3, r3, #21
 8000564:	4013      	ands	r3, r2
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40021000 	.word	0x40021000

08000578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b08b      	sub	sp, #44	; 0x2c
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	2414      	movs	r4, #20
 8000582:	193b      	adds	r3, r7, r4
 8000584:	0018      	movs	r0, r3
 8000586:	2314      	movs	r3, #20
 8000588:	001a      	movs	r2, r3
 800058a:	2100      	movs	r1, #0
 800058c:	f003 f910 	bl	80037b0 <memset>
  if(huart->Instance==USART1)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a34      	ldr	r2, [pc, #208]	; (8000668 <HAL_UART_MspInit+0xf0>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d162      	bne.n	8000660 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800059a:	4b34      	ldr	r3, [pc, #208]	; (800066c <HAL_UART_MspInit+0xf4>)
 800059c:	699a      	ldr	r2, [r3, #24]
 800059e:	4b33      	ldr	r3, [pc, #204]	; (800066c <HAL_UART_MspInit+0xf4>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	01c9      	lsls	r1, r1, #7
 80005a4:	430a      	orrs	r2, r1
 80005a6:	619a      	str	r2, [r3, #24]
 80005a8:	4b30      	ldr	r3, [pc, #192]	; (800066c <HAL_UART_MspInit+0xf4>)
 80005aa:	699a      	ldr	r2, [r3, #24]
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	01db      	lsls	r3, r3, #7
 80005b0:	4013      	ands	r3, r2
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b6:	4b2d      	ldr	r3, [pc, #180]	; (800066c <HAL_UART_MspInit+0xf4>)
 80005b8:	695a      	ldr	r2, [r3, #20]
 80005ba:	4b2c      	ldr	r3, [pc, #176]	; (800066c <HAL_UART_MspInit+0xf4>)
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	0289      	lsls	r1, r1, #10
 80005c0:	430a      	orrs	r2, r1
 80005c2:	615a      	str	r2, [r3, #20]
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <HAL_UART_MspInit+0xf4>)
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	029b      	lsls	r3, r3, #10
 80005cc:	4013      	ands	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	22c0      	movs	r2, #192	; 0xc0
 80005d6:	00d2      	lsls	r2, r2, #3
 80005d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	0021      	movs	r1, r4
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2202      	movs	r2, #2
 80005e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2203      	movs	r2, #3
 80005ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2201      	movs	r2, #1
 80005f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	187a      	adds	r2, r7, r1
 80005f6:	2390      	movs	r3, #144	; 0x90
 80005f8:	05db      	lsls	r3, r3, #23
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fc7d 	bl	8000efc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000602:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <HAL_UART_MspInit+0xf8>)
 8000604:	4a1b      	ldr	r2, [pc, #108]	; (8000674 <HAL_UART_MspInit+0xfc>)
 8000606:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <HAL_UART_MspInit+0xf8>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_UART_MspInit+0xf8>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <HAL_UART_MspInit+0xf8>)
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_UART_MspInit+0xf8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <HAL_UART_MspInit+0xf8>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_UART_MspInit+0xf8>)
 8000628:	2220      	movs	r2, #32
 800062a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <HAL_UART_MspInit+0xf8>)
 800062e:	22c0      	movs	r2, #192	; 0xc0
 8000630:	0192      	lsls	r2, r2, #6
 8000632:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <HAL_UART_MspInit+0xf8>)
 8000636:	0018      	movs	r0, r3
 8000638:	f000 fa40 	bl	8000abc <HAL_DMA_Init>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000640:	f7ff ff70 	bl	8000524 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <HAL_UART_MspInit+0xf8>)
 8000648:	675a      	str	r2, [r3, #116]	; 0x74
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <HAL_UART_MspInit+0xf8>)
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2101      	movs	r1, #1
 8000654:	201b      	movs	r0, #27
 8000656:	f000 f9ff 	bl	8000a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800065a:	201b      	movs	r0, #27
 800065c:	f000 fa11 	bl	8000a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b00b      	add	sp, #44	; 0x2c
 8000666:	bd90      	pop	{r4, r7, pc}
 8000668:	40013800 	.word	0x40013800
 800066c:	40021000 	.word	0x40021000
 8000670:	200000bc 	.word	0x200000bc
 8000674:	40020030 	.word	0x40020030

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800067c:	e7fe      	b.n	800067c <NMI_Handler+0x4>

0800067e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <HardFault_Handler+0x4>

08000684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069c:	f000 f8f0 	bl	8000880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <DMA1_Channel2_3_IRQHandler+0x14>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fb2f 	bl	8000d12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	200000bc 	.word	0x200000bc

080006c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
    /* Check if IDLE flag is set (indicating end of message) */
    if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <USART1_IRQHandler+0x60>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	2210      	movs	r2, #16
 80006ce:	4013      	ands	r3, r2
 80006d0:	2b10      	cmp	r3, #16
 80006d2:	d11c      	bne.n	800070e <USART1_IRQHandler+0x4e>
    {
        /* Clear IDLE Flag */
        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <USART1_IRQHandler+0x60>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2210      	movs	r2, #16
 80006da:	621a      	str	r2, [r3, #32]

        /* Get Number of Bytes Received */
        uint16_t receivedBytes = RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <USART1_IRQHandler+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	2164      	movs	r1, #100	; 0x64
 80006e8:	1a8a      	subs	r2, r1, r2
 80006ea:	801a      	strh	r2, [r3, #0]

        /* Stop DMA Reception Temporarily */
        HAL_UART_DMAStop(&huart1);
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <USART1_IRQHandler+0x60>)
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 fc30 	bl	8001f54 <HAL_UART_DMAStop>

        /* Process Data: Echo the received message */
        HAL_UART_Transmit_IT(&huart1, rxBuffer, receivedBytes);
 80006f4:	1dbb      	adds	r3, r7, #6
 80006f6:	881a      	ldrh	r2, [r3, #0]
 80006f8:	490b      	ldr	r1, [pc, #44]	; (8000728 <USART1_IRQHandler+0x68>)
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <USART1_IRQHandler+0x60>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fb0b 	bl	8001d18 <HAL_UART_Transmit_IT>

        /* Restart DMA Reception */
        HAL_UART_Receive_DMA(&huart1, rxBuffer, RX_BUFFER_SIZE);
 8000702:	4909      	ldr	r1, [pc, #36]	; (8000728 <USART1_IRQHandler+0x68>)
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <USART1_IRQHandler+0x60>)
 8000706:	2264      	movs	r2, #100	; 0x64
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fbcc 	bl	8001ea6 <HAL_UART_Receive_DMA>
    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <USART1_IRQHandler+0x60>)
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fcaf 	bl	8002074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	20000034 	.word	0x20000034
 8000724:	200000bc 	.word	0x200000bc
 8000728:	20000100 	.word	0x20000100

0800072c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {
        /* TX Completed, nothing to do here for now */
    }
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b002      	add	sp, #8
 800073a:	bd80      	pop	{r7, pc}

0800073c <HAL_UART_RxCpltCallback>:

/* Callback when UART RX is complete */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <HAL_UART_RxCpltCallback+0x44>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d114      	bne.n	8000778 <HAL_UART_RxCpltCallback+0x3c>
    {
        /* Process the received data byte by byte */
        if (rxIndex < RX_BUFFER_SIZE - 1)
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_UART_RxCpltCallback+0x48>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	2b62      	cmp	r3, #98	; 0x62
 8000754:	d80a      	bhi.n	800076c <HAL_UART_RxCpltCallback+0x30>
        {
            rxBuffer[rxIndex++] = rxBuffer[0];  // Store received byte
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <HAL_UART_RxCpltCallback+0x48>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	b291      	uxth	r1, r2
 800075e:	4a09      	ldr	r2, [pc, #36]	; (8000784 <HAL_UART_RxCpltCallback+0x48>)
 8000760:	8011      	strh	r1, [r2, #0]
 8000762:	001a      	movs	r2, r3
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_UART_RxCpltCallback+0x4c>)
 8000766:	7819      	ldrb	r1, [r3, #0]
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <HAL_UART_RxCpltCallback+0x4c>)
 800076a:	5499      	strb	r1, [r3, r2]
        }

        /* Restart reception for next byte */
        HAL_UART_Receive_IT(&huart1, rxBuffer, 1);
 800076c:	4906      	ldr	r1, [pc, #24]	; (8000788 <HAL_UART_RxCpltCallback+0x4c>)
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <HAL_UART_RxCpltCallback+0x50>)
 8000770:	2201      	movs	r2, #1
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fb40 	bl	8001df8 <HAL_UART_Receive_IT>
    }
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b002      	add	sp, #8
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40013800 	.word	0x40013800
 8000784:	20000164 	.word	0x20000164
 8000788:	20000100 	.word	0x20000100
 800078c:	20000034 	.word	0x20000034

08000790 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a0:	f7ff fff6 	bl	8000790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a6:	490d      	ldr	r1, [pc, #52]	; (80007dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <LoopForever+0xe>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007bc:	4c0a      	ldr	r4, [pc, #40]	; (80007e8 <LoopForever+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ca:	f002 ffcd 	bl	8003768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ce:	f7ff fd45 	bl	800025c <main>

080007d2 <LoopForever>:

LoopForever:
    b LoopForever
 80007d2:	e7fe      	b.n	80007d2 <LoopForever>
  ldr   r0, =_estack
 80007d4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80007e0:	08003818 	.word	0x08003818
  ldr r2, =_sbss
 80007e4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80007e8:	2000016c 	.word	0x2000016c

080007ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC1_IRQHandler>
	...

080007f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <HAL_Init+0x24>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_Init+0x24>)
 80007fa:	2110      	movs	r1, #16
 80007fc:	430a      	orrs	r2, r1
 80007fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000800:	2000      	movs	r0, #0
 8000802:	f000 f809 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000806:	f7ff fe93 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080a:	2300      	movs	r3, #0
}
 800080c:	0018      	movs	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	40022000 	.word	0x40022000

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_InitTick+0x5c>)
 8000822:	681c      	ldr	r4, [r3, #0]
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_InitTick+0x60>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	0019      	movs	r1, r3
 800082a:	23fa      	movs	r3, #250	; 0xfa
 800082c:	0098      	lsls	r0, r3, #2
 800082e:	f7ff fc73 	bl	8000118 <__udivsi3>
 8000832:	0003      	movs	r3, r0
 8000834:	0019      	movs	r1, r3
 8000836:	0020      	movs	r0, r4
 8000838:	f7ff fc6e 	bl	8000118 <__udivsi3>
 800083c:	0003      	movs	r3, r0
 800083e:	0018      	movs	r0, r3
 8000840:	f000 f92f 	bl	8000aa2 <HAL_SYSTICK_Config>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	e00f      	b.n	800086c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b03      	cmp	r3, #3
 8000850:	d80b      	bhi.n	800086a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	2301      	movs	r3, #1
 8000856:	425b      	negs	r3, r3
 8000858:	2200      	movs	r2, #0
 800085a:	0018      	movs	r0, r3
 800085c:	f000 f8fc 	bl	8000a58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_InitTick+0x64>)
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	e000      	b.n	800086c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b003      	add	sp, #12
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	2000000c 	.word	0x2000000c
 8000878:	20000014 	.word	0x20000014
 800087c:	20000010 	.word	0x20000010

08000880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_IncTick+0x1c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	001a      	movs	r2, r3
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x20>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	18d2      	adds	r2, r2, r3
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <HAL_IncTick+0x20>)
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	20000014 	.word	0x20000014
 80008a0:	20000168 	.word	0x20000168

080008a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;
 80008a8:	4b02      	ldr	r3, [pc, #8]	; (80008b4 <HAL_GetTick+0x10>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	20000168 	.word	0x20000168

080008b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c0:	f7ff fff0 	bl	80008a4 <HAL_GetTick>
 80008c4:	0003      	movs	r3, r0
 80008c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	d005      	beq.n	80008de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <HAL_Delay+0x44>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	001a      	movs	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	189b      	adds	r3, r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	f7ff ffe0 	bl	80008a4 <HAL_GetTick>
 80008e4:	0002      	movs	r2, r0
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d8f7      	bhi.n	80008e0 <HAL_Delay+0x28>
  {
  }
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b004      	add	sp, #16
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	20000014 	.word	0x20000014

08000900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	0002      	movs	r2, r0
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b7f      	cmp	r3, #127	; 0x7f
 8000912:	d809      	bhi.n	8000928 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	001a      	movs	r2, r3
 800091a:	231f      	movs	r3, #31
 800091c:	401a      	ands	r2, r3
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_EnableIRQ+0x30>)
 8000920:	2101      	movs	r1, #1
 8000922:	4091      	lsls	r1, r2
 8000924:	000a      	movs	r2, r1
 8000926:	601a      	str	r2, [r3, #0]
  }
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	0002      	movs	r2, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b7f      	cmp	r3, #127	; 0x7f
 8000948:	d828      	bhi.n	800099c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800094a:	4a2f      	ldr	r2, [pc, #188]	; (8000a08 <__NVIC_SetPriority+0xd4>)
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b25b      	sxtb	r3, r3
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	33c0      	adds	r3, #192	; 0xc0
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	589b      	ldr	r3, [r3, r2]
 800095a:	1dfa      	adds	r2, r7, #7
 800095c:	7812      	ldrb	r2, [r2, #0]
 800095e:	0011      	movs	r1, r2
 8000960:	2203      	movs	r2, #3
 8000962:	400a      	ands	r2, r1
 8000964:	00d2      	lsls	r2, r2, #3
 8000966:	21ff      	movs	r1, #255	; 0xff
 8000968:	4091      	lsls	r1, r2
 800096a:	000a      	movs	r2, r1
 800096c:	43d2      	mvns	r2, r2
 800096e:	401a      	ands	r2, r3
 8000970:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	019b      	lsls	r3, r3, #6
 8000976:	22ff      	movs	r2, #255	; 0xff
 8000978:	401a      	ands	r2, r3
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	0018      	movs	r0, r3
 8000980:	2303      	movs	r3, #3
 8000982:	4003      	ands	r3, r0
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000988:	481f      	ldr	r0, [pc, #124]	; (8000a08 <__NVIC_SetPriority+0xd4>)
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b25b      	sxtb	r3, r3
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	430a      	orrs	r2, r1
 8000994:	33c0      	adds	r3, #192	; 0xc0
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800099a:	e031      	b.n	8000a00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <__NVIC_SetPriority+0xd8>)
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	0019      	movs	r1, r3
 80009a4:	230f      	movs	r3, #15
 80009a6:	400b      	ands	r3, r1
 80009a8:	3b08      	subs	r3, #8
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	3306      	adds	r3, #6
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	18d3      	adds	r3, r2, r3
 80009b2:	3304      	adds	r3, #4
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1dfa      	adds	r2, r7, #7
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	0011      	movs	r1, r2
 80009bc:	2203      	movs	r2, #3
 80009be:	400a      	ands	r2, r1
 80009c0:	00d2      	lsls	r2, r2, #3
 80009c2:	21ff      	movs	r1, #255	; 0xff
 80009c4:	4091      	lsls	r1, r2
 80009c6:	000a      	movs	r2, r1
 80009c8:	43d2      	mvns	r2, r2
 80009ca:	401a      	ands	r2, r3
 80009cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	019b      	lsls	r3, r3, #6
 80009d2:	22ff      	movs	r2, #255	; 0xff
 80009d4:	401a      	ands	r2, r3
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	0018      	movs	r0, r3
 80009dc:	2303      	movs	r3, #3
 80009de:	4003      	ands	r3, r0
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <__NVIC_SetPriority+0xd8>)
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	001c      	movs	r4, r3
 80009ec:	230f      	movs	r3, #15
 80009ee:	4023      	ands	r3, r4
 80009f0:	3b08      	subs	r3, #8
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	430a      	orrs	r2, r1
 80009f6:	3306      	adds	r3, #6
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	18c3      	adds	r3, r0, r3
 80009fc:	3304      	adds	r3, #4
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b003      	add	sp, #12
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	1e5a      	subs	r2, r3, #1
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	045b      	lsls	r3, r3, #17
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d301      	bcc.n	8000a28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a24:	2301      	movs	r3, #1
 8000a26:	e010      	b.n	8000a4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <SysTick_Config+0x44>)
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	3a01      	subs	r2, #1
 8000a2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a30:	2301      	movs	r3, #1
 8000a32:	425b      	negs	r3, r3
 8000a34:	2103      	movs	r1, #3
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff ff7c 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <SysTick_Config+0x44>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <SysTick_Config+0x44>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	e000e010 	.word	0xe000e010

08000a58 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	210f      	movs	r1, #15
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	1c02      	adds	r2, r0, #0
 8000a68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff ff5d 	bl	8000934 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b004      	add	sp, #16
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	0002      	movs	r2, r0
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ff33 	bl	8000900 <__NVIC_EnableIRQ>
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff ffaf 	bl	8000a10 <SysTick_Config>
 8000ab2:	0003      	movs	r3, r0
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e036      	b.n	8000b40 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2221      	movs	r2, #33	; 0x21
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <HAL_DMA_Init+0x8c>)
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 f9ce 	bl	8000ec4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2221      	movs	r2, #33	; 0x21
 8000b32:	2101      	movs	r1, #1
 8000b34:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2220      	movs	r2, #32
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	0018      	movs	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b004      	add	sp, #16
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	ffffc00f 	.word	0xffffc00f

08000b4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b5a:	2317      	movs	r3, #23
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2220      	movs	r2, #32
 8000b66:	5c9b      	ldrb	r3, [r3, r2]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d101      	bne.n	8000b70 <HAL_DMA_Start_IT+0x24>
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	e04f      	b.n	8000c10 <HAL_DMA_Start_IT+0xc4>
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2220      	movs	r2, #32
 8000b74:	2101      	movs	r1, #1
 8000b76:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2221      	movs	r2, #33	; 0x21
 8000b7c:	5c9b      	ldrb	r3, [r3, r2]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d13a      	bne.n	8000bfa <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2221      	movs	r2, #33	; 0x21
 8000b88:	2102      	movs	r1, #2
 8000b8a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	438a      	bics	r2, r1
 8000ba0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	68b9      	ldr	r1, [r7, #8]
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 f95e 	bl	8000e6a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d008      	beq.n	8000bc8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	210e      	movs	r1, #14
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e00f      	b.n	8000be8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	210a      	movs	r1, #10
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2104      	movs	r1, #4
 8000be4:	438a      	bics	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	e007      	b.n	8000c0a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	2100      	movs	r1, #0
 8000c00:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c02:	2317      	movs	r3, #23
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	2202      	movs	r2, #2
 8000c08:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000c0a:	2317      	movs	r3, #23
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	781b      	ldrb	r3, [r3, #0]
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b006      	add	sp, #24
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2221      	movs	r2, #33	; 0x21
 8000c24:	5c9b      	ldrb	r3, [r3, r2]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d008      	beq.n	8000c3e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2204      	movs	r2, #4
 8000c30:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2220      	movs	r2, #32
 8000c36:	2100      	movs	r1, #0
 8000c38:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e020      	b.n	8000c80 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	210e      	movs	r1, #14
 8000c4a:	438a      	bics	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2101      	movs	r1, #1
 8000c5a:	438a      	bics	r2, r1
 8000c5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c66:	2101      	movs	r1, #1
 8000c68:	4091      	lsls	r1, r2
 8000c6a:	000a      	movs	r2, r1
 8000c6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2221      	movs	r2, #33	; 0x21
 8000c72:	2101      	movs	r1, #1
 8000c74:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2220      	movs	r2, #32
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c90:	210f      	movs	r1, #15
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2221      	movs	r2, #33	; 0x21
 8000c9c:	5c9b      	ldrb	r3, [r3, r2]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d006      	beq.n	8000cb2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	e028      	b.n	8000d04 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	210e      	movs	r1, #14
 8000cbe:	438a      	bics	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	438a      	bics	r2, r1
 8000cd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	000a      	movs	r2, r1
 8000ce0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2221      	movs	r2, #33	; 0x21
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2220      	movs	r2, #32
 8000cee:	2100      	movs	r1, #0
 8000cf0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d004      	beq.n	8000d04 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	0010      	movs	r0, r2
 8000d02:	4798      	blx	r3
    }
  }
  return status;
 8000d04:	230f      	movs	r3, #15
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	781b      	ldrb	r3, [r3, #0]
}
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	2204      	movs	r2, #4
 8000d30:	409a      	lsls	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	4013      	ands	r3, r2
 8000d38:	d024      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x72>
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d020      	beq.n	8000d84 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2220      	movs	r2, #32
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d107      	bne.n	8000d5e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2104      	movs	r1, #4
 8000d5a:	438a      	bics	r2, r1
 8000d5c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d66:	2104      	movs	r1, #4
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d100      	bne.n	8000d78 <HAL_DMA_IRQHandler+0x66>
 8000d76:	e06a      	b.n	8000e4e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	0010      	movs	r0, r2
 8000d80:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000d82:	e064      	b.n	8000e4e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	2202      	movs	r2, #2
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	4013      	ands	r3, r2
 8000d92:	d02b      	beq.n	8000dec <HAL_DMA_IRQHandler+0xda>
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	2202      	movs	r2, #2
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d027      	beq.n	8000dec <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2220      	movs	r2, #32
 8000da4:	4013      	ands	r3, r2
 8000da6:	d10b      	bne.n	8000dc0 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	210a      	movs	r1, #10
 8000db4:	438a      	bics	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2221      	movs	r2, #33	; 0x21
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc8:	2102      	movs	r1, #2
 8000dca:	4091      	lsls	r1, r2
 8000dcc:	000a      	movs	r2, r1
 8000dce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d036      	beq.n	8000e4e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	0010      	movs	r0, r2
 8000de8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000dea:	e030      	b.n	8000e4e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	2208      	movs	r2, #8
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	d028      	beq.n	8000e4e <HAL_DMA_IRQHandler+0x13c>
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	2208      	movs	r2, #8
 8000e00:	4013      	ands	r3, r2
 8000e02:	d024      	beq.n	8000e4e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	210e      	movs	r1, #14
 8000e10:	438a      	bics	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4091      	lsls	r1, r2
 8000e20:	000a      	movs	r2, r1
 8000e22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2221      	movs	r2, #33	; 0x21
 8000e2e:	2101      	movs	r1, #1
 8000e30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2220      	movs	r2, #32
 8000e36:	2100      	movs	r1, #0
 8000e38:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d005      	beq.n	8000e4e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	0010      	movs	r0, r2
 8000e4a:	4798      	blx	r3
    }
  }
}
 8000e4c:	e7ff      	b.n	8000e4e <HAL_DMA_IRQHandler+0x13c>
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b004      	add	sp, #16
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000e62:	0018      	movs	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e80:	2101      	movs	r1, #1
 8000e82:	4091      	lsls	r1, r2
 8000e84:	000a      	movs	r2, r1
 8000e86:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b10      	cmp	r3, #16
 8000e96:	d108      	bne.n	8000eaa <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ea8:	e007      	b.n	8000eba <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	60da      	str	r2, [r3, #12]
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <DMA_CalcBaseAndBitshift+0x30>)
 8000ed2:	4694      	mov	ip, r2
 8000ed4:	4463      	add	r3, ip
 8000ed6:	2114      	movs	r1, #20
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff f91d 	bl	8000118 <__udivsi3>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	009a      	lsls	r2, r3, #2
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a03      	ldr	r2, [pc, #12]	; (8000ef8 <DMA_CalcBaseAndBitshift+0x34>)
 8000eea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	bffdfff8 	.word	0xbffdfff8
 8000ef8:	40020000 	.word	0x40020000

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	e14f      	b.n	80011ac <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <HAL_GPIO_Init+0x28>
 8000f22:	e140      	b.n	80011a6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d005      	beq.n	8000f3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2203      	movs	r2, #3
 8000f36:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d130      	bne.n	8000f9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	0013      	movs	r3, r2
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f72:	2201      	movs	r2, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	2201      	movs	r2, #1
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d017      	beq.n	8000fda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d123      	bne.n	800102e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	0092      	lsls	r2, r2, #2
 8000ff0:	58d3      	ldr	r3, [r2, r3]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2107      	movs	r1, #7
 8001012:	400b      	ands	r3, r1
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	6939      	ldr	r1, [r7, #16]
 800102c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	409a      	lsls	r2, r3
 800103c:	0013      	movs	r3, r2
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2203      	movs	r2, #3
 800104c:	401a      	ands	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	23c0      	movs	r3, #192	; 0xc0
 8001068:	029b      	lsls	r3, r3, #10
 800106a:	4013      	ands	r3, r2
 800106c:	d100      	bne.n	8001070 <HAL_GPIO_Init+0x174>
 800106e:	e09a      	b.n	80011a6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001070:	4b54      	ldr	r3, [pc, #336]	; (80011c4 <HAL_GPIO_Init+0x2c8>)
 8001072:	699a      	ldr	r2, [r3, #24]
 8001074:	4b53      	ldr	r3, [pc, #332]	; (80011c4 <HAL_GPIO_Init+0x2c8>)
 8001076:	2101      	movs	r1, #1
 8001078:	430a      	orrs	r2, r1
 800107a:	619a      	str	r2, [r3, #24]
 800107c:	4b51      	ldr	r3, [pc, #324]	; (80011c4 <HAL_GPIO_Init+0x2c8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001088:	4a4f      	ldr	r2, [pc, #316]	; (80011c8 <HAL_GPIO_Init+0x2cc>)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	589b      	ldr	r3, [r3, r2]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2203      	movs	r2, #3
 800109a:	4013      	ands	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	409a      	lsls	r2, r3
 80010a2:	0013      	movs	r3, r2
 80010a4:	43da      	mvns	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	2390      	movs	r3, #144	; 0x90
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d013      	beq.n	80010de <HAL_GPIO_Init+0x1e2>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a44      	ldr	r2, [pc, #272]	; (80011cc <HAL_GPIO_Init+0x2d0>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00d      	beq.n	80010da <HAL_GPIO_Init+0x1de>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a43      	ldr	r2, [pc, #268]	; (80011d0 <HAL_GPIO_Init+0x2d4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x1da>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a42      	ldr	r2, [pc, #264]	; (80011d4 <HAL_GPIO_Init+0x2d8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_GPIO_Init+0x1d6>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x1e4>
 80010d2:	2305      	movs	r3, #5
 80010d4:	e004      	b.n	80010e0 <HAL_GPIO_Init+0x1e4>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_Init+0x1e4>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x1e4>
 80010de:	2300      	movs	r3, #0
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	2103      	movs	r1, #3
 80010e4:	400a      	ands	r2, r1
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	4093      	lsls	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f0:	4935      	ldr	r1, [pc, #212]	; (80011c8 <HAL_GPIO_Init+0x2cc>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_GPIO_Init+0x2dc>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	035b      	lsls	r3, r3, #13
 8001116:	4013      	ands	r3, r2
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_Init+0x2dc>)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_GPIO_Init+0x2dc>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43da      	mvns	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	039b      	lsls	r3, r3, #14
 8001140:	4013      	ands	r3, r2
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_GPIO_Init+0x2dc>)
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <HAL_GPIO_Init+0x2dc>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43da      	mvns	r2, r3
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	029b      	lsls	r3, r3, #10
 800116a:	4013      	ands	r3, r2
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_GPIO_Init+0x2dc>)
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_GPIO_Init+0x2dc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	43da      	mvns	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	025b      	lsls	r3, r3, #9
 8001194:	4013      	ands	r3, r2
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_GPIO_Init+0x2dc>)
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	40da      	lsrs	r2, r3
 80011b4:	1e13      	subs	r3, r2, #0
 80011b6:	d000      	beq.n	80011ba <HAL_GPIO_Init+0x2be>
 80011b8:	e6a8      	b.n	8000f0c <HAL_GPIO_Init+0x10>
  } 
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b006      	add	sp, #24
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010000 	.word	0x40010000
 80011cc:	48000400 	.word	0x48000400
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000c00 	.word	0x48000c00
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	0008      	movs	r0, r1
 80011e6:	0011      	movs	r1, r2
 80011e8:	1cbb      	adds	r3, r7, #2
 80011ea:	1c02      	adds	r2, r0, #0
 80011ec:	801a      	strh	r2, [r3, #0]
 80011ee:	1c7b      	adds	r3, r7, #1
 80011f0:	1c0a      	adds	r2, r1, #0
 80011f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f4:	1c7b      	adds	r3, r7, #1
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fc:	1cbb      	adds	r3, r7, #2
 80011fe:	881a      	ldrh	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001206:	1cbb      	adds	r3, r7, #2
 8001208:	881a      	ldrh	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e301      	b.n	800182e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	4013      	ands	r3, r2
 8001232:	d100      	bne.n	8001236 <HAL_RCC_OscConfig+0x1e>
 8001234:	e08d      	b.n	8001352 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001236:	4bc3      	ldr	r3, [pc, #780]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	220c      	movs	r2, #12
 800123c:	4013      	ands	r3, r2
 800123e:	2b04      	cmp	r3, #4
 8001240:	d00e      	beq.n	8001260 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001242:	4bc0      	ldr	r3, [pc, #768]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	220c      	movs	r2, #12
 8001248:	4013      	ands	r3, r2
 800124a:	2b08      	cmp	r3, #8
 800124c:	d116      	bne.n	800127c <HAL_RCC_OscConfig+0x64>
 800124e:	4bbd      	ldr	r3, [pc, #756]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	025b      	lsls	r3, r3, #9
 8001256:	401a      	ands	r2, r3
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	025b      	lsls	r3, r3, #9
 800125c:	429a      	cmp	r2, r3
 800125e:	d10d      	bne.n	800127c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	4bb8      	ldr	r3, [pc, #736]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	029b      	lsls	r3, r3, #10
 8001268:	4013      	ands	r3, r2
 800126a:	d100      	bne.n	800126e <HAL_RCC_OscConfig+0x56>
 800126c:	e070      	b.n	8001350 <HAL_RCC_OscConfig+0x138>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d000      	beq.n	8001278 <HAL_RCC_OscConfig+0x60>
 8001276:	e06b      	b.n	8001350 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e2d8      	b.n	800182e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d107      	bne.n	8001294 <HAL_RCC_OscConfig+0x7c>
 8001284:	4baf      	ldr	r3, [pc, #700]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4bae      	ldr	r3, [pc, #696]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	0249      	lsls	r1, r1, #9
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e02f      	b.n	80012f4 <HAL_RCC_OscConfig+0xdc>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10c      	bne.n	80012b6 <HAL_RCC_OscConfig+0x9e>
 800129c:	4ba9      	ldr	r3, [pc, #676]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4ba8      	ldr	r3, [pc, #672]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80012a2:	49a9      	ldr	r1, [pc, #676]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 80012a4:	400a      	ands	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	4ba6      	ldr	r3, [pc, #664]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4ba5      	ldr	r3, [pc, #660]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80012ae:	49a7      	ldr	r1, [pc, #668]	; (800154c <HAL_RCC_OscConfig+0x334>)
 80012b0:	400a      	ands	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e01e      	b.n	80012f4 <HAL_RCC_OscConfig+0xdc>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	d10e      	bne.n	80012dc <HAL_RCC_OscConfig+0xc4>
 80012be:	4ba1      	ldr	r3, [pc, #644]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4ba0      	ldr	r3, [pc, #640]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	02c9      	lsls	r1, r1, #11
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	4b9d      	ldr	r3, [pc, #628]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b9c      	ldr	r3, [pc, #624]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	0249      	lsls	r1, r1, #9
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0xdc>
 80012dc:	4b99      	ldr	r3, [pc, #612]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b98      	ldr	r3, [pc, #608]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80012e2:	4999      	ldr	r1, [pc, #612]	; (8001548 <HAL_RCC_OscConfig+0x330>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	4b96      	ldr	r3, [pc, #600]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b95      	ldr	r3, [pc, #596]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80012ee:	4997      	ldr	r1, [pc, #604]	; (800154c <HAL_RCC_OscConfig+0x334>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d014      	beq.n	8001326 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fad2 	bl	80008a4 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001306:	f7ff facd 	bl	80008a4 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b64      	cmp	r3, #100	; 0x64
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e28a      	b.n	800182e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001318:	4b8a      	ldr	r3, [pc, #552]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	4013      	ands	r3, r2
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0xee>
 8001324:	e015      	b.n	8001352 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff fabd 	bl	80008a4 <HAL_GetTick>
 800132a:	0003      	movs	r3, r0
 800132c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fab8 	bl	80008a4 <HAL_GetTick>
 8001334:	0002      	movs	r2, r0
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	; 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e275      	b.n	800182e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	4b80      	ldr	r3, [pc, #512]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	029b      	lsls	r3, r3, #10
 800134a:	4013      	ands	r3, r2
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0x118>
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2202      	movs	r2, #2
 8001358:	4013      	ands	r3, r2
 800135a:	d100      	bne.n	800135e <HAL_RCC_OscConfig+0x146>
 800135c:	e069      	b.n	8001432 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800135e:	4b79      	ldr	r3, [pc, #484]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	220c      	movs	r2, #12
 8001364:	4013      	ands	r3, r2
 8001366:	d00b      	beq.n	8001380 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001368:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	220c      	movs	r2, #12
 800136e:	4013      	ands	r3, r2
 8001370:	2b08      	cmp	r3, #8
 8001372:	d11c      	bne.n	80013ae <HAL_RCC_OscConfig+0x196>
 8001374:	4b73      	ldr	r3, [pc, #460]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	025b      	lsls	r3, r3, #9
 800137c:	4013      	ands	r3, r2
 800137e:	d116      	bne.n	80013ae <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001380:	4b70      	ldr	r3, [pc, #448]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2202      	movs	r2, #2
 8001386:	4013      	ands	r3, r2
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x17e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e24b      	b.n	800182e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b6b      	ldr	r3, [pc, #428]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	22f8      	movs	r2, #248	; 0xf8
 800139c:	4393      	bics	r3, r2
 800139e:	0019      	movs	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	00da      	lsls	r2, r3, #3
 80013a6:	4b67      	ldr	r3, [pc, #412]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ac:	e041      	b.n	8001432 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d024      	beq.n	8001400 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b6:	4b63      	ldr	r3, [pc, #396]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b62      	ldr	r3, [pc, #392]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80013bc:	2101      	movs	r1, #1
 80013be:	430a      	orrs	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff fa6f 	bl	80008a4 <HAL_GetTick>
 80013c6:	0003      	movs	r3, r0
 80013c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013cc:	f7ff fa6a 	bl	80008a4 <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e227      	b.n	800182e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013de:	4b59      	ldr	r3, [pc, #356]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0f1      	beq.n	80013cc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b56      	ldr	r3, [pc, #344]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	22f8      	movs	r2, #248	; 0xf8
 80013ee:	4393      	bics	r3, r2
 80013f0:	0019      	movs	r1, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00da      	lsls	r2, r3, #3
 80013f8:	4b52      	ldr	r3, [pc, #328]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	e018      	b.n	8001432 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001400:	4b50      	ldr	r3, [pc, #320]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001406:	2101      	movs	r1, #1
 8001408:	438a      	bics	r2, r1
 800140a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fa4a 	bl	80008a4 <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fa45 	bl	80008a4 <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e202      	b.n	800182e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001428:	4b46      	ldr	r3, [pc, #280]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2202      	movs	r2, #2
 800142e:	4013      	ands	r3, r2
 8001430:	d1f1      	bne.n	8001416 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2208      	movs	r2, #8
 8001438:	4013      	ands	r3, r2
 800143a:	d036      	beq.n	80014aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d019      	beq.n	8001478 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001444:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001448:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 800144a:	2101      	movs	r1, #1
 800144c:	430a      	orrs	r2, r1
 800144e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001450:	f7ff fa28 	bl	80008a4 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145a:	f7ff fa23 	bl	80008a4 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e1e0      	b.n	800182e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	2202      	movs	r2, #2
 8001472:	4013      	ands	r3, r2
 8001474:	d0f1      	beq.n	800145a <HAL_RCC_OscConfig+0x242>
 8001476:	e018      	b.n	80014aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001478:	4b32      	ldr	r3, [pc, #200]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 800147a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 800147e:	2101      	movs	r1, #1
 8001480:	438a      	bics	r2, r1
 8001482:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001484:	f7ff fa0e 	bl	80008a4 <HAL_GetTick>
 8001488:	0003      	movs	r3, r0
 800148a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148e:	f7ff fa09 	bl	80008a4 <HAL_GetTick>
 8001492:	0002      	movs	r2, r0
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e1c6      	b.n	800182e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	2202      	movs	r2, #2
 80014a6:	4013      	ands	r3, r2
 80014a8:	d1f1      	bne.n	800148e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2204      	movs	r2, #4
 80014b0:	4013      	ands	r3, r2
 80014b2:	d100      	bne.n	80014b6 <HAL_RCC_OscConfig+0x29e>
 80014b4:	e0b4      	b.n	8001620 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b6:	201f      	movs	r0, #31
 80014b8:	183b      	adds	r3, r7, r0
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80014c0:	69da      	ldr	r2, [r3, #28]
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	055b      	lsls	r3, r3, #21
 80014c6:	4013      	ands	r3, r2
 80014c8:	d110      	bne.n	80014ec <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	69da      	ldr	r2, [r3, #28]
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	0549      	lsls	r1, r1, #21
 80014d4:	430a      	orrs	r2, r1
 80014d6:	61da      	str	r2, [r3, #28]
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 80014da:	69da      	ldr	r2, [r3, #28]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	055b      	lsls	r3, r3, #21
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014e6:	183b      	adds	r3, r7, r0
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_RCC_OscConfig+0x338>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4013      	ands	r3, r2
 80014f6:	d11a      	bne.n	800152e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_RCC_OscConfig+0x338>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_RCC_OscConfig+0x338>)
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	0049      	lsls	r1, r1, #1
 8001502:	430a      	orrs	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001506:	f7ff f9cd 	bl	80008a4 <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001510:	f7ff f9c8 	bl	80008a4 <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e185      	b.n	800182e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_OscConfig+0x338>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4013      	ands	r3, r2
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d10e      	bne.n	8001554 <HAL_RCC_OscConfig+0x33c>
 8001536:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 8001538:	6a1a      	ldr	r2, [r3, #32]
 800153a:	4b02      	ldr	r3, [pc, #8]	; (8001544 <HAL_RCC_OscConfig+0x32c>)
 800153c:	2101      	movs	r1, #1
 800153e:	430a      	orrs	r2, r1
 8001540:	621a      	str	r2, [r3, #32]
 8001542:	e035      	b.n	80015b0 <HAL_RCC_OscConfig+0x398>
 8001544:	40021000 	.word	0x40021000
 8001548:	fffeffff 	.word	0xfffeffff
 800154c:	fffbffff 	.word	0xfffbffff
 8001550:	40007000 	.word	0x40007000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10c      	bne.n	8001576 <HAL_RCC_OscConfig+0x35e>
 800155c:	4bb6      	ldr	r3, [pc, #728]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	4bb5      	ldr	r3, [pc, #724]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001562:	2101      	movs	r1, #1
 8001564:	438a      	bics	r2, r1
 8001566:	621a      	str	r2, [r3, #32]
 8001568:	4bb3      	ldr	r3, [pc, #716]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 800156a:	6a1a      	ldr	r2, [r3, #32]
 800156c:	4bb2      	ldr	r3, [pc, #712]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 800156e:	2104      	movs	r1, #4
 8001570:	438a      	bics	r2, r1
 8001572:	621a      	str	r2, [r3, #32]
 8001574:	e01c      	b.n	80015b0 <HAL_RCC_OscConfig+0x398>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b05      	cmp	r3, #5
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x380>
 800157e:	4bae      	ldr	r3, [pc, #696]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001580:	6a1a      	ldr	r2, [r3, #32]
 8001582:	4bad      	ldr	r3, [pc, #692]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001584:	2104      	movs	r1, #4
 8001586:	430a      	orrs	r2, r1
 8001588:	621a      	str	r2, [r3, #32]
 800158a:	4bab      	ldr	r3, [pc, #684]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 800158c:	6a1a      	ldr	r2, [r3, #32]
 800158e:	4baa      	ldr	r3, [pc, #680]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001590:	2101      	movs	r1, #1
 8001592:	430a      	orrs	r2, r1
 8001594:	621a      	str	r2, [r3, #32]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0x398>
 8001598:	4ba7      	ldr	r3, [pc, #668]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 800159a:	6a1a      	ldr	r2, [r3, #32]
 800159c:	4ba6      	ldr	r3, [pc, #664]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 800159e:	2101      	movs	r1, #1
 80015a0:	438a      	bics	r2, r1
 80015a2:	621a      	str	r2, [r3, #32]
 80015a4:	4ba4      	ldr	r3, [pc, #656]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	4ba3      	ldr	r3, [pc, #652]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80015aa:	2104      	movs	r1, #4
 80015ac:	438a      	bics	r2, r1
 80015ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d014      	beq.n	80015e2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b8:	f7ff f974 	bl	80008a4 <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c0:	e009      	b.n	80015d6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff f96f 	bl	80008a4 <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	4a9b      	ldr	r2, [pc, #620]	; (800183c <HAL_RCC_OscConfig+0x624>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e12b      	b.n	800182e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d6:	4b98      	ldr	r3, [pc, #608]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	2202      	movs	r2, #2
 80015dc:	4013      	ands	r3, r2
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0x3aa>
 80015e0:	e013      	b.n	800160a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff f95f 	bl	80008a4 <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ea:	e009      	b.n	8001600 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff f95a 	bl	80008a4 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	4a91      	ldr	r2, [pc, #580]	; (800183c <HAL_RCC_OscConfig+0x624>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e116      	b.n	800182e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001600:	4b8d      	ldr	r3, [pc, #564]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800160a:	231f      	movs	r3, #31
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d105      	bne.n	8001620 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001614:	4b88      	ldr	r3, [pc, #544]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001616:	69da      	ldr	r2, [r3, #28]
 8001618:	4b87      	ldr	r3, [pc, #540]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 800161a:	4989      	ldr	r1, [pc, #548]	; (8001840 <HAL_RCC_OscConfig+0x628>)
 800161c:	400a      	ands	r2, r1
 800161e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2210      	movs	r2, #16
 8001626:	4013      	ands	r3, r2
 8001628:	d063      	beq.n	80016f2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d12a      	bne.n	8001688 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001632:	4b81      	ldr	r3, [pc, #516]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001636:	4b80      	ldr	r3, [pc, #512]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001638:	2104      	movs	r1, #4
 800163a:	430a      	orrs	r2, r1
 800163c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800163e:	4b7e      	ldr	r3, [pc, #504]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001642:	4b7d      	ldr	r3, [pc, #500]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001644:	2101      	movs	r1, #1
 8001646:	430a      	orrs	r2, r1
 8001648:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff f92b 	bl	80008a4 <HAL_GetTick>
 800164e:	0003      	movs	r3, r0
 8001650:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001654:	f7ff f926 	bl	80008a4 <HAL_GetTick>
 8001658:	0002      	movs	r2, r0
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e0e3      	b.n	800182e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001666:	4b74      	ldr	r3, [pc, #464]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166a:	2202      	movs	r2, #2
 800166c:	4013      	ands	r3, r2
 800166e:	d0f1      	beq.n	8001654 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001670:	4b71      	ldr	r3, [pc, #452]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001674:	22f8      	movs	r2, #248	; 0xf8
 8001676:	4393      	bics	r3, r2
 8001678:	0019      	movs	r1, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	00da      	lsls	r2, r3, #3
 8001680:	4b6d      	ldr	r3, [pc, #436]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001682:	430a      	orrs	r2, r1
 8001684:	635a      	str	r2, [r3, #52]	; 0x34
 8001686:	e034      	b.n	80016f2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	3305      	adds	r3, #5
 800168e:	d111      	bne.n	80016b4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001690:	4b69      	ldr	r3, [pc, #420]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001696:	2104      	movs	r1, #4
 8001698:	438a      	bics	r2, r1
 800169a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800169c:	4b66      	ldr	r3, [pc, #408]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 800169e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a0:	22f8      	movs	r2, #248	; 0xf8
 80016a2:	4393      	bics	r3, r2
 80016a4:	0019      	movs	r1, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	00da      	lsls	r2, r3, #3
 80016ac:	4b62      	ldr	r3, [pc, #392]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	635a      	str	r2, [r3, #52]	; 0x34
 80016b2:	e01e      	b.n	80016f2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016b4:	4b60      	ldr	r3, [pc, #384]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80016b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b8:	4b5f      	ldr	r3, [pc, #380]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80016ba:	2104      	movs	r1, #4
 80016bc:	430a      	orrs	r2, r1
 80016be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016c0:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80016c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c4:	4b5c      	ldr	r3, [pc, #368]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80016c6:	2101      	movs	r1, #1
 80016c8:	438a      	bics	r2, r1
 80016ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff f8ea 	bl	80008a4 <HAL_GetTick>
 80016d0:	0003      	movs	r3, r0
 80016d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016d6:	f7ff f8e5 	bl	80008a4 <HAL_GetTick>
 80016da:	0002      	movs	r2, r0
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e0a2      	b.n	800182e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80016ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ec:	2202      	movs	r2, #2
 80016ee:	4013      	ands	r3, r2
 80016f0:	d1f1      	bne.n	80016d6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d100      	bne.n	80016fc <HAL_RCC_OscConfig+0x4e4>
 80016fa:	e097      	b.n	800182c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016fc:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	220c      	movs	r2, #12
 8001702:	4013      	ands	r3, r2
 8001704:	2b08      	cmp	r3, #8
 8001706:	d100      	bne.n	800170a <HAL_RCC_OscConfig+0x4f2>
 8001708:	e06b      	b.n	80017e2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d14c      	bne.n	80017ac <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001712:	4b49      	ldr	r3, [pc, #292]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b48      	ldr	r3, [pc, #288]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001718:	494a      	ldr	r1, [pc, #296]	; (8001844 <HAL_RCC_OscConfig+0x62c>)
 800171a:	400a      	ands	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff f8c1 	bl	80008a4 <HAL_GetTick>
 8001722:	0003      	movs	r3, r0
 8001724:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff f8bc 	bl	80008a4 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e079      	b.n	800182e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	049b      	lsls	r3, r3, #18
 8001742:	4013      	ands	r3, r2
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001746:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	220f      	movs	r2, #15
 800174c:	4393      	bics	r3, r2
 800174e:	0019      	movs	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001754:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001756:	430a      	orrs	r2, r1
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a3a      	ldr	r2, [pc, #232]	; (8001848 <HAL_RCC_OscConfig+0x630>)
 8001760:	4013      	ands	r3, r2
 8001762:	0019      	movs	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	431a      	orrs	r2, r3
 800176e:	4b32      	ldr	r3, [pc, #200]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001770:	430a      	orrs	r2, r1
 8001772:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001774:	4b30      	ldr	r3, [pc, #192]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	0449      	lsls	r1, r1, #17
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff f88f 	bl	80008a4 <HAL_GetTick>
 8001786:	0003      	movs	r3, r0
 8001788:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff f88a 	bl	80008a4 <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e047      	b.n	800182e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	049b      	lsls	r3, r3, #18
 80017a6:	4013      	ands	r3, r2
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x574>
 80017aa:	e03f      	b.n	800182c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80017b2:	4924      	ldr	r1, [pc, #144]	; (8001844 <HAL_RCC_OscConfig+0x62c>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff f874 	bl	80008a4 <HAL_GetTick>
 80017bc:	0003      	movs	r3, r0
 80017be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff f86f 	bl	80008a4 <HAL_GetTick>
 80017c6:	0002      	movs	r2, r0
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e02c      	b.n	800182e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	049b      	lsls	r3, r3, #18
 80017dc:	4013      	ands	r3, r2
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5aa>
 80017e0:	e024      	b.n	800182c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e01f      	b.n	800182e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_RCC_OscConfig+0x620>)
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	025b      	lsls	r3, r3, #9
 8001800:	401a      	ands	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	429a      	cmp	r2, r3
 8001808:	d10e      	bne.n	8001828 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	220f      	movs	r2, #15
 800180e:	401a      	ands	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d107      	bne.n	8001828 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	23f0      	movs	r3, #240	; 0xf0
 800181c:	039b      	lsls	r3, r3, #14
 800181e:	401a      	ands	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b008      	add	sp, #32
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	40021000 	.word	0x40021000
 800183c:	00001388 	.word	0x00001388
 8001840:	efffffff 	.word	0xefffffff
 8001844:	feffffff 	.word	0xfeffffff
 8001848:	ffc2ffff 	.word	0xffc2ffff

0800184c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0b3      	b.n	80019c8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b5b      	ldr	r3, [pc, #364]	; (80019d0 <HAL_RCC_ClockConfig+0x184>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	4013      	ands	r3, r2
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d911      	bls.n	8001892 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b58      	ldr	r3, [pc, #352]	; (80019d0 <HAL_RCC_ClockConfig+0x184>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	4393      	bics	r3, r2
 8001876:	0019      	movs	r1, r3
 8001878:	4b55      	ldr	r3, [pc, #340]	; (80019d0 <HAL_RCC_ClockConfig+0x184>)
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001880:	4b53      	ldr	r3, [pc, #332]	; (80019d0 <HAL_RCC_ClockConfig+0x184>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2201      	movs	r2, #1
 8001886:	4013      	ands	r3, r2
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d001      	beq.n	8001892 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e09a      	b.n	80019c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2202      	movs	r2, #2
 8001898:	4013      	ands	r3, r2
 800189a:	d015      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2204      	movs	r2, #4
 80018a2:	4013      	ands	r3, r2
 80018a4:	d006      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018a6:	4b4b      	ldr	r3, [pc, #300]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4b4a      	ldr	r3, [pc, #296]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 80018ac:	21e0      	movs	r1, #224	; 0xe0
 80018ae:	00c9      	lsls	r1, r1, #3
 80018b0:	430a      	orrs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b4:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	22f0      	movs	r2, #240	; 0xf0
 80018ba:	4393      	bics	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2201      	movs	r2, #1
 80018ce:	4013      	ands	r3, r2
 80018d0:	d040      	beq.n	8001954 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	029b      	lsls	r3, r3, #10
 80018e2:	4013      	ands	r3, r2
 80018e4:	d114      	bne.n	8001910 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e06e      	b.n	80019c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	049b      	lsls	r3, r3, #18
 80018fa:	4013      	ands	r3, r2
 80018fc:	d108      	bne.n	8001910 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e062      	b.n	80019c8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001902:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2202      	movs	r2, #2
 8001908:	4013      	ands	r3, r2
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e05b      	b.n	80019c8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001910:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	4393      	bics	r3, r2
 8001918:	0019      	movs	r1, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001924:	f7fe ffbe 	bl	80008a4 <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192c:	e009      	b.n	8001942 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192e:	f7fe ffb9 	bl	80008a4 <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	4a27      	ldr	r2, [pc, #156]	; (80019d8 <HAL_RCC_ClockConfig+0x18c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e042      	b.n	80019c8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	220c      	movs	r2, #12
 8001948:	401a      	ands	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	429a      	cmp	r2, r3
 8001952:	d1ec      	bne.n	800192e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_RCC_ClockConfig+0x184>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2201      	movs	r2, #1
 800195a:	4013      	ands	r3, r2
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d211      	bcs.n	8001986 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_RCC_ClockConfig+0x184>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2201      	movs	r2, #1
 8001968:	4393      	bics	r3, r2
 800196a:	0019      	movs	r1, r3
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_RCC_ClockConfig+0x184>)
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_RCC_ClockConfig+0x184>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2201      	movs	r2, #1
 800197a:	4013      	ands	r3, r2
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e020      	b.n	80019c8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2204      	movs	r2, #4
 800198c:	4013      	ands	r3, r2
 800198e:	d009      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4a11      	ldr	r2, [pc, #68]	; (80019dc <HAL_RCC_ClockConfig+0x190>)
 8001996:	4013      	ands	r3, r2
 8001998:	0019      	movs	r1, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 80019a0:	430a      	orrs	r2, r1
 80019a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019a4:	f000 f820 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 80019a8:	0001      	movs	r1, r0
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_RCC_ClockConfig+0x188>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	220f      	movs	r2, #15
 80019b2:	4013      	ands	r3, r2
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_RCC_ClockConfig+0x194>)
 80019b6:	5cd3      	ldrb	r3, [r2, r3]
 80019b8:	000a      	movs	r2, r1
 80019ba:	40da      	lsrs	r2, r3
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_RCC_ClockConfig+0x198>)
 80019be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7fe ff29 	bl	8000818 <HAL_InitTick>
  
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b004      	add	sp, #16
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40022000 	.word	0x40022000
 80019d4:	40021000 	.word	0x40021000
 80019d8:	00001388 	.word	0x00001388
 80019dc:	fffff8ff 	.word	0xfffff8ff
 80019e0:	080037d8 	.word	0x080037d8
 80019e4:	2000000c 	.word	0x2000000c

080019e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d002      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x30>
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x36>
 8001a16:	e02c      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a1a:	613b      	str	r3, [r7, #16]
      break;
 8001a1c:	e02c      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	0c9b      	lsrs	r3, r3, #18
 8001a22:	220f      	movs	r2, #15
 8001a24:	4013      	ands	r3, r2
 8001a26:	4a19      	ldr	r2, [pc, #100]	; (8001a8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a28:	5cd3      	ldrb	r3, [r2, r3]
 8001a2a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	220f      	movs	r2, #15
 8001a32:	4013      	ands	r3, r2
 8001a34:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	025b      	lsls	r3, r3, #9
 8001a40:	4013      	ands	r3, r2
 8001a42:	d009      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	4810      	ldr	r0, [pc, #64]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a48:	f7fe fb66 	bl	8000118 <__udivsi3>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	001a      	movs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4353      	muls	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e009      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	000a      	movs	r2, r1
 8001a5c:	0152      	lsls	r2, r2, #5
 8001a5e:	1a52      	subs	r2, r2, r1
 8001a60:	0193      	lsls	r3, r2, #6
 8001a62:	1a9b      	subs	r3, r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	185b      	adds	r3, r3, r1
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
      break;
 8001a70:	e002      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a74:	613b      	str	r3, [r7, #16]
      break;
 8001a76:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a78:	693b      	ldr	r3, [r7, #16]
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b006      	add	sp, #24
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	40021000 	.word	0x40021000
 8001a88:	007a1200 	.word	0x007a1200
 8001a8c:	080037f0 	.word	0x080037f0
 8001a90:	08003800 	.word	0x08003800

08001a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a98:	4b02      	ldr	r3, [pc, #8]	; (8001aa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	2000000c 	.word	0x2000000c

08001aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001aac:	f7ff fff2 	bl	8001a94 <HAL_RCC_GetHCLKFreq>
 8001ab0:	0001      	movs	r1, r0
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	2207      	movs	r2, #7
 8001aba:	4013      	ands	r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	40d9      	lsrs	r1, r3
 8001ac2:	000b      	movs	r3, r1
}    
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	080037e8 	.word	0x080037e8

08001ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	025b      	lsls	r3, r3, #9
 8001aec:	4013      	ands	r3, r2
 8001aee:	d100      	bne.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001af0:	e08e      	b.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001af2:	2017      	movs	r0, #23
 8001af4:	183b      	adds	r3, r7, r0
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afa:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	055b      	lsls	r3, r3, #21
 8001b02:	4013      	ands	r3, r2
 8001b04:	d110      	bne.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	4b54      	ldr	r3, [pc, #336]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b0c:	2180      	movs	r1, #128	; 0x80
 8001b0e:	0549      	lsls	r1, r1, #21
 8001b10:	430a      	orrs	r2, r1
 8001b12:	61da      	str	r2, [r3, #28]
 8001b14:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	055b      	lsls	r3, r3, #21
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b22:	183b      	adds	r3, r7, r0
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b28:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	d11a      	bne.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b34:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	0049      	lsls	r1, r1, #1
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b42:	f7fe feaf 	bl	80008a4 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	e008      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4c:	f7fe feaa 	bl	80008a4 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e077      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b6c:	6a1a      	ldr	r2, [r3, #32]
 8001b6e:	23c0      	movs	r3, #192	; 0xc0
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d034      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	23c0      	movs	r3, #192	; 0xc0
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d02c      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b8c:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4a33      	ldr	r2, [pc, #204]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b98:	6a1a      	ldr	r2, [r3, #32]
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	0249      	lsls	r1, r1, #9
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ba6:	6a1a      	ldr	r2, [r3, #32]
 8001ba8:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001baa:	492e      	ldr	r1, [pc, #184]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001bac:	400a      	ands	r2, r1
 8001bae:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001bb0:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7fe fe71 	bl	80008a4 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	e009      	b.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7fe fe6c 	bl	80008a4 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	4a25      	ldr	r2, [pc, #148]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e038      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	2202      	movs	r2, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bfa:	2317      	movs	r3, #23
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c06:	69da      	ldr	r2, [r3, #28]
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c0a:	4918      	ldr	r1, [pc, #96]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2201      	movs	r2, #1
 8001c16:	4013      	ands	r3, r2
 8001c18:	d009      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	2203      	movs	r2, #3
 8001c20:	4393      	bics	r3, r2
 8001c22:	0019      	movs	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2220      	movs	r2, #32
 8001c34:	4013      	ands	r3, r2
 8001c36:	d009      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	4393      	bics	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b006      	add	sp, #24
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	fffffcff 	.word	0xfffffcff
 8001c64:	fffeffff 	.word	0xfffeffff
 8001c68:	00001388 	.word	0x00001388
 8001c6c:	efffffff 	.word	0xefffffff

08001c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e044      	b.n	8001d0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d107      	bne.n	8001c9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2278      	movs	r2, #120	; 0x78
 8001c8e:	2100      	movs	r1, #0
 8001c90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7fe fc6f 	bl	8000578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2224      	movs	r2, #36	; 0x24
 8001c9e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2101      	movs	r1, #1
 8001cac:	438a      	bics	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f000 fdfe 	bl	80028bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f000 fcba 	bl	800263c <UART_SetConfig>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e01c      	b.n	8001d0c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	490d      	ldr	r1, [pc, #52]	; (8001d14 <HAL_UART_Init+0xa4>)
 8001cde:	400a      	ands	r2, r1
 8001ce0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2108      	movs	r1, #8
 8001cee:	438a      	bics	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 fe8d 	bl	8002a24 <UART_CheckIdleState>
 8001d0a:	0003      	movs	r3, r0
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b002      	add	sp, #8
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	fffff7ff 	.word	0xfffff7ff

08001d18 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	1dbb      	adds	r3, r7, #6
 8001d24:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	d15b      	bne.n	8001de6 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_UART_Transmit_IT+0x24>
 8001d34:	1dbb      	adds	r3, r7, #6
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e053      	b.n	8001de8 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	015b      	lsls	r3, r3, #5
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d109      	bne.n	8001d60 <HAL_UART_Transmit_IT+0x48>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2201      	movs	r2, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d001      	beq.n	8001d60 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e043      	b.n	8001de8 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1dba      	adds	r2, r7, #6
 8001d6a:	2150      	movs	r1, #80	; 0x50
 8001d6c:	8812      	ldrh	r2, [r2, #0]
 8001d6e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1dba      	adds	r2, r7, #6
 8001d74:	2152      	movs	r1, #82	; 0x52
 8001d76:	8812      	ldrh	r2, [r2, #0]
 8001d78:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2284      	movs	r2, #132	; 0x84
 8001d84:	2100      	movs	r1, #0
 8001d86:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2221      	movs	r2, #33	; 0x21
 8001d8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	015b      	lsls	r3, r3, #5
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d107      	bne.n	8001daa <HAL_UART_Transmit_IT+0x92>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d103      	bne.n	8001daa <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <HAL_UART_Transmit_IT+0xd8>)
 8001da6:	66da      	str	r2, [r3, #108]	; 0x6c
 8001da8:	e002      	b.n	8001db0 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <HAL_UART_Transmit_IT+0xdc>)
 8001dae:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001db0:	f3ef 8310 	mrs	r3, PRIMASK
 8001db4:	613b      	str	r3, [r7, #16]
  return(result);
 8001db6:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	2301      	movs	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f383 8810 	msr	PRIMASK, r3
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	f383 8810 	msr	PRIMASK, r3
}
 8001de0:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
  }
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b008      	add	sp, #32
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	080032e5 	.word	0x080032e5
 8001df4:	08003231 	.word	0x08003231

08001df8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	1dbb      	adds	r3, r7, #6
 8001e04:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	589b      	ldr	r3, [r3, r2]
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d145      	bne.n	8001e9c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_UART_Receive_IT+0x26>
 8001e16:	1dbb      	adds	r3, r7, #6
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e03d      	b.n	8001e9e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	015b      	lsls	r3, r3, #5
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d109      	bne.n	8001e42 <HAL_UART_Receive_IT+0x4a>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d001      	beq.n	8001e42 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e02d      	b.n	8001e9e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	041b      	lsls	r3, r3, #16
 8001e52:	4013      	ands	r3, r2
 8001e54:	d019      	beq.n	8001e8a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e56:	f3ef 8310 	mrs	r3, PRIMASK
 8001e5a:	613b      	str	r3, [r7, #16]
  return(result);
 8001e5c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	2301      	movs	r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f383 8810 	msr	PRIMASK, r3
}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	04c9      	lsls	r1, r1, #19
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f383 8810 	msr	PRIMASK, r3
}
 8001e88:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e8a:	1dbb      	adds	r3, r7, #6
 8001e8c:	881a      	ldrh	r2, [r3, #0]
 8001e8e:	68b9      	ldr	r1, [r7, #8]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	0018      	movs	r0, r3
 8001e94:	f000 fede 	bl	8002c54 <UART_Start_Receive_IT>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	e000      	b.n	8001e9e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
  }
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b008      	add	sp, #32
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b088      	sub	sp, #32
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	1dbb      	adds	r3, r7, #6
 8001eb2:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	589b      	ldr	r3, [r3, r2]
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d145      	bne.n	8001f4a <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_UART_Receive_DMA+0x26>
 8001ec4:	1dbb      	adds	r3, r7, #6
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e03d      	b.n	8001f4c <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	015b      	lsls	r3, r3, #5
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d109      	bne.n	8001ef0 <HAL_UART_Receive_DMA+0x4a>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d001      	beq.n	8001ef0 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e02d      	b.n	8001f4c <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	4013      	ands	r3, r2
 8001f02:	d019      	beq.n	8001f38 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f04:	f3ef 8310 	mrs	r3, PRIMASK
 8001f08:	613b      	str	r3, [r7, #16]
  return(result);
 8001f0a:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f383 8810 	msr	PRIMASK, r3
}
 8001f18:	46c0      	nop			; (mov r8, r8)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	04c9      	lsls	r1, r1, #19
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f383 8810 	msr	PRIMASK, r3
}
 8001f36:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001f38:	1dbb      	adds	r3, r7, #6
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 ff3d 	bl	8002dc0 <UART_Start_Receive_DMA>
 8001f46:	0003      	movs	r3, r0
 8001f48:	e000      	b.n	8001f4c <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
  }
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b008      	add	sp, #32
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08c      	sub	sp, #48	; 0x30
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	589b      	ldr	r3, [r3, r2]
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b80      	cmp	r3, #128	; 0x80
 8001f76:	d138      	bne.n	8001fea <HAL_UART_DMAStop+0x96>
 8001f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7a:	2b21      	cmp	r3, #33	; 0x21
 8001f7c:	d135      	bne.n	8001fea <HAL_UART_DMAStop+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8001f82:	617b      	str	r3, [r7, #20]
  return(result);
 8001f84:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	2301      	movs	r3, #1
 8001f8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	f383 8810 	msr	PRIMASK, r3
}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	438a      	bics	r2, r1
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f383 8810 	msr	PRIMASK, r3
}
 8001fae:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d014      	beq.n	8001fe2 <HAL_UART_DMAStop+0x8e>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7fe fe2b 	bl	8000c18 <HAL_DMA_Abort>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d00d      	beq.n	8001fe2 <HAL_UART_DMAStop+0x8e>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7fe ff43 	bl	8000e56 <HAL_DMA_GetError>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	d105      	bne.n	8001fe2 <HAL_UART_DMAStop+0x8e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2284      	movs	r2, #132	; 0x84
 8001fda:	2110      	movs	r1, #16
 8001fdc:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e044      	b.n	800206c <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f000 ff8b 	bl	8002f00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2240      	movs	r2, #64	; 0x40
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b40      	cmp	r3, #64	; 0x40
 8001ff6:	d138      	bne.n	800206a <HAL_UART_DMAStop+0x116>
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffa:	2b22      	cmp	r3, #34	; 0x22
 8001ffc:	d135      	bne.n	800206a <HAL_UART_DMAStop+0x116>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8002002:	60bb      	str	r3, [r7, #8]
  return(result);
 8002004:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	2301      	movs	r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f383 8810 	msr	PRIMASK, r3
}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2140      	movs	r1, #64	; 0x40
 8002020:	438a      	bics	r2, r1
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f383 8810 	msr	PRIMASK, r3
}
 800202e:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002034:	2b00      	cmp	r3, #0
 8002036:	d014      	beq.n	8002062 <HAL_UART_DMAStop+0x10e>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203c:	0018      	movs	r0, r3
 800203e:	f7fe fdeb 	bl	8000c18 <HAL_DMA_Abort>
 8002042:	1e03      	subs	r3, r0, #0
 8002044:	d00d      	beq.n	8002062 <HAL_UART_DMAStop+0x10e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204a:	0018      	movs	r0, r3
 800204c:	f7fe ff03 	bl	8000e56 <HAL_DMA_GetError>
 8002050:	0003      	movs	r3, r0
 8002052:	2b20      	cmp	r3, #32
 8002054:	d105      	bne.n	8002062 <HAL_UART_DMAStop+0x10e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2284      	movs	r2, #132	; 0x84
 800205a:	2110      	movs	r1, #16
 800205c:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e004      	b.n	800206c <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	0018      	movs	r0, r3
 8002066:	f000 ff6f 	bl	8002f48 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b00c      	add	sp, #48	; 0x30
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b0ab      	sub	sp, #172	; 0xac
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	22a4      	movs	r2, #164	; 0xa4
 8002084:	18b9      	adds	r1, r7, r2
 8002086:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	20a0      	movs	r0, #160	; 0xa0
 8002090:	1839      	adds	r1, r7, r0
 8002092:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	219c      	movs	r1, #156	; 0x9c
 800209c:	1879      	adds	r1, r7, r1
 800209e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80020a0:	0011      	movs	r1, r2
 80020a2:	18bb      	adds	r3, r7, r2
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a99      	ldr	r2, [pc, #612]	; (800230c <HAL_UART_IRQHandler+0x298>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	2298      	movs	r2, #152	; 0x98
 80020ac:	18bc      	adds	r4, r7, r2
 80020ae:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80020b0:	18bb      	adds	r3, r7, r2
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d114      	bne.n	80020e2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2220      	movs	r2, #32
 80020be:	4013      	ands	r3, r2
 80020c0:	d00f      	beq.n	80020e2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80020c2:	183b      	adds	r3, r7, r0
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2220      	movs	r2, #32
 80020c8:	4013      	ands	r3, r2
 80020ca:	d00a      	beq.n	80020e2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d100      	bne.n	80020d6 <HAL_UART_IRQHandler+0x62>
 80020d4:	e286      	b.n	80025e4 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	0010      	movs	r0, r2
 80020de:	4798      	blx	r3
      }
      return;
 80020e0:	e280      	b.n	80025e4 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80020e2:	2398      	movs	r3, #152	; 0x98
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d100      	bne.n	80020ee <HAL_UART_IRQHandler+0x7a>
 80020ec:	e114      	b.n	8002318 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80020ee:	239c      	movs	r3, #156	; 0x9c
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	d106      	bne.n	8002108 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80020fa:	23a0      	movs	r3, #160	; 0xa0
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a83      	ldr	r2, [pc, #524]	; (8002310 <HAL_UART_IRQHandler+0x29c>)
 8002102:	4013      	ands	r3, r2
 8002104:	d100      	bne.n	8002108 <HAL_UART_IRQHandler+0x94>
 8002106:	e107      	b.n	8002318 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002108:	23a4      	movs	r3, #164	; 0xa4
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2201      	movs	r2, #1
 8002110:	4013      	ands	r3, r2
 8002112:	d012      	beq.n	800213a <HAL_UART_IRQHandler+0xc6>
 8002114:	23a0      	movs	r3, #160	; 0xa0
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4013      	ands	r3, r2
 8002120:	d00b      	beq.n	800213a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2201      	movs	r2, #1
 8002128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2284      	movs	r2, #132	; 0x84
 800212e:	589b      	ldr	r3, [r3, r2]
 8002130:	2201      	movs	r2, #1
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2184      	movs	r1, #132	; 0x84
 8002138:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800213a:	23a4      	movs	r3, #164	; 0xa4
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2202      	movs	r2, #2
 8002142:	4013      	ands	r3, r2
 8002144:	d011      	beq.n	800216a <HAL_UART_IRQHandler+0xf6>
 8002146:	239c      	movs	r3, #156	; 0x9c
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2201      	movs	r2, #1
 800214e:	4013      	ands	r3, r2
 8002150:	d00b      	beq.n	800216a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2202      	movs	r2, #2
 8002158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2284      	movs	r2, #132	; 0x84
 800215e:	589b      	ldr	r3, [r3, r2]
 8002160:	2204      	movs	r2, #4
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2184      	movs	r1, #132	; 0x84
 8002168:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800216a:	23a4      	movs	r3, #164	; 0xa4
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2204      	movs	r2, #4
 8002172:	4013      	ands	r3, r2
 8002174:	d011      	beq.n	800219a <HAL_UART_IRQHandler+0x126>
 8002176:	239c      	movs	r3, #156	; 0x9c
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2201      	movs	r2, #1
 800217e:	4013      	ands	r3, r2
 8002180:	d00b      	beq.n	800219a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2204      	movs	r2, #4
 8002188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2284      	movs	r2, #132	; 0x84
 800218e:	589b      	ldr	r3, [r3, r2]
 8002190:	2202      	movs	r2, #2
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2184      	movs	r1, #132	; 0x84
 8002198:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800219a:	23a4      	movs	r3, #164	; 0xa4
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2208      	movs	r2, #8
 80021a2:	4013      	ands	r3, r2
 80021a4:	d017      	beq.n	80021d6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80021a6:	23a0      	movs	r3, #160	; 0xa0
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2220      	movs	r2, #32
 80021ae:	4013      	ands	r3, r2
 80021b0:	d105      	bne.n	80021be <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80021b2:	239c      	movs	r3, #156	; 0x9c
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2201      	movs	r2, #1
 80021ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80021bc:	d00b      	beq.n	80021d6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2208      	movs	r2, #8
 80021c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2284      	movs	r2, #132	; 0x84
 80021ca:	589b      	ldr	r3, [r3, r2]
 80021cc:	2208      	movs	r2, #8
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2184      	movs	r1, #132	; 0x84
 80021d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80021d6:	23a4      	movs	r3, #164	; 0xa4
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	4013      	ands	r3, r2
 80021e2:	d013      	beq.n	800220c <HAL_UART_IRQHandler+0x198>
 80021e4:	23a0      	movs	r3, #160	; 0xa0
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	04db      	lsls	r3, r3, #19
 80021ee:	4013      	ands	r3, r2
 80021f0:	d00c      	beq.n	800220c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2284      	movs	r2, #132	; 0x84
 8002200:	589b      	ldr	r3, [r3, r2]
 8002202:	2220      	movs	r2, #32
 8002204:	431a      	orrs	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2184      	movs	r1, #132	; 0x84
 800220a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2284      	movs	r2, #132	; 0x84
 8002210:	589b      	ldr	r3, [r3, r2]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d100      	bne.n	8002218 <HAL_UART_IRQHandler+0x1a4>
 8002216:	e1e7      	b.n	80025e8 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002218:	23a4      	movs	r3, #164	; 0xa4
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2220      	movs	r2, #32
 8002220:	4013      	ands	r3, r2
 8002222:	d00e      	beq.n	8002242 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002224:	23a0      	movs	r3, #160	; 0xa0
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2220      	movs	r2, #32
 800222c:	4013      	ands	r3, r2
 800222e:	d008      	beq.n	8002242 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002234:	2b00      	cmp	r3, #0
 8002236:	d004      	beq.n	8002242 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	0010      	movs	r0, r2
 8002240:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2284      	movs	r2, #132	; 0x84
 8002246:	589b      	ldr	r3, [r3, r2]
 8002248:	2194      	movs	r1, #148	; 0x94
 800224a:	187a      	adds	r2, r7, r1
 800224c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2240      	movs	r2, #64	; 0x40
 8002256:	4013      	ands	r3, r2
 8002258:	2b40      	cmp	r3, #64	; 0x40
 800225a:	d004      	beq.n	8002266 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800225c:	187b      	adds	r3, r7, r1
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2228      	movs	r2, #40	; 0x28
 8002262:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002264:	d047      	beq.n	80022f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0018      	movs	r0, r3
 800226a:	f000 fe6d 	bl	8002f48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2240      	movs	r2, #64	; 0x40
 8002276:	4013      	ands	r3, r2
 8002278:	2b40      	cmp	r3, #64	; 0x40
 800227a:	d137      	bne.n	80022ec <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800227c:	f3ef 8310 	mrs	r3, PRIMASK
 8002280:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002284:	2090      	movs	r0, #144	; 0x90
 8002286:	183a      	adds	r2, r7, r0
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	2301      	movs	r3, #1
 800228c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800228e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002290:	f383 8810 	msr	PRIMASK, r3
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2140      	movs	r1, #64	; 0x40
 80022a2:	438a      	bics	r2, r1
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	183b      	adds	r3, r7, r0
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022ae:	f383 8810 	msr	PRIMASK, r3
}
 80022b2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d012      	beq.n	80022e2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <HAL_UART_IRQHandler+0x2a0>)
 80022c2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7fe fcdd 	bl	8000c88 <HAL_DMA_Abort_IT>
 80022ce:	1e03      	subs	r3, r0, #0
 80022d0:	d01a      	beq.n	8002308 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022dc:	0018      	movs	r0, r3
 80022de:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e0:	e012      	b.n	8002308 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f000 f995 	bl	8002614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ea:	e00d      	b.n	8002308 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	0018      	movs	r0, r3
 80022f0:	f000 f990 	bl	8002614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f4:	e008      	b.n	8002308 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 f98b 	bl	8002614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2284      	movs	r2, #132	; 0x84
 8002302:	2100      	movs	r1, #0
 8002304:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002306:	e16f      	b.n	80025e8 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002308:	46c0      	nop			; (mov r8, r8)
    return;
 800230a:	e16d      	b.n	80025e8 <HAL_UART_IRQHandler+0x574>
 800230c:	0000080f 	.word	0x0000080f
 8002310:	04000120 	.word	0x04000120
 8002314:	08003203 	.word	0x08003203

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231c:	2b01      	cmp	r3, #1
 800231e:	d000      	beq.n	8002322 <HAL_UART_IRQHandler+0x2ae>
 8002320:	e139      	b.n	8002596 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002322:	23a4      	movs	r3, #164	; 0xa4
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2210      	movs	r2, #16
 800232a:	4013      	ands	r3, r2
 800232c:	d100      	bne.n	8002330 <HAL_UART_IRQHandler+0x2bc>
 800232e:	e132      	b.n	8002596 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002330:	23a0      	movs	r3, #160	; 0xa0
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2210      	movs	r2, #16
 8002338:	4013      	ands	r3, r2
 800233a:	d100      	bne.n	800233e <HAL_UART_IRQHandler+0x2ca>
 800233c:	e12b      	b.n	8002596 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2210      	movs	r2, #16
 8002344:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2240      	movs	r2, #64	; 0x40
 800234e:	4013      	ands	r3, r2
 8002350:	2b40      	cmp	r3, #64	; 0x40
 8002352:	d000      	beq.n	8002356 <HAL_UART_IRQHandler+0x2e2>
 8002354:	e09f      	b.n	8002496 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	217e      	movs	r1, #126	; 0x7e
 8002360:	187b      	adds	r3, r7, r1
 8002362:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002364:	187b      	adds	r3, r7, r1
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d100      	bne.n	800236e <HAL_UART_IRQHandler+0x2fa>
 800236c:	e13e      	b.n	80025ec <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2258      	movs	r2, #88	; 0x58
 8002372:	5a9b      	ldrh	r3, [r3, r2]
 8002374:	187a      	adds	r2, r7, r1
 8002376:	8812      	ldrh	r2, [r2, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d300      	bcc.n	800237e <HAL_UART_IRQHandler+0x30a>
 800237c:	e136      	b.n	80025ec <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	187a      	adds	r2, r7, r1
 8002382:	215a      	movs	r1, #90	; 0x5a
 8002384:	8812      	ldrh	r2, [r2, #0]
 8002386:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b20      	cmp	r3, #32
 8002390:	d06f      	beq.n	8002472 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002392:	f3ef 8310 	mrs	r3, PRIMASK
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800239a:	67bb      	str	r3, [r7, #120]	; 0x78
 800239c:	2301      	movs	r3, #1
 800239e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a2:	f383 8810 	msr	PRIMASK, r3
}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4992      	ldr	r1, [pc, #584]	; (80025fc <HAL_UART_IRQHandler+0x588>)
 80023b4:	400a      	ands	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	f383 8810 	msr	PRIMASK, r3
}
 80023c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c4:	f3ef 8310 	mrs	r3, PRIMASK
 80023c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80023ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023cc:	677b      	str	r3, [r7, #116]	; 0x74
 80023ce:	2301      	movs	r3, #1
 80023d0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d4:	f383 8810 	msr	PRIMASK, r3
}
 80023d8:	46c0      	nop			; (mov r8, r8)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2101      	movs	r1, #1
 80023e6:	438a      	bics	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ec:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f0:	f383 8810 	msr	PRIMASK, r3
}
 80023f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023f6:	f3ef 8310 	mrs	r3, PRIMASK
 80023fa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80023fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023fe:	673b      	str	r3, [r7, #112]	; 0x70
 8002400:	2301      	movs	r3, #1
 8002402:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002406:	f383 8810 	msr	PRIMASK, r3
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2140      	movs	r1, #64	; 0x40
 8002418:	438a      	bics	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800241e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002422:	f383 8810 	msr	PRIMASK, r3
}
 8002426:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	2120      	movs	r1, #32
 800242e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002436:	f3ef 8310 	mrs	r3, PRIMASK
 800243a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800243c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800243e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002440:	2301      	movs	r3, #1
 8002442:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002446:	f383 8810 	msr	PRIMASK, r3
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2110      	movs	r1, #16
 8002458:	438a      	bics	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002462:	f383 8810 	msr	PRIMASK, r3
}
 8002466:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246c:	0018      	movs	r0, r3
 800246e:	f7fe fbd3 	bl	8000c18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2258      	movs	r2, #88	; 0x58
 800247c:	5a9a      	ldrh	r2, [r3, r2]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	215a      	movs	r1, #90	; 0x5a
 8002482:	5a5b      	ldrh	r3, [r3, r1]
 8002484:	b29b      	uxth	r3, r3
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	b29a      	uxth	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0011      	movs	r1, r2
 800248e:	0018      	movs	r0, r3
 8002490:	f000 f8c8 	bl	8002624 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002494:	e0aa      	b.n	80025ec <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2258      	movs	r2, #88	; 0x58
 800249a:	5a99      	ldrh	r1, [r3, r2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	225a      	movs	r2, #90	; 0x5a
 80024a0:	5a9b      	ldrh	r3, [r3, r2]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	208e      	movs	r0, #142	; 0x8e
 80024a6:	183b      	adds	r3, r7, r0
 80024a8:	1a8a      	subs	r2, r1, r2
 80024aa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	225a      	movs	r2, #90	; 0x5a
 80024b0:	5a9b      	ldrh	r3, [r3, r2]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d100      	bne.n	80024ba <HAL_UART_IRQHandler+0x446>
 80024b8:	e09a      	b.n	80025f0 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80024ba:	183b      	adds	r3, r7, r0
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d100      	bne.n	80024c4 <HAL_UART_IRQHandler+0x450>
 80024c2:	e095      	b.n	80025f0 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024c4:	f3ef 8310 	mrs	r3, PRIMASK
 80024c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80024ca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024cc:	2488      	movs	r4, #136	; 0x88
 80024ce:	193a      	adds	r2, r7, r4
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	2301      	movs	r3, #1
 80024d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f383 8810 	msr	PRIMASK, r3
}
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4945      	ldr	r1, [pc, #276]	; (8002600 <HAL_UART_IRQHandler+0x58c>)
 80024ea:	400a      	ands	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	193b      	adds	r3, r7, r4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f383 8810 	msr	PRIMASK, r3
}
 80024fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002500:	61bb      	str	r3, [r7, #24]
  return(result);
 8002502:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002504:	2484      	movs	r4, #132	; 0x84
 8002506:	193a      	adds	r2, r7, r4
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	2301      	movs	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f383 8810 	msr	PRIMASK, r3
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	438a      	bics	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	193b      	adds	r3, r7, r4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	f383 8810 	msr	PRIMASK, r3
}
 8002532:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	2120      	movs	r1, #32
 800253a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002548:	f3ef 8310 	mrs	r3, PRIMASK
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002550:	2480      	movs	r4, #128	; 0x80
 8002552:	193a      	adds	r2, r7, r4
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	2301      	movs	r3, #1
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	f383 8810 	msr	PRIMASK, r3
}
 8002560:	46c0      	nop			; (mov r8, r8)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2110      	movs	r1, #16
 800256e:	438a      	bics	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	193b      	adds	r3, r7, r4
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	f383 8810 	msr	PRIMASK, r3
}
 800257e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002586:	183b      	adds	r3, r7, r0
 8002588:	881a      	ldrh	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	0011      	movs	r1, r2
 800258e:	0018      	movs	r0, r3
 8002590:	f000 f848 	bl	8002624 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002594:	e02c      	b.n	80025f0 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002596:	23a4      	movs	r3, #164	; 0xa4
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2280      	movs	r2, #128	; 0x80
 800259e:	4013      	ands	r3, r2
 80025a0:	d00f      	beq.n	80025c2 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80025a2:	23a0      	movs	r3, #160	; 0xa0
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	4013      	ands	r3, r2
 80025ac:	d009      	beq.n	80025c2 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01e      	beq.n	80025f4 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	0010      	movs	r0, r2
 80025be:	4798      	blx	r3
    }
    return;
 80025c0:	e018      	b.n	80025f4 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80025c2:	23a4      	movs	r3, #164	; 0xa4
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2240      	movs	r2, #64	; 0x40
 80025ca:	4013      	ands	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_UART_IRQHandler+0x582>
 80025ce:	23a0      	movs	r3, #160	; 0xa0
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	4013      	ands	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	0018      	movs	r0, r3
 80025de:	f000 fedf 	bl	80033a0 <UART_EndTransmit_IT>
    return;
 80025e2:	e008      	b.n	80025f6 <HAL_UART_IRQHandler+0x582>
      return;
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	e006      	b.n	80025f6 <HAL_UART_IRQHandler+0x582>
    return;
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	e004      	b.n	80025f6 <HAL_UART_IRQHandler+0x582>
      return;
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	e002      	b.n	80025f6 <HAL_UART_IRQHandler+0x582>
      return;
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	e000      	b.n	80025f6 <HAL_UART_IRQHandler+0x582>
    return;
 80025f4:	46c0      	nop			; (mov r8, r8)
  }

}
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b02b      	add	sp, #172	; 0xac
 80025fa:	bd90      	pop	{r4, r7, pc}
 80025fc:	fffffeff 	.word	0xfffffeff
 8002600:	fffffedf 	.word	0xfffffedf

08002604 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	000a      	movs	r2, r1
 800262e:	1cbb      	adds	r3, r7, #2
 8002630:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	b002      	add	sp, #8
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002644:	231e      	movs	r3, #30
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a8d      	ldr	r2, [pc, #564]	; (80028a0 <UART_SetConfig+0x264>)
 800266c:	4013      	ands	r3, r2
 800266e:	0019      	movs	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	430a      	orrs	r2, r1
 8002678:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4a88      	ldr	r2, [pc, #544]	; (80028a4 <UART_SetConfig+0x268>)
 8002682:	4013      	ands	r3, r2
 8002684:	0019      	movs	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a7f      	ldr	r2, [pc, #508]	; (80028a8 <UART_SetConfig+0x26c>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a7b      	ldr	r2, [pc, #492]	; (80028ac <UART_SetConfig+0x270>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d127      	bne.n	8002712 <UART_SetConfig+0xd6>
 80026c2:	4b7b      	ldr	r3, [pc, #492]	; (80028b0 <UART_SetConfig+0x274>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	2203      	movs	r2, #3
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d00d      	beq.n	80026ea <UART_SetConfig+0xae>
 80026ce:	d81b      	bhi.n	8002708 <UART_SetConfig+0xcc>
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d014      	beq.n	80026fe <UART_SetConfig+0xc2>
 80026d4:	d818      	bhi.n	8002708 <UART_SetConfig+0xcc>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <UART_SetConfig+0xa4>
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d00a      	beq.n	80026f4 <UART_SetConfig+0xb8>
 80026de:	e013      	b.n	8002708 <UART_SetConfig+0xcc>
 80026e0:	231f      	movs	r3, #31
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e021      	b.n	800272e <UART_SetConfig+0xf2>
 80026ea:	231f      	movs	r3, #31
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2202      	movs	r2, #2
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e01c      	b.n	800272e <UART_SetConfig+0xf2>
 80026f4:	231f      	movs	r3, #31
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	2204      	movs	r2, #4
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e017      	b.n	800272e <UART_SetConfig+0xf2>
 80026fe:	231f      	movs	r3, #31
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	2208      	movs	r2, #8
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e012      	b.n	800272e <UART_SetConfig+0xf2>
 8002708:	231f      	movs	r3, #31
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	2210      	movs	r2, #16
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	e00d      	b.n	800272e <UART_SetConfig+0xf2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a67      	ldr	r2, [pc, #412]	; (80028b4 <UART_SetConfig+0x278>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d104      	bne.n	8002726 <UART_SetConfig+0xea>
 800271c:	231f      	movs	r3, #31
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e003      	b.n	800272e <UART_SetConfig+0xf2>
 8002726:	231f      	movs	r3, #31
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	2210      	movs	r2, #16
 800272c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	429a      	cmp	r2, r3
 8002738:	d15c      	bne.n	80027f4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800273a:	231f      	movs	r3, #31
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d015      	beq.n	8002770 <UART_SetConfig+0x134>
 8002744:	dc18      	bgt.n	8002778 <UART_SetConfig+0x13c>
 8002746:	2b04      	cmp	r3, #4
 8002748:	d00d      	beq.n	8002766 <UART_SetConfig+0x12a>
 800274a:	dc15      	bgt.n	8002778 <UART_SetConfig+0x13c>
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <UART_SetConfig+0x11a>
 8002750:	2b02      	cmp	r3, #2
 8002752:	d005      	beq.n	8002760 <UART_SetConfig+0x124>
 8002754:	e010      	b.n	8002778 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002756:	f7ff f9a7 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 800275a:	0003      	movs	r3, r0
 800275c:	61bb      	str	r3, [r7, #24]
        break;
 800275e:	e012      	b.n	8002786 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002760:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <UART_SetConfig+0x27c>)
 8002762:	61bb      	str	r3, [r7, #24]
        break;
 8002764:	e00f      	b.n	8002786 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002766:	f7ff f93f 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 800276a:	0003      	movs	r3, r0
 800276c:	61bb      	str	r3, [r7, #24]
        break;
 800276e:	e00a      	b.n	8002786 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	61bb      	str	r3, [r7, #24]
        break;
 8002776:	e006      	b.n	8002786 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800277c:	231e      	movs	r3, #30
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
        break;
 8002784:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d100      	bne.n	800278e <UART_SetConfig+0x152>
 800278c:	e07a      	b.n	8002884 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	005a      	lsls	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	18d2      	adds	r2, r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	0019      	movs	r1, r3
 80027a0:	0010      	movs	r0, r2
 80027a2:	f7fd fcb9 	bl	8000118 <__udivsi3>
 80027a6:	0003      	movs	r3, r0
 80027a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b0f      	cmp	r3, #15
 80027ae:	d91c      	bls.n	80027ea <UART_SetConfig+0x1ae>
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	025b      	lsls	r3, r3, #9
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d217      	bcs.n	80027ea <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	b29a      	uxth	r2, r3
 80027be:	200e      	movs	r0, #14
 80027c0:	183b      	adds	r3, r7, r0
 80027c2:	210f      	movs	r1, #15
 80027c4:	438a      	bics	r2, r1
 80027c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2207      	movs	r2, #7
 80027d0:	4013      	ands	r3, r2
 80027d2:	b299      	uxth	r1, r3
 80027d4:	183b      	adds	r3, r7, r0
 80027d6:	183a      	adds	r2, r7, r0
 80027d8:	8812      	ldrh	r2, [r2, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	183a      	adds	r2, r7, r0
 80027e4:	8812      	ldrh	r2, [r2, #0]
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	e04c      	b.n	8002884 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80027ea:	231e      	movs	r3, #30
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	e047      	b.n	8002884 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027f4:	231f      	movs	r3, #31
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d015      	beq.n	800282a <UART_SetConfig+0x1ee>
 80027fe:	dc18      	bgt.n	8002832 <UART_SetConfig+0x1f6>
 8002800:	2b04      	cmp	r3, #4
 8002802:	d00d      	beq.n	8002820 <UART_SetConfig+0x1e4>
 8002804:	dc15      	bgt.n	8002832 <UART_SetConfig+0x1f6>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <UART_SetConfig+0x1d4>
 800280a:	2b02      	cmp	r3, #2
 800280c:	d005      	beq.n	800281a <UART_SetConfig+0x1de>
 800280e:	e010      	b.n	8002832 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002810:	f7ff f94a 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8002814:	0003      	movs	r3, r0
 8002816:	61bb      	str	r3, [r7, #24]
        break;
 8002818:	e012      	b.n	8002840 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800281a:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <UART_SetConfig+0x27c>)
 800281c:	61bb      	str	r3, [r7, #24]
        break;
 800281e:	e00f      	b.n	8002840 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002820:	f7ff f8e2 	bl	80019e8 <HAL_RCC_GetSysClockFreq>
 8002824:	0003      	movs	r3, r0
 8002826:	61bb      	str	r3, [r7, #24]
        break;
 8002828:	e00a      	b.n	8002840 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	61bb      	str	r3, [r7, #24]
        break;
 8002830:	e006      	b.n	8002840 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002836:	231e      	movs	r3, #30
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
        break;
 800283e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d01e      	beq.n	8002884 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	085a      	lsrs	r2, r3, #1
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	18d2      	adds	r2, r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	0019      	movs	r1, r3
 8002856:	0010      	movs	r0, r2
 8002858:	f7fd fc5e 	bl	8000118 <__udivsi3>
 800285c:	0003      	movs	r3, r0
 800285e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b0f      	cmp	r3, #15
 8002864:	d90a      	bls.n	800287c <UART_SetConfig+0x240>
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	025b      	lsls	r3, r3, #9
 800286c:	429a      	cmp	r2, r3
 800286e:	d205      	bcs.n	800287c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	b29a      	uxth	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	e003      	b.n	8002884 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800287c:	231e      	movs	r3, #30
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002890:	231e      	movs	r3, #30
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	781b      	ldrb	r3, [r3, #0]
}
 8002896:	0018      	movs	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	b008      	add	sp, #32
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	ffff69f3 	.word	0xffff69f3
 80028a4:	ffffcfff 	.word	0xffffcfff
 80028a8:	fffff4ff 	.word	0xfffff4ff
 80028ac:	40013800 	.word	0x40013800
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40004400 	.word	0x40004400
 80028b8:	007a1200 	.word	0x007a1200

080028bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	2208      	movs	r2, #8
 80028ca:	4013      	ands	r3, r2
 80028cc:	d00b      	beq.n	80028e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a4a      	ldr	r2, [pc, #296]	; (8002a00 <UART_AdvFeatureConfig+0x144>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	2201      	movs	r2, #1
 80028ec:	4013      	ands	r3, r2
 80028ee:	d00b      	beq.n	8002908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4a43      	ldr	r2, [pc, #268]	; (8002a04 <UART_AdvFeatureConfig+0x148>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	2202      	movs	r2, #2
 800290e:	4013      	ands	r3, r2
 8002910:	d00b      	beq.n	800292a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a3b      	ldr	r2, [pc, #236]	; (8002a08 <UART_AdvFeatureConfig+0x14c>)
 800291a:	4013      	ands	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	2204      	movs	r2, #4
 8002930:	4013      	ands	r3, r2
 8002932:	d00b      	beq.n	800294c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a34      	ldr	r2, [pc, #208]	; (8002a0c <UART_AdvFeatureConfig+0x150>)
 800293c:	4013      	ands	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	2210      	movs	r2, #16
 8002952:	4013      	ands	r3, r2
 8002954:	d00b      	beq.n	800296e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a2c      	ldr	r2, [pc, #176]	; (8002a10 <UART_AdvFeatureConfig+0x154>)
 800295e:	4013      	ands	r3, r2
 8002960:	0019      	movs	r1, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	2220      	movs	r2, #32
 8002974:	4013      	ands	r3, r2
 8002976:	d00b      	beq.n	8002990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4a25      	ldr	r2, [pc, #148]	; (8002a14 <UART_AdvFeatureConfig+0x158>)
 8002980:	4013      	ands	r3, r2
 8002982:	0019      	movs	r1, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	2240      	movs	r2, #64	; 0x40
 8002996:	4013      	ands	r3, r2
 8002998:	d01d      	beq.n	80029d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <UART_AdvFeatureConfig+0x15c>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	035b      	lsls	r3, r3, #13
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d10b      	bne.n	80029d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <UART_AdvFeatureConfig+0x160>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	0019      	movs	r1, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	4013      	ands	r3, r2
 80029de:	d00b      	beq.n	80029f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <UART_AdvFeatureConfig+0x164>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	0019      	movs	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]
  }
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	ffff7fff 	.word	0xffff7fff
 8002a04:	fffdffff 	.word	0xfffdffff
 8002a08:	fffeffff 	.word	0xfffeffff
 8002a0c:	fffbffff 	.word	0xfffbffff
 8002a10:	ffffefff 	.word	0xffffefff
 8002a14:	ffffdfff 	.word	0xffffdfff
 8002a18:	ffefffff 	.word	0xffefffff
 8002a1c:	ff9fffff 	.word	0xff9fffff
 8002a20:	fff7ffff 	.word	0xfff7ffff

08002a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b092      	sub	sp, #72	; 0x48
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2284      	movs	r2, #132	; 0x84
 8002a30:	2100      	movs	r1, #0
 8002a32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a34:	f7fd ff36 	bl	80008a4 <HAL_GetTick>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2208      	movs	r2, #8
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d12c      	bne.n	8002aa4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	0391      	lsls	r1, r2, #14
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4a46      	ldr	r2, [pc, #280]	; (8002b6c <UART_CheckIdleState+0x148>)
 8002a54:	9200      	str	r2, [sp, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f000 f88c 	bl	8002b74 <UART_WaitOnFlagUntilTimeout>
 8002a5c:	1e03      	subs	r3, r0, #0
 8002a5e:	d021      	beq.n	8002aa4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a60:	f3ef 8310 	mrs	r3, PRIMASK
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a70:	f383 8810 	msr	PRIMASK, r3
}
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	438a      	bics	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	f383 8810 	msr	PRIMASK, r3
}
 8002a90:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2278      	movs	r2, #120	; 0x78
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e05f      	b.n	8002b64 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2204      	movs	r2, #4
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d146      	bne.n	8002b40 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ab4:	2280      	movs	r2, #128	; 0x80
 8002ab6:	03d1      	lsls	r1, r2, #15
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4a2c      	ldr	r2, [pc, #176]	; (8002b6c <UART_CheckIdleState+0x148>)
 8002abc:	9200      	str	r2, [sp, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f000 f858 	bl	8002b74 <UART_WaitOnFlagUntilTimeout>
 8002ac4:	1e03      	subs	r3, r0, #0
 8002ac6:	d03b      	beq.n	8002b40 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8002acc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ace:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f383 8810 	msr	PRIMASK, r3
}
 8002adc:	46c0      	nop			; (mov r8, r8)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4921      	ldr	r1, [pc, #132]	; (8002b70 <UART_CheckIdleState+0x14c>)
 8002aea:	400a      	ands	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f383 8810 	msr	PRIMASK, r3
}
 8002af8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002afa:	f3ef 8310 	mrs	r3, PRIMASK
 8002afe:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b00:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
 8002b04:	2301      	movs	r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f383 8810 	msr	PRIMASK, r3
}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	438a      	bics	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	f383 8810 	msr	PRIMASK, r3
}
 8002b2a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	2120      	movs	r1, #32
 8002b32:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2278      	movs	r2, #120	; 0x78
 8002b38:	2100      	movs	r1, #0
 8002b3a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e011      	b.n	8002b64 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	2120      	movs	r1, #32
 8002b4c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2278      	movs	r2, #120	; 0x78
 8002b5e:	2100      	movs	r1, #0
 8002b60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b010      	add	sp, #64	; 0x40
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	01ffffff 	.word	0x01ffffff
 8002b70:	fffffedf 	.word	0xfffffedf

08002b74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	1dfb      	adds	r3, r7, #7
 8002b82:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b84:	e051      	b.n	8002c2a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	d04e      	beq.n	8002c2a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8c:	f7fd fe8a 	bl	80008a4 <HAL_GetTick>
 8002b90:	0002      	movs	r2, r0
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d302      	bcc.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e051      	b.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2204      	movs	r2, #4
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d03b      	beq.n	8002c2a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d038      	beq.n	8002c2a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d035      	beq.n	8002c2a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d111      	bne.n	8002bf0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 f9b6 	bl	8002f48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2284      	movs	r2, #132	; 0x84
 8002be0:	2108      	movs	r1, #8
 8002be2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2278      	movs	r2, #120	; 0x78
 8002be8:	2100      	movs	r1, #0
 8002bea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e02c      	b.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d112      	bne.n	8002c2a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2280      	movs	r2, #128	; 0x80
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 f999 	bl	8002f48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2284      	movs	r2, #132	; 0x84
 8002c1a:	2120      	movs	r1, #32
 8002c1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2278      	movs	r2, #120	; 0x78
 8002c22:	2100      	movs	r1, #0
 8002c24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e00f      	b.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	4013      	ands	r3, r2
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	425a      	negs	r2, r3
 8002c3a:	4153      	adcs	r3, r2
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	001a      	movs	r2, r3
 8002c40:	1dfb      	adds	r3, r7, #7
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d09e      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b004      	add	sp, #16
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b090      	sub	sp, #64	; 0x40
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	1dbb      	adds	r3, r7, #6
 8002c60:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1dba      	adds	r2, r7, #6
 8002c6c:	2158      	movs	r1, #88	; 0x58
 8002c6e:	8812      	ldrh	r2, [r2, #0]
 8002c70:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1dba      	adds	r2, r7, #6
 8002c76:	215a      	movs	r1, #90	; 0x5a
 8002c78:	8812      	ldrh	r2, [r2, #0]
 8002c7a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	015b      	lsls	r3, r3, #5
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d10d      	bne.n	8002caa <UART_Start_Receive_IT+0x56>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d104      	bne.n	8002ca0 <UART_Start_Receive_IT+0x4c>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	225c      	movs	r2, #92	; 0x5c
 8002c9a:	4946      	ldr	r1, [pc, #280]	; (8002db4 <UART_Start_Receive_IT+0x160>)
 8002c9c:	5299      	strh	r1, [r3, r2]
 8002c9e:	e01a      	b.n	8002cd6 <UART_Start_Receive_IT+0x82>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	225c      	movs	r2, #92	; 0x5c
 8002ca4:	21ff      	movs	r1, #255	; 0xff
 8002ca6:	5299      	strh	r1, [r3, r2]
 8002ca8:	e015      	b.n	8002cd6 <UART_Start_Receive_IT+0x82>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <UART_Start_Receive_IT+0x7a>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d104      	bne.n	8002cc4 <UART_Start_Receive_IT+0x70>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	225c      	movs	r2, #92	; 0x5c
 8002cbe:	21ff      	movs	r1, #255	; 0xff
 8002cc0:	5299      	strh	r1, [r3, r2]
 8002cc2:	e008      	b.n	8002cd6 <UART_Start_Receive_IT+0x82>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	225c      	movs	r2, #92	; 0x5c
 8002cc8:	217f      	movs	r1, #127	; 0x7f
 8002cca:	5299      	strh	r1, [r3, r2]
 8002ccc:	e003      	b.n	8002cd6 <UART_Start_Receive_IT+0x82>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	225c      	movs	r2, #92	; 0x5c
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2284      	movs	r2, #132	; 0x84
 8002cda:	2100      	movs	r1, #0
 8002cdc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	2122      	movs	r1, #34	; 0x22
 8002ce4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cea:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	f383 8810 	msr	PRIMASK, r3
}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2101      	movs	r1, #1
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	f383 8810 	msr	PRIMASK, r3
}
 8002d16:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	015b      	lsls	r3, r3, #5
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d107      	bne.n	8002d34 <UART_Start_Receive_IT+0xe0>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <UART_Start_Receive_IT+0x164>)
 8002d30:	669a      	str	r2, [r3, #104]	; 0x68
 8002d32:	e002      	b.n	8002d3a <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <UART_Start_Receive_IT+0x168>)
 8002d38:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d019      	beq.n	8002d76 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d42:	f3ef 8310 	mrs	r3, PRIMASK
 8002d46:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d48:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f383 8810 	msr	PRIMASK, r3
}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2190      	movs	r1, #144	; 0x90
 8002d64:	0049      	lsls	r1, r1, #1
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	f383 8810 	msr	PRIMASK, r3
}
 8002d74:	e018      	b.n	8002da8 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d76:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7a:	613b      	str	r3, [r7, #16]
  return(result);
 8002d7c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d80:	2301      	movs	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f383 8810 	msr	PRIMASK, r3
}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2120      	movs	r1, #32
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f383 8810 	msr	PRIMASK, r3
}
 8002da6:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b010      	add	sp, #64	; 0x40
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	000001ff 	.word	0x000001ff
 8002db8:	080035b1 	.word	0x080035b1
 8002dbc:	080033f9 	.word	0x080033f9

08002dc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b090      	sub	sp, #64	; 0x40
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	1dbb      	adds	r3, r7, #6
 8002dcc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1dba      	adds	r2, r7, #6
 8002dd8:	2158      	movs	r1, #88	; 0x58
 8002dda:	8812      	ldrh	r2, [r2, #0]
 8002ddc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2284      	movs	r2, #132	; 0x84
 8002de2:	2100      	movs	r1, #0
 8002de4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	2122      	movs	r1, #34	; 0x22
 8002dec:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d028      	beq.n	8002e48 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfa:	4a3e      	ldr	r2, [pc, #248]	; (8002ef4 <UART_Start_Receive_DMA+0x134>)
 8002dfc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	4a3d      	ldr	r2, [pc, #244]	; (8002ef8 <UART_Start_Receive_DMA+0x138>)
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0a:	4a3c      	ldr	r2, [pc, #240]	; (8002efc <UART_Start_Receive_DMA+0x13c>)
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e12:	2200      	movs	r2, #0
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3324      	adds	r3, #36	; 0x24
 8002e20:	0019      	movs	r1, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	001a      	movs	r2, r3
 8002e28:	1dbb      	adds	r3, r7, #6
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	f7fd fe8e 	bl	8000b4c <HAL_DMA_Start_IT>
 8002e30:	1e03      	subs	r3, r0, #0
 8002e32:	d009      	beq.n	8002e48 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2284      	movs	r2, #132	; 0x84
 8002e38:	2110      	movs	r1, #16
 8002e3a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	2120      	movs	r1, #32
 8002e42:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e050      	b.n	8002eea <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d019      	beq.n	8002e84 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e50:	f3ef 8310 	mrs	r3, PRIMASK
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	f383 8810 	msr	PRIMASK, r3
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	0049      	lsls	r1, r1, #1
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	f383 8810 	msr	PRIMASK, r3
}
 8002e82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e84:	f3ef 8310 	mrs	r3, PRIMASK
 8002e88:	613b      	str	r3, [r7, #16]
  return(result);
 8002e8a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e8e:	2301      	movs	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f383 8810 	msr	PRIMASK, r3
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	f383 8810 	msr	PRIMASK, r3
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eba:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ebc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	f383 8810 	msr	PRIMASK, r3
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2140      	movs	r1, #64	; 0x40
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	f383 8810 	msr	PRIMASK, r3
}
 8002ee6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	0018      	movs	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b010      	add	sp, #64	; 0x40
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	08003011 	.word	0x08003011
 8002ef8:	0800313d 	.word	0x0800313d
 8002efc:	0800317f 	.word	0x0800317f

08002f00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f08:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	2301      	movs	r3, #1
 8002f14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f383 8810 	msr	PRIMASK, r3
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	21c0      	movs	r1, #192	; 0xc0
 8002f2a:	438a      	bics	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f383 8810 	msr	PRIMASK, r3
}
 8002f38:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b006      	add	sp, #24
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08e      	sub	sp, #56	; 0x38
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f50:	f3ef 8310 	mrs	r3, PRIMASK
 8002f54:	617b      	str	r3, [r7, #20]
  return(result);
 8002f56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f383 8810 	msr	PRIMASK, r3
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4926      	ldr	r1, [pc, #152]	; (800300c <UART_EndRxTransfer+0xc4>)
 8002f72:	400a      	ands	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f383 8810 	msr	PRIMASK, r3
}
 8002f80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f82:	f3ef 8310 	mrs	r3, PRIMASK
 8002f86:	623b      	str	r3, [r7, #32]
  return(result);
 8002f88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	f383 8810 	msr	PRIMASK, r3
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	438a      	bics	r2, r1
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	f383 8810 	msr	PRIMASK, r3
}
 8002fb2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d118      	bne.n	8002fee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fc2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f383 8810 	msr	PRIMASK, r3
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2110      	movs	r1, #16
 8002fde:	438a      	bics	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f383 8810 	msr	PRIMASK, r3
}
 8002fec:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	2120      	movs	r1, #32
 8002ff4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	46bd      	mov	sp, r7
 8003006:	b00e      	add	sp, #56	; 0x38
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	fffffedf 	.word	0xfffffedf

08003010 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b094      	sub	sp, #80	; 0x50
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b20      	cmp	r3, #32
 8003024:	d06f      	beq.n	8003106 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	225a      	movs	r2, #90	; 0x5a
 800302a:	2100      	movs	r1, #0
 800302c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800302e:	f3ef 8310 	mrs	r3, PRIMASK
 8003032:	61bb      	str	r3, [r7, #24]
  return(result);
 8003034:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003036:	64bb      	str	r3, [r7, #72]	; 0x48
 8003038:	2301      	movs	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f383 8810 	msr	PRIMASK, r3
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	493a      	ldr	r1, [pc, #232]	; (8003138 <UART_DMAReceiveCplt+0x128>)
 8003050:	400a      	ands	r2, r1
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003056:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	f383 8810 	msr	PRIMASK, r3
}
 800305e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003060:	f3ef 8310 	mrs	r3, PRIMASK
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003068:	647b      	str	r3, [r7, #68]	; 0x44
 800306a:	2301      	movs	r3, #1
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	f383 8810 	msr	PRIMASK, r3
}
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	438a      	bics	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308c:	f383 8810 	msr	PRIMASK, r3
}
 8003090:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003092:	f3ef 8310 	mrs	r3, PRIMASK
 8003096:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800309a:	643b      	str	r3, [r7, #64]	; 0x40
 800309c:	2301      	movs	r3, #1
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a2:	f383 8810 	msr	PRIMASK, r3
}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2140      	movs	r1, #64	; 0x40
 80030b4:	438a      	bics	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030be:	f383 8810 	msr	PRIMASK, r3
}
 80030c2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	2120      	movs	r1, #32
 80030ca:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d118      	bne.n	8003106 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d4:	f3ef 8310 	mrs	r3, PRIMASK
 80030d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80030da:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030de:	2301      	movs	r3, #1
 80030e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f383 8810 	msr	PRIMASK, r3
}
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2110      	movs	r1, #16
 80030f6:	438a      	bics	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f383 8810 	msr	PRIMASK, r3
}
 8003104:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003108:	2200      	movs	r2, #0
 800310a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800310c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003110:	2b01      	cmp	r3, #1
 8003112:	d108      	bne.n	8003126 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003116:	2258      	movs	r2, #88	; 0x58
 8003118:	5a9a      	ldrh	r2, [r3, r2]
 800311a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311c:	0011      	movs	r1, r2
 800311e:	0018      	movs	r0, r3
 8003120:	f7ff fa80 	bl	8002624 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003124:	e003      	b.n	800312e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003128:	0018      	movs	r0, r3
 800312a:	f7fd fb07 	bl	800073c <HAL_UART_RxCpltCallback>
}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b014      	add	sp, #80	; 0x50
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	fffffeff 	.word	0xfffffeff

0800313c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003154:	2b01      	cmp	r3, #1
 8003156:	d10a      	bne.n	800316e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2258      	movs	r2, #88	; 0x58
 800315c:	5a9b      	ldrh	r3, [r3, r2]
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	0011      	movs	r1, r2
 8003166:	0018      	movs	r0, r3
 8003168:	f7ff fa5c 	bl	8002624 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800316c:	e003      	b.n	8003176 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	0018      	movs	r0, r3
 8003172:	f7ff fa47 	bl	8002604 <HAL_UART_RxHalfCpltCallback>
}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	46bd      	mov	sp, r7
 800317a:	b004      	add	sp, #16
 800317c:	bd80      	pop	{r7, pc}

0800317e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003190:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	589b      	ldr	r3, [r3, r2]
 8003198:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2280      	movs	r2, #128	; 0x80
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d10a      	bne.n	80031be <UART_DMAError+0x40>
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b21      	cmp	r3, #33	; 0x21
 80031ac:	d107      	bne.n	80031be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2252      	movs	r2, #82	; 0x52
 80031b2:	2100      	movs	r1, #0
 80031b4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7ff fea1 	bl	8002f00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2240      	movs	r2, #64	; 0x40
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d10a      	bne.n	80031e2 <UART_DMAError+0x64>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b22      	cmp	r3, #34	; 0x22
 80031d0:	d107      	bne.n	80031e2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	225a      	movs	r2, #90	; 0x5a
 80031d6:	2100      	movs	r1, #0
 80031d8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	0018      	movs	r0, r3
 80031de:	f7ff feb3 	bl	8002f48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2284      	movs	r2, #132	; 0x84
 80031e6:	589b      	ldr	r3, [r3, r2]
 80031e8:	2210      	movs	r2, #16
 80031ea:	431a      	orrs	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2184      	movs	r1, #132	; 0x84
 80031f0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7ff fa0d 	bl	8002614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b006      	add	sp, #24
 8003200:	bd80      	pop	{r7, pc}

08003202 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	225a      	movs	r2, #90	; 0x5a
 8003214:	2100      	movs	r1, #0
 8003216:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2252      	movs	r2, #82	; 0x52
 800321c:	2100      	movs	r1, #0
 800321e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	0018      	movs	r0, r3
 8003224:	f7ff f9f6 	bl	8002614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b004      	add	sp, #16
 800322e:	bd80      	pop	{r7, pc}

08003230 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800323c:	2b21      	cmp	r3, #33	; 0x21
 800323e:	d14d      	bne.n	80032dc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2252      	movs	r2, #82	; 0x52
 8003244:	5a9b      	ldrh	r3, [r3, r2]
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d132      	bne.n	80032b2 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324c:	f3ef 8310 	mrs	r3, PRIMASK
 8003250:	60bb      	str	r3, [r7, #8]
  return(result);
 8003252:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
 8003256:	2301      	movs	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f383 8810 	msr	PRIMASK, r3
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	438a      	bics	r2, r1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f383 8810 	msr	PRIMASK, r3
}
 800327c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800327e:	f3ef 8310 	mrs	r3, PRIMASK
 8003282:	617b      	str	r3, [r7, #20]
  return(result);
 8003284:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003286:	623b      	str	r3, [r7, #32]
 8003288:	2301      	movs	r3, #1
 800328a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f383 8810 	msr	PRIMASK, r3
}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2140      	movs	r1, #64	; 0x40
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f383 8810 	msr	PRIMASK, r3
}
 80032ae:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80032b0:	e014      	b.n	80032dc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b6:	781a      	ldrb	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	b292      	uxth	r2, r2
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2252      	movs	r2, #82	; 0x52
 80032ce:	5a9b      	ldrh	r3, [r3, r2]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b299      	uxth	r1, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2252      	movs	r2, #82	; 0x52
 80032da:	5299      	strh	r1, [r3, r2]
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b00a      	add	sp, #40	; 0x28
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08c      	sub	sp, #48	; 0x30
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f0:	2b21      	cmp	r3, #33	; 0x21
 80032f2:	d151      	bne.n	8003398 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2252      	movs	r2, #82	; 0x52
 80032f8:	5a9b      	ldrh	r3, [r3, r2]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d132      	bne.n	8003366 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003300:	f3ef 8310 	mrs	r3, PRIMASK
 8003304:	60fb      	str	r3, [r7, #12]
  return(result);
 8003306:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
 800330a:	2301      	movs	r3, #1
 800330c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f383 8810 	msr	PRIMASK, r3
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2180      	movs	r1, #128	; 0x80
 8003322:	438a      	bics	r2, r1
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f383 8810 	msr	PRIMASK, r3
}
 8003330:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003332:	f3ef 8310 	mrs	r3, PRIMASK
 8003336:	61bb      	str	r3, [r7, #24]
  return(result);
 8003338:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
 800333c:	2301      	movs	r3, #1
 800333e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f383 8810 	msr	PRIMASK, r3
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2140      	movs	r1, #64	; 0x40
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f383 8810 	msr	PRIMASK, r3
}
 8003362:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003364:	e018      	b.n	8003398 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	881a      	ldrh	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	05d2      	lsls	r2, r2, #23
 8003376:	0dd2      	lsrs	r2, r2, #23
 8003378:	b292      	uxth	r2, r2
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	1c9a      	adds	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2252      	movs	r2, #82	; 0x52
 800338a:	5a9b      	ldrh	r3, [r3, r2]
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b299      	uxth	r1, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2252      	movs	r2, #82	; 0x52
 8003396:	5299      	strh	r1, [r3, r2]
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b00c      	add	sp, #48	; 0x30
 800339e:	bd80      	pop	{r7, pc}

080033a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80033ae:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	2301      	movs	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f383 8810 	msr	PRIMASK, r3
}
 80033bc:	46c0      	nop			; (mov r8, r8)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	438a      	bics	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f383 8810 	msr	PRIMASK, r3
}
 80033d8:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7fd f99f 	bl	800072c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b006      	add	sp, #24
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b094      	sub	sp, #80	; 0x50
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003400:	204e      	movs	r0, #78	; 0x4e
 8003402:	183b      	adds	r3, r7, r0
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	215c      	movs	r1, #92	; 0x5c
 8003408:	5a52      	ldrh	r2, [r2, r1]
 800340a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	589b      	ldr	r3, [r3, r2]
 8003412:	2b22      	cmp	r3, #34	; 0x22
 8003414:	d000      	beq.n	8003418 <UART_RxISR_8BIT+0x20>
 8003416:	e0ba      	b.n	800358e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	214c      	movs	r1, #76	; 0x4c
 800341e:	187b      	adds	r3, r7, r1
 8003420:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003422:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003424:	187b      	adds	r3, r7, r1
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	183b      	adds	r3, r7, r0
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	b2d9      	uxtb	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	400a      	ands	r2, r1
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	225a      	movs	r2, #90	; 0x5a
 8003448:	5a9b      	ldrh	r3, [r3, r2]
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b299      	uxth	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	225a      	movs	r2, #90	; 0x5a
 8003454:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	225a      	movs	r2, #90	; 0x5a
 800345a:	5a9b      	ldrh	r3, [r3, r2]
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d000      	beq.n	8003464 <UART_RxISR_8BIT+0x6c>
 8003462:	e09c      	b.n	800359e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003464:	f3ef 8310 	mrs	r3, PRIMASK
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800346c:	64bb      	str	r3, [r7, #72]	; 0x48
 800346e:	2301      	movs	r3, #1
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	f383 8810 	msr	PRIMASK, r3
}
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4948      	ldr	r1, [pc, #288]	; (80035a8 <UART_RxISR_8BIT+0x1b0>)
 8003486:	400a      	ands	r2, r1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800348c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003490:	f383 8810 	msr	PRIMASK, r3
}
 8003494:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003496:	f3ef 8310 	mrs	r3, PRIMASK
 800349a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	647b      	str	r3, [r7, #68]	; 0x44
 80034a0:	2301      	movs	r3, #1
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2101      	movs	r1, #1
 80034b8:	438a      	bics	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034be:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c2:	f383 8810 	msr	PRIMASK, r3
}
 80034c6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2280      	movs	r2, #128	; 0x80
 80034cc:	2120      	movs	r1, #32
 80034ce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	2380      	movs	r3, #128	; 0x80
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	4013      	ands	r3, r2
 80034e8:	d018      	beq.n	800351c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ea:	f3ef 8310 	mrs	r3, PRIMASK
 80034ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80034f0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
 80034f4:	2301      	movs	r3, #1
 80034f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f383 8810 	msr	PRIMASK, r3
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4928      	ldr	r1, [pc, #160]	; (80035ac <UART_RxISR_8BIT+0x1b4>)
 800350c:	400a      	ands	r2, r1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003512:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f383 8810 	msr	PRIMASK, r3
}
 800351a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	2b01      	cmp	r3, #1
 8003522:	d12f      	bne.n	8003584 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800352a:	f3ef 8310 	mrs	r3, PRIMASK
 800352e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003530:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003534:	2301      	movs	r3, #1
 8003536:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f383 8810 	msr	PRIMASK, r3
}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2110      	movs	r1, #16
 800354c:	438a      	bics	r2, r1
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003552:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f383 8810 	msr	PRIMASK, r3
}
 800355a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	2210      	movs	r2, #16
 8003564:	4013      	ands	r3, r2
 8003566:	2b10      	cmp	r3, #16
 8003568:	d103      	bne.n	8003572 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2210      	movs	r2, #16
 8003570:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2258      	movs	r2, #88	; 0x58
 8003576:	5a9a      	ldrh	r2, [r3, r2]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	0011      	movs	r1, r2
 800357c:	0018      	movs	r0, r3
 800357e:	f7ff f851 	bl	8002624 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003582:	e00c      	b.n	800359e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	0018      	movs	r0, r3
 8003588:	f7fd f8d8 	bl	800073c <HAL_UART_RxCpltCallback>
}
 800358c:	e007      	b.n	800359e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2108      	movs	r1, #8
 800359a:	430a      	orrs	r2, r1
 800359c:	619a      	str	r2, [r3, #24]
}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b014      	add	sp, #80	; 0x50
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	fffffedf 	.word	0xfffffedf
 80035ac:	fbffffff 	.word	0xfbffffff

080035b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b094      	sub	sp, #80	; 0x50
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80035b8:	204e      	movs	r0, #78	; 0x4e
 80035ba:	183b      	adds	r3, r7, r0
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	215c      	movs	r1, #92	; 0x5c
 80035c0:	5a52      	ldrh	r2, [r2, r1]
 80035c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	589b      	ldr	r3, [r3, r2]
 80035ca:	2b22      	cmp	r3, #34	; 0x22
 80035cc:	d000      	beq.n	80035d0 <UART_RxISR_16BIT+0x20>
 80035ce:	e0ba      	b.n	8003746 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	214c      	movs	r1, #76	; 0x4c
 80035d6:	187b      	adds	r3, r7, r1
 80035d8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80035da:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80035e2:	187b      	adds	r3, r7, r1
 80035e4:	183a      	adds	r2, r7, r0
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	8812      	ldrh	r2, [r2, #0]
 80035ea:	4013      	ands	r3, r2
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	1c9a      	adds	r2, r3, #2
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	225a      	movs	r2, #90	; 0x5a
 8003600:	5a9b      	ldrh	r3, [r3, r2]
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b299      	uxth	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	225a      	movs	r2, #90	; 0x5a
 800360c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	225a      	movs	r2, #90	; 0x5a
 8003612:	5a9b      	ldrh	r3, [r3, r2]
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d000      	beq.n	800361c <UART_RxISR_16BIT+0x6c>
 800361a:	e09c      	b.n	8003756 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361c:	f3ef 8310 	mrs	r3, PRIMASK
 8003620:	623b      	str	r3, [r7, #32]
  return(result);
 8003622:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003624:	647b      	str	r3, [r7, #68]	; 0x44
 8003626:	2301      	movs	r3, #1
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	f383 8810 	msr	PRIMASK, r3
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4948      	ldr	r1, [pc, #288]	; (8003760 <UART_RxISR_16BIT+0x1b0>)
 800363e:	400a      	ands	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003644:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	f383 8810 	msr	PRIMASK, r3
}
 800364c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364e:	f3ef 8310 	mrs	r3, PRIMASK
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	643b      	str	r3, [r7, #64]	; 0x40
 8003658:	2301      	movs	r3, #1
 800365a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	f383 8810 	msr	PRIMASK, r3
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2101      	movs	r1, #1
 8003670:	438a      	bics	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	f383 8810 	msr	PRIMASK, r3
}
 800367e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2280      	movs	r2, #128	; 0x80
 8003684:	2120      	movs	r1, #32
 8003686:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	041b      	lsls	r3, r3, #16
 800369e:	4013      	ands	r3, r2
 80036a0:	d018      	beq.n	80036d4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a2:	f3ef 8310 	mrs	r3, PRIMASK
 80036a6:	617b      	str	r3, [r7, #20]
  return(result);
 80036a8:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ac:	2301      	movs	r3, #1
 80036ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f383 8810 	msr	PRIMASK, r3
}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4928      	ldr	r1, [pc, #160]	; (8003764 <UART_RxISR_16BIT+0x1b4>)
 80036c4:	400a      	ands	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f383 8810 	msr	PRIMASK, r3
}
 80036d2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d12f      	bne.n	800373c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e2:	f3ef 8310 	mrs	r3, PRIMASK
 80036e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80036e8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80036ec:	2301      	movs	r3, #1
 80036ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f383 8810 	msr	PRIMASK, r3
}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2110      	movs	r1, #16
 8003704:	438a      	bics	r2, r1
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f383 8810 	msr	PRIMASK, r3
}
 8003712:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	2210      	movs	r2, #16
 800371c:	4013      	ands	r3, r2
 800371e:	2b10      	cmp	r3, #16
 8003720:	d103      	bne.n	800372a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2210      	movs	r2, #16
 8003728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2258      	movs	r2, #88	; 0x58
 800372e:	5a9a      	ldrh	r2, [r3, r2]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	0011      	movs	r1, r2
 8003734:	0018      	movs	r0, r3
 8003736:	f7fe ff75 	bl	8002624 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800373a:	e00c      	b.n	8003756 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0018      	movs	r0, r3
 8003740:	f7fc fffc 	bl	800073c <HAL_UART_RxCpltCallback>
}
 8003744:	e007      	b.n	8003756 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	699a      	ldr	r2, [r3, #24]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2108      	movs	r1, #8
 8003752:	430a      	orrs	r2, r1
 8003754:	619a      	str	r2, [r3, #24]
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b014      	add	sp, #80	; 0x50
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	fffffedf 	.word	0xfffffedf
 8003764:	fbffffff 	.word	0xfbffffff

08003768 <__libc_init_array>:
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	2600      	movs	r6, #0
 800376c:	4d0c      	ldr	r5, [pc, #48]	; (80037a0 <__libc_init_array+0x38>)
 800376e:	4c0d      	ldr	r4, [pc, #52]	; (80037a4 <__libc_init_array+0x3c>)
 8003770:	1b64      	subs	r4, r4, r5
 8003772:	10a4      	asrs	r4, r4, #2
 8003774:	42a6      	cmp	r6, r4
 8003776:	d109      	bne.n	800378c <__libc_init_array+0x24>
 8003778:	2600      	movs	r6, #0
 800377a:	f000 f821 	bl	80037c0 <_init>
 800377e:	4d0a      	ldr	r5, [pc, #40]	; (80037a8 <__libc_init_array+0x40>)
 8003780:	4c0a      	ldr	r4, [pc, #40]	; (80037ac <__libc_init_array+0x44>)
 8003782:	1b64      	subs	r4, r4, r5
 8003784:	10a4      	asrs	r4, r4, #2
 8003786:	42a6      	cmp	r6, r4
 8003788:	d105      	bne.n	8003796 <__libc_init_array+0x2e>
 800378a:	bd70      	pop	{r4, r5, r6, pc}
 800378c:	00b3      	lsls	r3, r6, #2
 800378e:	58eb      	ldr	r3, [r5, r3]
 8003790:	4798      	blx	r3
 8003792:	3601      	adds	r6, #1
 8003794:	e7ee      	b.n	8003774 <__libc_init_array+0xc>
 8003796:	00b3      	lsls	r3, r6, #2
 8003798:	58eb      	ldr	r3, [r5, r3]
 800379a:	4798      	blx	r3
 800379c:	3601      	adds	r6, #1
 800379e:	e7f2      	b.n	8003786 <__libc_init_array+0x1e>
 80037a0:	08003810 	.word	0x08003810
 80037a4:	08003810 	.word	0x08003810
 80037a8:	08003810 	.word	0x08003810
 80037ac:	08003814 	.word	0x08003814

080037b0 <memset>:
 80037b0:	0003      	movs	r3, r0
 80037b2:	1882      	adds	r2, r0, r2
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d100      	bne.n	80037ba <memset+0xa>
 80037b8:	4770      	bx	lr
 80037ba:	7019      	strb	r1, [r3, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	e7f9      	b.n	80037b4 <memset+0x4>

080037c0 <_init>:
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c6:	bc08      	pop	{r3}
 80037c8:	469e      	mov	lr, r3
 80037ca:	4770      	bx	lr

080037cc <_fini>:
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d2:	bc08      	pop	{r3}
 80037d4:	469e      	mov	lr, r3
 80037d6:	4770      	bx	lr
