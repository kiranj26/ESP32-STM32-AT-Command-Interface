
stm32-dma-stmcubeide-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c84  08002c84  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c84  08002c84  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c84  08002c84  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000002c  08002cb8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002cb8  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086fb  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000164c  00000000  00000000  0002874f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  00029da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  0002a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f41d  00000000  00000000  0002a9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b80  00000000  00000000  00039de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bf66  00000000  00000000  00042965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009e8cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000151c  00000000  00000000  0009e91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c34 	.word	0x08002c34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	08002c34 	.word	0x08002c34

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fa6c 	bl	8000710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f816 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f8c6 	bl	80003cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000240:	f000 f8a6 	bl	8000390 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000244:	f000 f872 	bl	800032c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Start DMA UART TX */
  HAL_UART_Transmit_DMA(&huart1, txMessage, strlen((char*)txMessage));
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <main+0x30>)
 800024a:	0018      	movs	r0, r3
 800024c:	f7ff ff5c 	bl	8000108 <strlen>
 8000250:	0003      	movs	r3, r0
 8000252:	b29a      	uxth	r2, r3
 8000254:	4902      	ldr	r1, [pc, #8]	; (8000260 <main+0x30>)
 8000256:	4b03      	ldr	r3, [pc, #12]	; (8000264 <main+0x34>)
 8000258:	0018      	movs	r0, r3
 800025a:	f001 fcd9 	bl	8001c10 <HAL_UART_Transmit_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800025e:	e7fe      	b.n	800025e <main+0x2e>
 8000260:	20000000 	.word	0x20000000
 8000264:	20000048 	.word	0x20000048

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b095      	sub	sp, #84	; 0x54
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	2420      	movs	r4, #32
 8000270:	193b      	adds	r3, r7, r4
 8000272:	0018      	movs	r0, r3
 8000274:	2330      	movs	r3, #48	; 0x30
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f002 fcd3 	bl	8002c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027e:	2310      	movs	r3, #16
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	0018      	movs	r0, r3
 8000284:	2310      	movs	r3, #16
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f002 fccb 	bl	8002c24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800028e:	003b      	movs	r3, r7
 8000290:	0018      	movs	r0, r3
 8000292:	2310      	movs	r3, #16
 8000294:	001a      	movs	r2, r3
 8000296:	2100      	movs	r1, #0
 8000298:	f002 fcc4 	bl	8002c24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029c:	0021      	movs	r1, r4
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2202      	movs	r2, #2
 80002a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2201      	movs	r2, #1
 80002a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2210      	movs	r2, #16
 80002ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2202      	movs	r2, #2
 80002b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	22a0      	movs	r2, #160	; 0xa0
 80002c0:	0392      	lsls	r2, r2, #14
 80002c2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 ff1f 	bl	8001110 <HAL_RCC_OscConfig>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002d6:	f000 f8f9 	bl	80004cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	2110      	movs	r1, #16
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2207      	movs	r2, #7
 80002e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2202      	movs	r2, #2
 80002e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2101      	movs	r1, #1
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 fa23 	bl	8001744 <HAL_RCC_ClockConfig>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000302:	f000 f8e3 	bl	80004cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000306:	003b      	movs	r3, r7
 8000308:	2201      	movs	r2, #1
 800030a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800030c:	003b      	movs	r3, r7
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000312:	003b      	movs	r3, r7
 8000314:	0018      	movs	r0, r3
 8000316:	f001 fb59 	bl	80019cc <HAL_RCCEx_PeriphCLKConfig>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800031e:	f000 f8d5 	bl	80004cc <Error_Handler>
  }
}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b015      	add	sp, #84	; 0x54
 8000328:	bd90      	pop	{r4, r7, pc}
	...

0800032c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000330:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000332:	4a15      	ldr	r2, [pc, #84]	; (8000388 <MX_USART1_UART_Init+0x5c>)
 8000334:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115100;
 8000336:	4b13      	ldr	r3, [pc, #76]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000338:	4a14      	ldr	r2, [pc, #80]	; (800038c <MX_USART1_UART_Init+0x60>)
 800033a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800033c:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_USART1_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000348:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_USART1_UART_Init+0x58>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000350:	220c      	movs	r2, #12
 8000352:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000354:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000356:	2200      	movs	r2, #0
 8000358:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <MX_USART1_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000366:	4b07      	ldr	r3, [pc, #28]	; (8000384 <MX_USART1_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <MX_USART1_UART_Init+0x58>)
 800036e:	0018      	movs	r0, r3
 8000370:	f001 fbfa 	bl	8001b68 <HAL_UART_Init>
 8000374:	1e03      	subs	r3, r0, #0
 8000376:	d001      	beq.n	800037c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000378:	f000 f8a8 	bl	80004cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	20000048 	.word	0x20000048
 8000388:	40013800 	.word	0x40013800
 800038c:	0001c19c 	.word	0x0001c19c

08000390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_DMA_Init+0x38>)
 8000398:	695a      	ldr	r2, [r3, #20]
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_DMA_Init+0x38>)
 800039c:	2101      	movs	r1, #1
 800039e:	430a      	orrs	r2, r1
 80003a0:	615a      	str	r2, [r3, #20]
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_DMA_Init+0x38>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	2201      	movs	r2, #1
 80003a8:	4013      	ands	r3, r2
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	200a      	movs	r0, #10
 80003b4:	f000 fabc 	bl	8000930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80003b8:	200a      	movs	r0, #10
 80003ba:	f000 face 	bl	800095a <HAL_NVIC_EnableIRQ>

}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	40021000 	.word	0x40021000

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b590      	push	{r4, r7, lr}
 80003ce:	b089      	sub	sp, #36	; 0x24
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	240c      	movs	r4, #12
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	0018      	movs	r0, r3
 80003d8:	2314      	movs	r3, #20
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f002 fc21 	bl	8002c24 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e2:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <MX_GPIO_Init+0xf8>)
 80003e4:	695a      	ldr	r2, [r3, #20]
 80003e6:	4b37      	ldr	r3, [pc, #220]	; (80004c4 <MX_GPIO_Init+0xf8>)
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	0309      	lsls	r1, r1, #12
 80003ec:	430a      	orrs	r2, r1
 80003ee:	615a      	str	r2, [r3, #20]
 80003f0:	4b34      	ldr	r3, [pc, #208]	; (80004c4 <MX_GPIO_Init+0xf8>)
 80003f2:	695a      	ldr	r2, [r3, #20]
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	031b      	lsls	r3, r3, #12
 80003f8:	4013      	ands	r3, r2
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003fe:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <MX_GPIO_Init+0xf8>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	4b30      	ldr	r3, [pc, #192]	; (80004c4 <MX_GPIO_Init+0xf8>)
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	03c9      	lsls	r1, r1, #15
 8000408:	430a      	orrs	r2, r1
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <MX_GPIO_Init+0xf8>)
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	03db      	lsls	r3, r3, #15
 8000414:	4013      	ands	r3, r2
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <MX_GPIO_Init+0xf8>)
 800041c:	695a      	ldr	r2, [r3, #20]
 800041e:	4b29      	ldr	r3, [pc, #164]	; (80004c4 <MX_GPIO_Init+0xf8>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	0289      	lsls	r1, r1, #10
 8000424:	430a      	orrs	r2, r1
 8000426:	615a      	str	r2, [r3, #20]
 8000428:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <MX_GPIO_Init+0xf8>)
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	029b      	lsls	r3, r3, #10
 8000430:	4013      	ands	r3, r2
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000436:	2390      	movs	r3, #144	; 0x90
 8000438:	05db      	lsls	r3, r3, #23
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	0018      	movs	r0, r3
 8000440:	f000 fe2e 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000444:	193b      	adds	r3, r7, r4
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	0192      	lsls	r2, r2, #6
 800044a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2284      	movs	r2, #132	; 0x84
 8000450:	0392      	lsls	r2, r2, #14
 8000452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	193b      	adds	r3, r7, r4
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045a:	193b      	adds	r3, r7, r4
 800045c:	4a1a      	ldr	r2, [pc, #104]	; (80004c8 <MX_GPIO_Init+0xfc>)
 800045e:	0019      	movs	r1, r3
 8000460:	0010      	movs	r0, r2
 8000462:	f000 fcad 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000466:	193b      	adds	r3, r7, r4
 8000468:	220c      	movs	r2, #12
 800046a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2202      	movs	r2, #2
 8000470:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	193b      	adds	r3, r7, r4
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	193b      	adds	r3, r7, r4
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	2201      	movs	r2, #1
 8000482:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	193a      	adds	r2, r7, r4
 8000486:	2390      	movs	r3, #144	; 0x90
 8000488:	05db      	lsls	r3, r3, #23
 800048a:	0011      	movs	r1, r2
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fc97 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000492:	0021      	movs	r1, r4
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2220      	movs	r2, #32
 8000498:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2201      	movs	r2, #1
 800049e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	187a      	adds	r2, r7, r1
 80004ae:	2390      	movs	r3, #144	; 0x90
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fc83 	bl	8000dc0 <HAL_GPIO_Init>

}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b009      	add	sp, #36	; 0x24
 80004c0:	bd90      	pop	{r4, r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000800 	.word	0x48000800

080004cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d0:	b672      	cpsid	i
}
 80004d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <Error_Handler+0x8>
	...

080004d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <HAL_MspInit+0x44>)
 80004e0:	699a      	ldr	r2, [r3, #24]
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <HAL_MspInit+0x44>)
 80004e4:	2101      	movs	r1, #1
 80004e6:	430a      	orrs	r2, r1
 80004e8:	619a      	str	r2, [r3, #24]
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <HAL_MspInit+0x44>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	2201      	movs	r2, #1
 80004f0:	4013      	ands	r3, r2
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <HAL_MspInit+0x44>)
 80004f8:	69da      	ldr	r2, [r3, #28]
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <HAL_MspInit+0x44>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0549      	lsls	r1, r1, #21
 8000500:	430a      	orrs	r2, r1
 8000502:	61da      	str	r2, [r3, #28]
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <HAL_MspInit+0x44>)
 8000506:	69da      	ldr	r2, [r3, #28]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	055b      	lsls	r3, r3, #21
 800050c:	4013      	ands	r3, r2
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	40021000 	.word	0x40021000

08000520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b08b      	sub	sp, #44	; 0x2c
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000528:	2414      	movs	r4, #20
 800052a:	193b      	adds	r3, r7, r4
 800052c:	0018      	movs	r0, r3
 800052e:	2314      	movs	r3, #20
 8000530:	001a      	movs	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	f002 fb76 	bl	8002c24 <memset>
  if(huart->Instance==USART1)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a34      	ldr	r2, [pc, #208]	; (8000610 <HAL_UART_MspInit+0xf0>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d162      	bne.n	8000608 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000542:	4b34      	ldr	r3, [pc, #208]	; (8000614 <HAL_UART_MspInit+0xf4>)
 8000544:	699a      	ldr	r2, [r3, #24]
 8000546:	4b33      	ldr	r3, [pc, #204]	; (8000614 <HAL_UART_MspInit+0xf4>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	01c9      	lsls	r1, r1, #7
 800054c:	430a      	orrs	r2, r1
 800054e:	619a      	str	r2, [r3, #24]
 8000550:	4b30      	ldr	r3, [pc, #192]	; (8000614 <HAL_UART_MspInit+0xf4>)
 8000552:	699a      	ldr	r2, [r3, #24]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	01db      	lsls	r3, r3, #7
 8000558:	4013      	ands	r3, r2
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <HAL_UART_MspInit+0xf4>)
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <HAL_UART_MspInit+0xf4>)
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0289      	lsls	r1, r1, #10
 8000568:	430a      	orrs	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	4b29      	ldr	r3, [pc, #164]	; (8000614 <HAL_UART_MspInit+0xf4>)
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	029b      	lsls	r3, r3, #10
 8000574:	4013      	ands	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	22c0      	movs	r2, #192	; 0xc0
 800057e:	00d2      	lsls	r2, r2, #3
 8000580:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	0021      	movs	r1, r4
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2202      	movs	r2, #2
 8000588:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2203      	movs	r2, #3
 8000594:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2201      	movs	r2, #1
 800059a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	187a      	adds	r2, r7, r1
 800059e:	2390      	movs	r3, #144	; 0x90
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	0011      	movs	r1, r2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fc0b 	bl	8000dc0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <HAL_UART_MspInit+0xf8>)
 80005ac:	4a1b      	ldr	r2, [pc, #108]	; (800061c <HAL_UART_MspInit+0xfc>)
 80005ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <HAL_UART_MspInit+0xf8>)
 80005b2:	2210      	movs	r2, #16
 80005b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <HAL_UART_MspInit+0xf8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_UART_MspInit+0xf8>)
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <HAL_UART_MspInit+0xf8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <HAL_UART_MspInit+0xf8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_UART_MspInit+0xf8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <HAL_UART_MspInit+0xf8>)
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	0152      	lsls	r2, r2, #5
 80005da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <HAL_UART_MspInit+0xf8>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 f9d8 	bl	8000994 <HAL_DMA_Init>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80005e8:	f7ff ff70 	bl	80004cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <HAL_UART_MspInit+0xf8>)
 80005f0:	671a      	str	r2, [r3, #112]	; 0x70
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_UART_MspInit+0xf8>)
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	201b      	movs	r0, #27
 80005fe:	f000 f997 	bl	8000930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000602:	201b      	movs	r0, #27
 8000604:	f000 f9a9 	bl	800095a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b00b      	add	sp, #44	; 0x2c
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	40013800 	.word	0x40013800
 8000614:	40021000 	.word	0x40021000
 8000618:	200000d0 	.word	0x200000d0
 800061c:	4002001c 	.word	0x4002001c

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <NMI_Handler+0x4>

08000626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <HardFault_Handler+0x4>

0800062c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000644:	f000 f8ac 	bl	80007a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fac7 	bl	8000bea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	200000d0 	.word	0x200000d0

08000668 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <USART1_IRQHandler+0x14>)
 800066e:	0018      	movs	r0, r3
 8000670:	f001 fb5e 	bl	8001d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000674:	46c0      	nop			; (mov r8, r8)
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	20000048 	.word	0x20000048

08000680 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <HAL_UART_TxCpltCallback+0x28>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <HAL_UART_TxCpltCallback+0x20>
    {
        /* Transmission Complete Interrupt Triggered */
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // Toggle LED on PC13 (or any GPIO)
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	019b      	lsls	r3, r3, #6
 8000696:	4a05      	ldr	r2, [pc, #20]	; (80006ac <HAL_UART_TxCpltCallback+0x2c>)
 8000698:	0019      	movs	r1, r3
 800069a:	0010      	movs	r0, r2
 800069c:	f000 fd1d 	bl	80010da <HAL_GPIO_TogglePin>
    }
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b002      	add	sp, #8
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40013800 	.word	0x40013800
 80006ac:	48000800 	.word	0x48000800

080006b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c0:	f7ff fff6 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006c6:	490d      	ldr	r1, [pc, #52]	; (80006fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <LoopForever+0xe>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006cc:	e002      	b.n	80006d4 <LoopCopyDataInit>

080006ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d2:	3304      	adds	r3, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d8:	d3f9      	bcc.n	80006ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006da:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006dc:	4c0a      	ldr	r4, [pc, #40]	; (8000708 <LoopForever+0x16>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e0:	e001      	b.n	80006e6 <LoopFillZerobss>

080006e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e4:	3204      	adds	r2, #4

080006e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e8:	d3fb      	bcc.n	80006e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ea:	f002 fa77 	bl	8002bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ee:	f7ff fd9f 	bl	8000230 <main>

080006f2 <LoopForever>:

LoopForever:
    b LoopForever
 80006f2:	e7fe      	b.n	80006f2 <LoopForever>
  ldr   r0, =_estack
 80006f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000700:	08002c8c 	.word	0x08002c8c
  ldr r2, =_sbss
 8000704:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000708:	20000118 	.word	0x20000118

0800070c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC1_IRQHandler>
	...

08000710 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <HAL_Init+0x24>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_Init+0x24>)
 800071a:	2110      	movs	r1, #16
 800071c:	430a      	orrs	r2, r1
 800071e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000720:	2000      	movs	r0, #0
 8000722:	f000 f809 	bl	8000738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000726:	f7ff fed7 	bl	80004d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800072a:	2300      	movs	r3, #0
}
 800072c:	0018      	movs	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	40022000 	.word	0x40022000

08000738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_InitTick+0x5c>)
 8000742:	681c      	ldr	r4, [r3, #0]
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_InitTick+0x60>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	0019      	movs	r1, r3
 800074a:	23fa      	movs	r3, #250	; 0xfa
 800074c:	0098      	lsls	r0, r3, #2
 800074e:	f7ff fce3 	bl	8000118 <__udivsi3>
 8000752:	0003      	movs	r3, r0
 8000754:	0019      	movs	r1, r3
 8000756:	0020      	movs	r0, r4
 8000758:	f7ff fcde 	bl	8000118 <__udivsi3>
 800075c:	0003      	movs	r3, r0
 800075e:	0018      	movs	r0, r3
 8000760:	f000 f90b 	bl	800097a <HAL_SYSTICK_Config>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000768:	2301      	movs	r3, #1
 800076a:	e00f      	b.n	800078c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d80b      	bhi.n	800078a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	2301      	movs	r3, #1
 8000776:	425b      	negs	r3, r3
 8000778:	2200      	movs	r2, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f000 f8d8 	bl	8000930 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_InitTick+0x64>)
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	e000      	b.n	800078c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
}
 800078c:	0018      	movs	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	b003      	add	sp, #12
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	20000020 	.word	0x20000020
 8000798:	20000028 	.word	0x20000028
 800079c:	20000024 	.word	0x20000024

080007a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x1c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	001a      	movs	r2, r3
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x20>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	18d2      	adds	r2, r2, r3
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <HAL_IncTick+0x20>)
 80007b2:	601a      	str	r2, [r3, #0]
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	20000028 	.word	0x20000028
 80007c0:	20000114 	.word	0x20000114

080007c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <HAL_GetTick+0x10>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	0018      	movs	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	20000114 	.word	0x20000114

080007d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	0002      	movs	r2, r0
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b7f      	cmp	r3, #127	; 0x7f
 80007ea:	d809      	bhi.n	8000800 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	001a      	movs	r2, r3
 80007f2:	231f      	movs	r3, #31
 80007f4:	401a      	ands	r2, r3
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__NVIC_EnableIRQ+0x30>)
 80007f8:	2101      	movs	r1, #1
 80007fa:	4091      	lsls	r1, r2
 80007fc:	000a      	movs	r2, r1
 80007fe:	601a      	str	r2, [r3, #0]
  }
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}
 8000808:	e000e100 	.word	0xe000e100

0800080c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	0002      	movs	r2, r0
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b7f      	cmp	r3, #127	; 0x7f
 8000820:	d828      	bhi.n	8000874 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000822:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <__NVIC_SetPriority+0xd4>)
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b25b      	sxtb	r3, r3
 800082a:	089b      	lsrs	r3, r3, #2
 800082c:	33c0      	adds	r3, #192	; 0xc0
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	589b      	ldr	r3, [r3, r2]
 8000832:	1dfa      	adds	r2, r7, #7
 8000834:	7812      	ldrb	r2, [r2, #0]
 8000836:	0011      	movs	r1, r2
 8000838:	2203      	movs	r2, #3
 800083a:	400a      	ands	r2, r1
 800083c:	00d2      	lsls	r2, r2, #3
 800083e:	21ff      	movs	r1, #255	; 0xff
 8000840:	4091      	lsls	r1, r2
 8000842:	000a      	movs	r2, r1
 8000844:	43d2      	mvns	r2, r2
 8000846:	401a      	ands	r2, r3
 8000848:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	019b      	lsls	r3, r3, #6
 800084e:	22ff      	movs	r2, #255	; 0xff
 8000850:	401a      	ands	r2, r3
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	0018      	movs	r0, r3
 8000858:	2303      	movs	r3, #3
 800085a:	4003      	ands	r3, r0
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000860:	481f      	ldr	r0, [pc, #124]	; (80008e0 <__NVIC_SetPriority+0xd4>)
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b25b      	sxtb	r3, r3
 8000868:	089b      	lsrs	r3, r3, #2
 800086a:	430a      	orrs	r2, r1
 800086c:	33c0      	adds	r3, #192	; 0xc0
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000872:	e031      	b.n	80008d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <__NVIC_SetPriority+0xd8>)
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	0019      	movs	r1, r3
 800087c:	230f      	movs	r3, #15
 800087e:	400b      	ands	r3, r1
 8000880:	3b08      	subs	r3, #8
 8000882:	089b      	lsrs	r3, r3, #2
 8000884:	3306      	adds	r3, #6
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	18d3      	adds	r3, r2, r3
 800088a:	3304      	adds	r3, #4
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	1dfa      	adds	r2, r7, #7
 8000890:	7812      	ldrb	r2, [r2, #0]
 8000892:	0011      	movs	r1, r2
 8000894:	2203      	movs	r2, #3
 8000896:	400a      	ands	r2, r1
 8000898:	00d2      	lsls	r2, r2, #3
 800089a:	21ff      	movs	r1, #255	; 0xff
 800089c:	4091      	lsls	r1, r2
 800089e:	000a      	movs	r2, r1
 80008a0:	43d2      	mvns	r2, r2
 80008a2:	401a      	ands	r2, r3
 80008a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	019b      	lsls	r3, r3, #6
 80008aa:	22ff      	movs	r2, #255	; 0xff
 80008ac:	401a      	ands	r2, r3
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	0018      	movs	r0, r3
 80008b4:	2303      	movs	r3, #3
 80008b6:	4003      	ands	r3, r0
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <__NVIC_SetPriority+0xd8>)
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	001c      	movs	r4, r3
 80008c4:	230f      	movs	r3, #15
 80008c6:	4023      	ands	r3, r4
 80008c8:	3b08      	subs	r3, #8
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	430a      	orrs	r2, r1
 80008ce:	3306      	adds	r3, #6
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	18c3      	adds	r3, r0, r3
 80008d4:	3304      	adds	r3, #4
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b003      	add	sp, #12
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	045b      	lsls	r3, r3, #17
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d301      	bcc.n	8000900 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fc:	2301      	movs	r3, #1
 80008fe:	e010      	b.n	8000922 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <SysTick_Config+0x44>)
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	3a01      	subs	r2, #1
 8000906:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000908:	2301      	movs	r3, #1
 800090a:	425b      	negs	r3, r3
 800090c:	2103      	movs	r1, #3
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff ff7c 	bl	800080c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <SysTick_Config+0x44>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <SysTick_Config+0x44>)
 800091c:	2207      	movs	r2, #7
 800091e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000920:	2300      	movs	r3, #0
}
 8000922:	0018      	movs	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	e000e010 	.word	0xe000e010

08000930 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	210f      	movs	r1, #15
 800093c:	187b      	adds	r3, r7, r1
 800093e:	1c02      	adds	r2, r0, #0
 8000940:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	187b      	adds	r3, r7, r1
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b25b      	sxtb	r3, r3
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f7ff ff5d 	bl	800080c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b004      	add	sp, #16
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	0002      	movs	r2, r0
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b25b      	sxtb	r3, r3
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff ff33 	bl	80007d8 <__NVIC_EnableIRQ>
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b002      	add	sp, #8
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff ffaf 	bl	80008e8 <SysTick_Config>
 800098a:	0003      	movs	r3, r0
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	b002      	add	sp, #8
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d101      	bne.n	80009aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e036      	b.n	8000a18 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2221      	movs	r2, #33	; 0x21
 80009ae:	2102      	movs	r1, #2
 80009b0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <HAL_DMA_Init+0x8c>)
 80009be:	4013      	ands	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	69db      	ldr	r3, [r3, #28]
 80009e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 f9c4 	bl	8000d88 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2221      	movs	r2, #33	; 0x21
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b004      	add	sp, #16
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	ffffc00f 	.word	0xffffc00f

08000a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a32:	2317      	movs	r3, #23
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2220      	movs	r2, #32
 8000a3e:	5c9b      	ldrb	r3, [r3, r2]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d101      	bne.n	8000a48 <HAL_DMA_Start_IT+0x24>
 8000a44:	2302      	movs	r3, #2
 8000a46:	e04f      	b.n	8000ae8 <HAL_DMA_Start_IT+0xc4>
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2221      	movs	r2, #33	; 0x21
 8000a54:	5c9b      	ldrb	r3, [r3, r2]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d13a      	bne.n	8000ad2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2221      	movs	r2, #33	; 0x21
 8000a60:	2102      	movs	r1, #2
 8000a62:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2200      	movs	r2, #0
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2101      	movs	r1, #1
 8000a76:	438a      	bics	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	68b9      	ldr	r1, [r7, #8]
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f000 f954 	bl	8000d2e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d008      	beq.n	8000aa0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	210e      	movs	r1, #14
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	e00f      	b.n	8000ac0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	210a      	movs	r1, #10
 8000aac:	430a      	orrs	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2104      	movs	r1, #4
 8000abc:	438a      	bics	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2101      	movs	r1, #1
 8000acc:	430a      	orrs	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	e007      	b.n	8000ae2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2220      	movs	r2, #32
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ada:	2317      	movs	r3, #23
 8000adc:	18fb      	adds	r3, r7, r3
 8000ade:	2202      	movs	r2, #2
 8000ae0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000ae2:	2317      	movs	r3, #23
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	781b      	ldrb	r3, [r3, #0]
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b006      	add	sp, #24
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2221      	movs	r2, #33	; 0x21
 8000afc:	5c9b      	ldrb	r3, [r3, r2]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d008      	beq.n	8000b16 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2204      	movs	r2, #4
 8000b08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	2100      	movs	r1, #0
 8000b10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e020      	b.n	8000b58 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	210e      	movs	r1, #14
 8000b22:	438a      	bics	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2101      	movs	r1, #1
 8000b32:	438a      	bics	r2, r1
 8000b34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4091      	lsls	r1, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2221      	movs	r2, #33	; 0x21
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2220      	movs	r2, #32
 8000b52:	2100      	movs	r1, #0
 8000b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b68:	210f      	movs	r1, #15
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2221      	movs	r2, #33	; 0x21
 8000b74:	5c9b      	ldrb	r3, [r3, r2]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d006      	beq.n	8000b8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2204      	movs	r2, #4
 8000b80:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e028      	b.n	8000bdc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	210e      	movs	r1, #14
 8000b96:	438a      	bics	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	438a      	bics	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4091      	lsls	r1, r2
 8000bb6:	000a      	movs	r2, r1
 8000bb8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2221      	movs	r2, #33	; 0x21
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d004      	beq.n	8000bdc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	0010      	movs	r0, r2
 8000bda:	4798      	blx	r3
    }
  }
  return status;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	781b      	ldrb	r3, [r3, #0]
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	2204      	movs	r2, #4
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	d024      	beq.n	8000c5c <HAL_DMA_IRQHandler+0x72>
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	2204      	movs	r2, #4
 8000c16:	4013      	ands	r3, r2
 8000c18:	d020      	beq.n	8000c5c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2220      	movs	r2, #32
 8000c22:	4013      	ands	r3, r2
 8000c24:	d107      	bne.n	8000c36 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2104      	movs	r1, #4
 8000c32:	438a      	bics	r2, r1
 8000c34:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3e:	2104      	movs	r1, #4
 8000c40:	4091      	lsls	r1, r2
 8000c42:	000a      	movs	r2, r1
 8000c44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d100      	bne.n	8000c50 <HAL_DMA_IRQHandler+0x66>
 8000c4e:	e06a      	b.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	0010      	movs	r0, r2
 8000c58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000c5a:	e064      	b.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	2202      	movs	r2, #2
 8000c62:	409a      	lsls	r2, r3
 8000c64:	0013      	movs	r3, r2
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d02b      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0xda>
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4013      	ands	r3, r2
 8000c72:	d027      	beq.n	8000cc4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	d10b      	bne.n	8000c98 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	210a      	movs	r1, #10
 8000c8c:	438a      	bics	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2221      	movs	r2, #33	; 0x21
 8000c94:	2101      	movs	r1, #1
 8000c96:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	4091      	lsls	r1, r2
 8000ca4:	000a      	movs	r2, r1
 8000ca6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2220      	movs	r2, #32
 8000cac:	2100      	movs	r1, #0
 8000cae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d036      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	0010      	movs	r0, r2
 8000cc0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000cc2:	e030      	b.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	2208      	movs	r2, #8
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	d028      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	4013      	ands	r3, r2
 8000cda:	d024      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	210e      	movs	r1, #14
 8000ce8:	438a      	bics	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	000a      	movs	r2, r1
 8000cfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2221      	movs	r2, #33	; 0x21
 8000d06:	2101      	movs	r1, #1
 8000d08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2220      	movs	r2, #32
 8000d0e:	2100      	movs	r1, #0
 8000d10:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d005      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	0010      	movs	r0, r2
 8000d22:	4798      	blx	r3
    }
  }
}
 8000d24:	e7ff      	b.n	8000d26 <HAL_DMA_IRQHandler+0x13c>
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b004      	add	sp, #16
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d44:	2101      	movs	r1, #1
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b10      	cmp	r3, #16
 8000d5a:	d108      	bne.n	8000d6e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d6c:	e007      	b.n	8000d7e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	60da      	str	r2, [r3, #12]
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b004      	add	sp, #16
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <DMA_CalcBaseAndBitshift+0x30>)
 8000d96:	4694      	mov	ip, r2
 8000d98:	4463      	add	r3, ip
 8000d9a:	2114      	movs	r1, #20
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff f9bb 	bl	8000118 <__udivsi3>
 8000da2:	0003      	movs	r3, r0
 8000da4:	009a      	lsls	r2, r3, #2
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <DMA_CalcBaseAndBitshift+0x34>)
 8000dae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	bffdfff8 	.word	0xbffdfff8
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e14f      	b.n	8001070 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	000a      	movs	r2, r1
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d100      	bne.n	8000de8 <HAL_GPIO_Init+0x28>
 8000de6:	e140      	b.n	800106a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	4013      	ands	r3, r2
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d005      	beq.n	8000e00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d130      	bne.n	8000e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	0013      	movs	r3, r2
 8000e10:	43da      	mvns	r2, r3
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	409a      	lsls	r2, r3
 8000e22:	0013      	movs	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e36:	2201      	movs	r2, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	091b      	lsrs	r3, r3, #4
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2203      	movs	r2, #3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d017      	beq.n	8000e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d123      	bne.n	8000ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	58d3      	ldr	r3, [r2, r3]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	2207      	movs	r2, #7
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2107      	movs	r1, #7
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	0092      	lsls	r2, r2, #2
 8000eee:	6939      	ldr	r1, [r7, #16]
 8000ef0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2203      	movs	r2, #3
 8000f10:	401a      	ands	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	23c0      	movs	r3, #192	; 0xc0
 8000f2c:	029b      	lsls	r3, r3, #10
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d100      	bne.n	8000f34 <HAL_GPIO_Init+0x174>
 8000f32:	e09a      	b.n	800106a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f34:	4b54      	ldr	r3, [pc, #336]	; (8001088 <HAL_GPIO_Init+0x2c8>)
 8000f36:	699a      	ldr	r2, [r3, #24]
 8000f38:	4b53      	ldr	r3, [pc, #332]	; (8001088 <HAL_GPIO_Init+0x2c8>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	619a      	str	r2, [r3, #24]
 8000f40:	4b51      	ldr	r3, [pc, #324]	; (8001088 <HAL_GPIO_Init+0x2c8>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	2201      	movs	r2, #1
 8000f46:	4013      	ands	r3, r2
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f4c:	4a4f      	ldr	r2, [pc, #316]	; (800108c <HAL_GPIO_Init+0x2cc>)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	589b      	ldr	r3, [r3, r2]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	4013      	ands	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	220f      	movs	r2, #15
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	43da      	mvns	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	2390      	movs	r3, #144	; 0x90
 8000f74:	05db      	lsls	r3, r3, #23
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0x1e2>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a44      	ldr	r2, [pc, #272]	; (8001090 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00d      	beq.n	8000f9e <HAL_GPIO_Init+0x1de>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a43      	ldr	r2, [pc, #268]	; (8001094 <HAL_GPIO_Init+0x2d4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0x1da>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a42      	ldr	r2, [pc, #264]	; (8001098 <HAL_GPIO_Init+0x2d8>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_Init+0x1d6>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x1e4>
 8000f96:	2305      	movs	r3, #5
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x1e4>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x1e4>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x1e4>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	400a      	ands	r2, r1
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb4:	4935      	ldr	r1, [pc, #212]	; (800108c <HAL_GPIO_Init+0x2cc>)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc2:	4b36      	ldr	r3, [pc, #216]	; (800109c <HAL_GPIO_Init+0x2dc>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	035b      	lsls	r3, r3, #13
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_GPIO_Init+0x2dc>)
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fec:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_GPIO_Init+0x2dc>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43da      	mvns	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	039b      	lsls	r3, r3, #14
 8001004:	4013      	ands	r3, r2
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_GPIO_Init+0x2dc>)
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <HAL_GPIO_Init+0x2dc>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	029b      	lsls	r3, r3, #10
 800102e:	4013      	ands	r3, r2
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_GPIO_Init+0x2dc>)
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001040:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_GPIO_Init+0x2dc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43da      	mvns	r2, r3
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	025b      	lsls	r3, r3, #9
 8001058:	4013      	ands	r3, r2
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <HAL_GPIO_Init+0x2dc>)
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	40da      	lsrs	r2, r3
 8001078:	1e13      	subs	r3, r2, #0
 800107a:	d000      	beq.n	800107e <HAL_GPIO_Init+0x2be>
 800107c:	e6a8      	b.n	8000dd0 <HAL_GPIO_Init+0x10>
  } 
}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b006      	add	sp, #24
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000
 8001090:	48000400 	.word	0x48000400
 8001094:	48000800 	.word	0x48000800
 8001098:	48000c00 	.word	0x48000c00
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	0008      	movs	r0, r1
 80010aa:	0011      	movs	r1, r2
 80010ac:	1cbb      	adds	r3, r7, #2
 80010ae:	1c02      	adds	r2, r0, #0
 80010b0:	801a      	strh	r2, [r3, #0]
 80010b2:	1c7b      	adds	r3, r7, #1
 80010b4:	1c0a      	adds	r2, r1, #0
 80010b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b8:	1c7b      	adds	r3, r7, #1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c0:	1cbb      	adds	r3, r7, #2
 80010c2:	881a      	ldrh	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c8:	e003      	b.n	80010d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ca:	1cbb      	adds	r3, r7, #2
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	000a      	movs	r2, r1
 80010e4:	1cbb      	adds	r3, r7, #2
 80010e6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010ee:	1cbb      	adds	r3, r7, #2
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4013      	ands	r3, r2
 80010f6:	041a      	lsls	r2, r3, #16
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	1cb9      	adds	r1, r7, #2
 80010fe:	8809      	ldrh	r1, [r1, #0]
 8001100:	400b      	ands	r3, r1
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b004      	add	sp, #16
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e301      	b.n	8001726 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2201      	movs	r2, #1
 8001128:	4013      	ands	r3, r2
 800112a:	d100      	bne.n	800112e <HAL_RCC_OscConfig+0x1e>
 800112c:	e08d      	b.n	800124a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800112e:	4bc3      	ldr	r3, [pc, #780]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	220c      	movs	r2, #12
 8001134:	4013      	ands	r3, r2
 8001136:	2b04      	cmp	r3, #4
 8001138:	d00e      	beq.n	8001158 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800113a:	4bc0      	ldr	r3, [pc, #768]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	220c      	movs	r2, #12
 8001140:	4013      	ands	r3, r2
 8001142:	2b08      	cmp	r3, #8
 8001144:	d116      	bne.n	8001174 <HAL_RCC_OscConfig+0x64>
 8001146:	4bbd      	ldr	r3, [pc, #756]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	025b      	lsls	r3, r3, #9
 800114e:	401a      	ands	r2, r3
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	025b      	lsls	r3, r3, #9
 8001154:	429a      	cmp	r2, r3
 8001156:	d10d      	bne.n	8001174 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	4bb8      	ldr	r3, [pc, #736]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	029b      	lsls	r3, r3, #10
 8001160:	4013      	ands	r3, r2
 8001162:	d100      	bne.n	8001166 <HAL_RCC_OscConfig+0x56>
 8001164:	e070      	b.n	8001248 <HAL_RCC_OscConfig+0x138>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d000      	beq.n	8001170 <HAL_RCC_OscConfig+0x60>
 800116e:	e06b      	b.n	8001248 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e2d8      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d107      	bne.n	800118c <HAL_RCC_OscConfig+0x7c>
 800117c:	4baf      	ldr	r3, [pc, #700]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4bae      	ldr	r3, [pc, #696]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	0249      	lsls	r1, r1, #9
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e02f      	b.n	80011ec <HAL_RCC_OscConfig+0xdc>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d10c      	bne.n	80011ae <HAL_RCC_OscConfig+0x9e>
 8001194:	4ba9      	ldr	r3, [pc, #676]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4ba8      	ldr	r3, [pc, #672]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 800119a:	49a9      	ldr	r1, [pc, #676]	; (8001440 <HAL_RCC_OscConfig+0x330>)
 800119c:	400a      	ands	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	4ba6      	ldr	r3, [pc, #664]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4ba5      	ldr	r3, [pc, #660]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80011a6:	49a7      	ldr	r1, [pc, #668]	; (8001444 <HAL_RCC_OscConfig+0x334>)
 80011a8:	400a      	ands	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e01e      	b.n	80011ec <HAL_RCC_OscConfig+0xdc>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d10e      	bne.n	80011d4 <HAL_RCC_OscConfig+0xc4>
 80011b6:	4ba1      	ldr	r3, [pc, #644]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4ba0      	ldr	r3, [pc, #640]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	02c9      	lsls	r1, r1, #11
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	4b9d      	ldr	r3, [pc, #628]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b9c      	ldr	r3, [pc, #624]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80011ca:	2180      	movs	r1, #128	; 0x80
 80011cc:	0249      	lsls	r1, r1, #9
 80011ce:	430a      	orrs	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e00b      	b.n	80011ec <HAL_RCC_OscConfig+0xdc>
 80011d4:	4b99      	ldr	r3, [pc, #612]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b98      	ldr	r3, [pc, #608]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80011da:	4999      	ldr	r1, [pc, #612]	; (8001440 <HAL_RCC_OscConfig+0x330>)
 80011dc:	400a      	ands	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	4b96      	ldr	r3, [pc, #600]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b95      	ldr	r3, [pc, #596]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80011e6:	4997      	ldr	r1, [pc, #604]	; (8001444 <HAL_RCC_OscConfig+0x334>)
 80011e8:	400a      	ands	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d014      	beq.n	800121e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fae6 	bl	80007c4 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fe:	f7ff fae1 	bl	80007c4 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b64      	cmp	r3, #100	; 0x64
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e28a      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001210:	4b8a      	ldr	r3, [pc, #552]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	029b      	lsls	r3, r3, #10
 8001218:	4013      	ands	r3, r2
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0xee>
 800121c:	e015      	b.n	800124a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121e:	f7ff fad1 	bl	80007c4 <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff facc 	bl	80007c4 <HAL_GetTick>
 800122c:	0002      	movs	r2, r0
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e275      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	4b80      	ldr	r3, [pc, #512]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	029b      	lsls	r3, r3, #10
 8001242:	4013      	ands	r3, r2
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x118>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2202      	movs	r2, #2
 8001250:	4013      	ands	r3, r2
 8001252:	d100      	bne.n	8001256 <HAL_RCC_OscConfig+0x146>
 8001254:	e069      	b.n	800132a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001256:	4b79      	ldr	r3, [pc, #484]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	220c      	movs	r2, #12
 800125c:	4013      	ands	r3, r2
 800125e:	d00b      	beq.n	8001278 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001260:	4b76      	ldr	r3, [pc, #472]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	220c      	movs	r2, #12
 8001266:	4013      	ands	r3, r2
 8001268:	2b08      	cmp	r3, #8
 800126a:	d11c      	bne.n	80012a6 <HAL_RCC_OscConfig+0x196>
 800126c:	4b73      	ldr	r3, [pc, #460]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	025b      	lsls	r3, r3, #9
 8001274:	4013      	ands	r3, r2
 8001276:	d116      	bne.n	80012a6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001278:	4b70      	ldr	r3, [pc, #448]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2202      	movs	r2, #2
 800127e:	4013      	ands	r3, r2
 8001280:	d005      	beq.n	800128e <HAL_RCC_OscConfig+0x17e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d001      	beq.n	800128e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e24b      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128e:	4b6b      	ldr	r3, [pc, #428]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	22f8      	movs	r2, #248	; 0xf8
 8001294:	4393      	bics	r3, r2
 8001296:	0019      	movs	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	00da      	lsls	r2, r3, #3
 800129e:	4b67      	ldr	r3, [pc, #412]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a4:	e041      	b.n	800132a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d024      	beq.n	80012f8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ae:	4b63      	ldr	r3, [pc, #396]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b62      	ldr	r3, [pc, #392]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff fa83 	bl	80007c4 <HAL_GetTick>
 80012be:	0003      	movs	r3, r0
 80012c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c4:	f7ff fa7e 	bl	80007c4 <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e227      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d6:	4b59      	ldr	r3, [pc, #356]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2202      	movs	r2, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	d0f1      	beq.n	80012c4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e0:	4b56      	ldr	r3, [pc, #344]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	22f8      	movs	r2, #248	; 0xf8
 80012e6:	4393      	bics	r3, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	00da      	lsls	r2, r3, #3
 80012f0:	4b52      	ldr	r3, [pc, #328]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80012f2:	430a      	orrs	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e018      	b.n	800132a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f8:	4b50      	ldr	r3, [pc, #320]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b4f      	ldr	r3, [pc, #316]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80012fe:	2101      	movs	r1, #1
 8001300:	438a      	bics	r2, r1
 8001302:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fa5e 	bl	80007c4 <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff fa59 	bl	80007c4 <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e202      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001320:	4b46      	ldr	r3, [pc, #280]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2202      	movs	r2, #2
 8001326:	4013      	ands	r3, r2
 8001328:	d1f1      	bne.n	800130e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2208      	movs	r2, #8
 8001330:	4013      	ands	r3, r2
 8001332:	d036      	beq.n	80013a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d019      	beq.n	8001370 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133c:	4b3f      	ldr	r3, [pc, #252]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 800133e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001340:	4b3e      	ldr	r3, [pc, #248]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001342:	2101      	movs	r1, #1
 8001344:	430a      	orrs	r2, r1
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001348:	f7ff fa3c 	bl	80007c4 <HAL_GetTick>
 800134c:	0003      	movs	r3, r0
 800134e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001352:	f7ff fa37 	bl	80007c4 <HAL_GetTick>
 8001356:	0002      	movs	r2, r0
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e1e0      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001364:	4b35      	ldr	r3, [pc, #212]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	2202      	movs	r2, #2
 800136a:	4013      	ands	r3, r2
 800136c:	d0f1      	beq.n	8001352 <HAL_RCC_OscConfig+0x242>
 800136e:	e018      	b.n	80013a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001370:	4b32      	ldr	r3, [pc, #200]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001376:	2101      	movs	r1, #1
 8001378:	438a      	bics	r2, r1
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fa22 	bl	80007c4 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff fa1d 	bl	80007c4 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1c6      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	2202      	movs	r2, #2
 800139e:	4013      	ands	r3, r2
 80013a0:	d1f1      	bne.n	8001386 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2204      	movs	r2, #4
 80013a8:	4013      	ands	r3, r2
 80013aa:	d100      	bne.n	80013ae <HAL_RCC_OscConfig+0x29e>
 80013ac:	e0b4      	b.n	8001518 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ae:	201f      	movs	r0, #31
 80013b0:	183b      	adds	r3, r7, r0
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b6:	4b21      	ldr	r3, [pc, #132]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80013b8:	69da      	ldr	r2, [r3, #28]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	055b      	lsls	r3, r3, #21
 80013be:	4013      	ands	r3, r2
 80013c0:	d110      	bne.n	80013e4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80013c4:	69da      	ldr	r2, [r3, #28]
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80013c8:	2180      	movs	r1, #128	; 0x80
 80013ca:	0549      	lsls	r1, r1, #21
 80013cc:	430a      	orrs	r2, r1
 80013ce:	61da      	str	r2, [r3, #28]
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 80013d2:	69da      	ldr	r2, [r3, #28]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	055b      	lsls	r3, r3, #21
 80013d8:	4013      	ands	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013de:	183b      	adds	r3, r7, r0
 80013e0:	2201      	movs	r2, #1
 80013e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_RCC_OscConfig+0x338>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4013      	ands	r3, r2
 80013ee:	d11a      	bne.n	8001426 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_RCC_OscConfig+0x338>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_RCC_OscConfig+0x338>)
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	0049      	lsls	r1, r1, #1
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fe:	f7ff f9e1 	bl	80007c4 <HAL_GetTick>
 8001402:	0003      	movs	r3, r0
 8001404:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001408:	f7ff f9dc 	bl	80007c4 <HAL_GetTick>
 800140c:	0002      	movs	r2, r0
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e185      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_RCC_OscConfig+0x338>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4013      	ands	r3, r2
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d10e      	bne.n	800144c <HAL_RCC_OscConfig+0x33c>
 800142e:	4b03      	ldr	r3, [pc, #12]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001430:	6a1a      	ldr	r2, [r3, #32]
 8001432:	4b02      	ldr	r3, [pc, #8]	; (800143c <HAL_RCC_OscConfig+0x32c>)
 8001434:	2101      	movs	r1, #1
 8001436:	430a      	orrs	r2, r1
 8001438:	621a      	str	r2, [r3, #32]
 800143a:	e035      	b.n	80014a8 <HAL_RCC_OscConfig+0x398>
 800143c:	40021000 	.word	0x40021000
 8001440:	fffeffff 	.word	0xfffeffff
 8001444:	fffbffff 	.word	0xfffbffff
 8001448:	40007000 	.word	0x40007000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10c      	bne.n	800146e <HAL_RCC_OscConfig+0x35e>
 8001454:	4bb6      	ldr	r3, [pc, #728]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	4bb5      	ldr	r3, [pc, #724]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800145a:	2101      	movs	r1, #1
 800145c:	438a      	bics	r2, r1
 800145e:	621a      	str	r2, [r3, #32]
 8001460:	4bb3      	ldr	r3, [pc, #716]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001462:	6a1a      	ldr	r2, [r3, #32]
 8001464:	4bb2      	ldr	r3, [pc, #712]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001466:	2104      	movs	r1, #4
 8001468:	438a      	bics	r2, r1
 800146a:	621a      	str	r2, [r3, #32]
 800146c:	e01c      	b.n	80014a8 <HAL_RCC_OscConfig+0x398>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x380>
 8001476:	4bae      	ldr	r3, [pc, #696]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001478:	6a1a      	ldr	r2, [r3, #32]
 800147a:	4bad      	ldr	r3, [pc, #692]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800147c:	2104      	movs	r1, #4
 800147e:	430a      	orrs	r2, r1
 8001480:	621a      	str	r2, [r3, #32]
 8001482:	4bab      	ldr	r3, [pc, #684]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001484:	6a1a      	ldr	r2, [r3, #32]
 8001486:	4baa      	ldr	r3, [pc, #680]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001488:	2101      	movs	r1, #1
 800148a:	430a      	orrs	r2, r1
 800148c:	621a      	str	r2, [r3, #32]
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0x398>
 8001490:	4ba7      	ldr	r3, [pc, #668]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001492:	6a1a      	ldr	r2, [r3, #32]
 8001494:	4ba6      	ldr	r3, [pc, #664]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001496:	2101      	movs	r1, #1
 8001498:	438a      	bics	r2, r1
 800149a:	621a      	str	r2, [r3, #32]
 800149c:	4ba4      	ldr	r3, [pc, #656]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	4ba3      	ldr	r3, [pc, #652]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80014a2:	2104      	movs	r1, #4
 80014a4:	438a      	bics	r2, r1
 80014a6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d014      	beq.n	80014da <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b0:	f7ff f988 	bl	80007c4 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b8:	e009      	b.n	80014ce <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ba:	f7ff f983 	bl	80007c4 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	4a9b      	ldr	r2, [pc, #620]	; (8001734 <HAL_RCC_OscConfig+0x624>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e12b      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ce:	4b98      	ldr	r3, [pc, #608]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	2202      	movs	r2, #2
 80014d4:	4013      	ands	r3, r2
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x3aa>
 80014d8:	e013      	b.n	8001502 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff f973 	bl	80007c4 <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e2:	e009      	b.n	80014f8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f7ff f96e 	bl	80007c4 <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	4a91      	ldr	r2, [pc, #580]	; (8001734 <HAL_RCC_OscConfig+0x624>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e116      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f8:	4b8d      	ldr	r3, [pc, #564]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	2202      	movs	r2, #2
 80014fe:	4013      	ands	r3, r2
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001502:	231f      	movs	r3, #31
 8001504:	18fb      	adds	r3, r7, r3
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150c:	4b88      	ldr	r3, [pc, #544]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800150e:	69da      	ldr	r2, [r3, #28]
 8001510:	4b87      	ldr	r3, [pc, #540]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001512:	4989      	ldr	r1, [pc, #548]	; (8001738 <HAL_RCC_OscConfig+0x628>)
 8001514:	400a      	ands	r2, r1
 8001516:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2210      	movs	r2, #16
 800151e:	4013      	ands	r3, r2
 8001520:	d063      	beq.n	80015ea <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d12a      	bne.n	8001580 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800152a:	4b81      	ldr	r3, [pc, #516]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800152c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800152e:	4b80      	ldr	r3, [pc, #512]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001530:	2104      	movs	r1, #4
 8001532:	430a      	orrs	r2, r1
 8001534:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001536:	4b7e      	ldr	r3, [pc, #504]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800153a:	4b7d      	ldr	r3, [pc, #500]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800153c:	2101      	movs	r1, #1
 800153e:	430a      	orrs	r2, r1
 8001540:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff f93f 	bl	80007c4 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800154c:	f7ff f93a 	bl	80007c4 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e0e3      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800155e:	4b74      	ldr	r3, [pc, #464]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001562:	2202      	movs	r2, #2
 8001564:	4013      	ands	r3, r2
 8001566:	d0f1      	beq.n	800154c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001568:	4b71      	ldr	r3, [pc, #452]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156c:	22f8      	movs	r2, #248	; 0xf8
 800156e:	4393      	bics	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	00da      	lsls	r2, r3, #3
 8001578:	4b6d      	ldr	r3, [pc, #436]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800157a:	430a      	orrs	r2, r1
 800157c:	635a      	str	r2, [r3, #52]	; 0x34
 800157e:	e034      	b.n	80015ea <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	3305      	adds	r3, #5
 8001586:	d111      	bne.n	80015ac <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001588:	4b69      	ldr	r3, [pc, #420]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800158a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800158e:	2104      	movs	r1, #4
 8001590:	438a      	bics	r2, r1
 8001592:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001594:	4b66      	ldr	r3, [pc, #408]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001598:	22f8      	movs	r2, #248	; 0xf8
 800159a:	4393      	bics	r3, r2
 800159c:	0019      	movs	r1, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	00da      	lsls	r2, r3, #3
 80015a4:	4b62      	ldr	r3, [pc, #392]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80015a6:	430a      	orrs	r2, r1
 80015a8:	635a      	str	r2, [r3, #52]	; 0x34
 80015aa:	e01e      	b.n	80015ea <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015ac:	4b60      	ldr	r3, [pc, #384]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80015ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b0:	4b5f      	ldr	r3, [pc, #380]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80015b2:	2104      	movs	r1, #4
 80015b4:	430a      	orrs	r2, r1
 80015b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80015b8:	4b5d      	ldr	r3, [pc, #372]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80015ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015bc:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80015be:	2101      	movs	r1, #1
 80015c0:	438a      	bics	r2, r1
 80015c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c4:	f7ff f8fe 	bl	80007c4 <HAL_GetTick>
 80015c8:	0003      	movs	r3, r0
 80015ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015ce:	f7ff f8f9 	bl	80007c4 <HAL_GetTick>
 80015d2:	0002      	movs	r2, r0
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e0a2      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80015e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e4:	2202      	movs	r2, #2
 80015e6:	4013      	ands	r3, r2
 80015e8:	d1f1      	bne.n	80015ce <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d100      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4e4>
 80015f2:	e097      	b.n	8001724 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f4:	4b4e      	ldr	r3, [pc, #312]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	220c      	movs	r2, #12
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d100      	bne.n	8001602 <HAL_RCC_OscConfig+0x4f2>
 8001600:	e06b      	b.n	80016da <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d14c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160a:	4b49      	ldr	r3, [pc, #292]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b48      	ldr	r3, [pc, #288]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001610:	494a      	ldr	r1, [pc, #296]	; (800173c <HAL_RCC_OscConfig+0x62c>)
 8001612:	400a      	ands	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff f8d5 	bl	80007c4 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff f8d0 	bl	80007c4 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e079      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001632:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	049b      	lsls	r3, r3, #18
 800163a:	4013      	ands	r3, r2
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163e:	4b3c      	ldr	r3, [pc, #240]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	220f      	movs	r2, #15
 8001644:	4393      	bics	r3, r2
 8001646:	0019      	movs	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800164c:	4b38      	ldr	r3, [pc, #224]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800164e:	430a      	orrs	r2, r1
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a3a      	ldr	r2, [pc, #232]	; (8001740 <HAL_RCC_OscConfig+0x630>)
 8001658:	4013      	ands	r3, r2
 800165a:	0019      	movs	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	431a      	orrs	r2, r3
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001668:	430a      	orrs	r2, r1
 800166a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001672:	2180      	movs	r1, #128	; 0x80
 8001674:	0449      	lsls	r1, r1, #17
 8001676:	430a      	orrs	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff f8a3 	bl	80007c4 <HAL_GetTick>
 800167e:	0003      	movs	r3, r0
 8001680:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff f89e 	bl	80007c4 <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e047      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001696:	4b26      	ldr	r3, [pc, #152]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	049b      	lsls	r3, r3, #18
 800169e:	4013      	ands	r3, r2
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x574>
 80016a2:	e03f      	b.n	8001724 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80016aa:	4924      	ldr	r1, [pc, #144]	; (800173c <HAL_RCC_OscConfig+0x62c>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff f888 	bl	80007c4 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff f883 	bl	80007c4 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e02c      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	049b      	lsls	r3, r3, #18
 80016d4:	4013      	ands	r3, r2
 80016d6:	d1f0      	bne.n	80016ba <HAL_RCC_OscConfig+0x5aa>
 80016d8:	e024      	b.n	8001724 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e01f      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_RCC_OscConfig+0x620>)
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	025b      	lsls	r3, r3, #9
 80016f8:	401a      	ands	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	429a      	cmp	r2, r3
 8001700:	d10e      	bne.n	8001720 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	220f      	movs	r2, #15
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	23f0      	movs	r3, #240	; 0xf0
 8001714:	039b      	lsls	r3, r3, #14
 8001716:	401a      	ands	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b008      	add	sp, #32
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	40021000 	.word	0x40021000
 8001734:	00001388 	.word	0x00001388
 8001738:	efffffff 	.word	0xefffffff
 800173c:	feffffff 	.word	0xfeffffff
 8001740:	ffc2ffff 	.word	0xffc2ffff

08001744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0b3      	b.n	80018c0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <HAL_RCC_ClockConfig+0x184>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2201      	movs	r2, #1
 800175e:	4013      	ands	r3, r2
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d911      	bls.n	800178a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b58      	ldr	r3, [pc, #352]	; (80018c8 <HAL_RCC_ClockConfig+0x184>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2201      	movs	r2, #1
 800176c:	4393      	bics	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <HAL_RCC_ClockConfig+0x184>)
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_ClockConfig+0x184>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d001      	beq.n	800178a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e09a      	b.n	80018c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2202      	movs	r2, #2
 8001790:	4013      	ands	r3, r2
 8001792:	d015      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2204      	movs	r2, #4
 800179a:	4013      	ands	r3, r2
 800179c:	d006      	beq.n	80017ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800179e:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	4b4a      	ldr	r3, [pc, #296]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 80017a4:	21e0      	movs	r1, #224	; 0xe0
 80017a6:	00c9      	lsls	r1, r1, #3
 80017a8:	430a      	orrs	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	22f0      	movs	r2, #240	; 0xf0
 80017b2:	4393      	bics	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	4b44      	ldr	r3, [pc, #272]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 80017bc:	430a      	orrs	r2, r1
 80017be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	d040      	beq.n	800184c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b3e      	ldr	r3, [pc, #248]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	029b      	lsls	r3, r3, #10
 80017da:	4013      	ands	r3, r2
 80017dc:	d114      	bne.n	8001808 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e06e      	b.n	80018c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b38      	ldr	r3, [pc, #224]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	049b      	lsls	r3, r3, #18
 80017f2:	4013      	ands	r3, r2
 80017f4:	d108      	bne.n	8001808 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e062      	b.n	80018c0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2202      	movs	r2, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e05b      	b.n	80018c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001808:	4b30      	ldr	r3, [pc, #192]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2203      	movs	r2, #3
 800180e:	4393      	bics	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 8001818:	430a      	orrs	r2, r1
 800181a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7fe ffd2 	bl	80007c4 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001824:	e009      	b.n	800183a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001826:	f7fe ffcd 	bl	80007c4 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <HAL_RCC_ClockConfig+0x18c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e042      	b.n	80018c0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	220c      	movs	r2, #12
 8001840:	401a      	ands	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1ec      	bne.n	8001826 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_RCC_ClockConfig+0x184>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2201      	movs	r2, #1
 8001852:	4013      	ands	r3, r2
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d211      	bcs.n	800187e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_RCC_ClockConfig+0x184>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2201      	movs	r2, #1
 8001860:	4393      	bics	r3, r2
 8001862:	0019      	movs	r1, r3
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_RCC_ClockConfig+0x184>)
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_RCC_ClockConfig+0x184>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d001      	beq.n	800187e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e020      	b.n	80018c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2204      	movs	r2, #4
 8001884:	4013      	ands	r3, r2
 8001886:	d009      	beq.n	800189c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_RCC_ClockConfig+0x190>)
 800188e:	4013      	ands	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800189c:	f000 f820 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 80018a0:	0001      	movs	r1, r0
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_RCC_ClockConfig+0x188>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	220f      	movs	r2, #15
 80018aa:	4013      	ands	r3, r2
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x194>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	000a      	movs	r2, r1
 80018b2:	40da      	lsrs	r2, r3
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x198>)
 80018b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7fe ff3d 	bl	8000738 <HAL_InitTick>
  
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b004      	add	sp, #16
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40022000 	.word	0x40022000
 80018cc:	40021000 	.word	0x40021000
 80018d0:	00001388 	.word	0x00001388
 80018d4:	fffff8ff 	.word	0xfffff8ff
 80018d8:	08002c4c 	.word	0x08002c4c
 80018dc:	20000020 	.word	0x20000020

080018e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_RCC_GetSysClockFreq+0x9c>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	220c      	movs	r2, #12
 8001904:	4013      	ands	r3, r2
 8001906:	2b04      	cmp	r3, #4
 8001908:	d002      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x30>
 800190a:	2b08      	cmp	r3, #8
 800190c:	d003      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0x36>
 800190e:	e02c      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001912:	613b      	str	r3, [r7, #16]
      break;
 8001914:	e02c      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	0c9b      	lsrs	r3, r3, #18
 800191a:	220f      	movs	r2, #15
 800191c:	4013      	ands	r3, r2
 800191e:	4a19      	ldr	r2, [pc, #100]	; (8001984 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001920:	5cd3      	ldrb	r3, [r2, r3]
 8001922:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	220f      	movs	r2, #15
 800192a:	4013      	ands	r3, r2
 800192c:	4a16      	ldr	r2, [pc, #88]	; (8001988 <HAL_RCC_GetSysClockFreq+0xa8>)
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	4013      	ands	r3, r2
 800193a:	d009      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	4810      	ldr	r0, [pc, #64]	; (8001980 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001940:	f7fe fbea 	bl	8000118 <__udivsi3>
 8001944:	0003      	movs	r3, r0
 8001946:	001a      	movs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4353      	muls	r3, r2
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e009      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	000a      	movs	r2, r1
 8001954:	0152      	lsls	r2, r2, #5
 8001956:	1a52      	subs	r2, r2, r1
 8001958:	0193      	lsls	r3, r2, #6
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	185b      	adds	r3, r3, r1
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	613b      	str	r3, [r7, #16]
      break;
 8001968:	e002      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetSysClockFreq+0xa0>)
 800196c:	613b      	str	r3, [r7, #16]
      break;
 800196e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001970:	693b      	ldr	r3, [r7, #16]
}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	b006      	add	sp, #24
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	40021000 	.word	0x40021000
 8001980:	007a1200 	.word	0x007a1200
 8001984:	08002c64 	.word	0x08002c64
 8001988:	08002c74 	.word	0x08002c74

0800198c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001990:	4b02      	ldr	r3, [pc, #8]	; (800199c <HAL_RCC_GetHCLKFreq+0x10>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	20000020 	.word	0x20000020

080019a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019a4:	f7ff fff2 	bl	800198c <HAL_RCC_GetHCLKFreq>
 80019a8:	0001      	movs	r1, r0
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	2207      	movs	r2, #7
 80019b2:	4013      	ands	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019b6:	5cd3      	ldrb	r3, [r2, r3]
 80019b8:	40d9      	lsrs	r1, r3
 80019ba:	000b      	movs	r3, r1
}    
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	40021000 	.word	0x40021000
 80019c8:	08002c5c 	.word	0x08002c5c

080019cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	025b      	lsls	r3, r3, #9
 80019e4:	4013      	ands	r3, r2
 80019e6:	d100      	bne.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019e8:	e08e      	b.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	2017      	movs	r0, #23
 80019ec:	183b      	adds	r3, r7, r0
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b57      	ldr	r3, [pc, #348]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	055b      	lsls	r3, r3, #21
 80019fa:	4013      	ands	r3, r2
 80019fc:	d110      	bne.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b54      	ldr	r3, [pc, #336]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	0549      	lsls	r1, r1, #21
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	61da      	str	r2, [r3, #28]
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a0e:	69da      	ldr	r2, [r3, #28]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	055b      	lsls	r3, r3, #21
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1a:	183b      	adds	r3, r7, r0
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d11a      	bne.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2c:	4b49      	ldr	r3, [pc, #292]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b48      	ldr	r3, [pc, #288]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	0049      	lsls	r1, r1, #1
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3a:	f7fe fec3 	bl	80007c4 <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	e008      	b.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a44:	f7fe febe 	bl	80007c4 <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e077      	b.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a62:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	23c0      	movs	r3, #192	; 0xc0
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d034      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	23c0      	movs	r3, #192	; 0xc0
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d02c      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a84:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4a33      	ldr	r2, [pc, #204]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a8e:	4b30      	ldr	r3, [pc, #192]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a90:	6a1a      	ldr	r2, [r3, #32]
 8001a92:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a94:	2180      	movs	r1, #128	; 0x80
 8001a96:	0249      	lsls	r1, r1, #9
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a9c:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aa2:	492e      	ldr	r1, [pc, #184]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7fe fe85 	bl	80007c4 <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abe:	e009      	b.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac0:	f7fe fe80 	bl	80007c4 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	4a25      	ldr	r2, [pc, #148]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e038      	b.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	4013      	ands	r3, r2
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aee:	430a      	orrs	r2, r1
 8001af0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001af2:	2317      	movs	r3, #23
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d105      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001afe:	69da      	ldr	r2, [r3, #28]
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b02:	4918      	ldr	r1, [pc, #96]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001b04:	400a      	ands	r2, r1
 8001b06:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d009      	beq.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	2203      	movs	r2, #3
 8001b18:	4393      	bics	r3, r2
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b22:	430a      	orrs	r2, r1
 8001b24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d009      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	2210      	movs	r2, #16
 8001b36:	4393      	bics	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b40:	430a      	orrs	r2, r1
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b006      	add	sp, #24
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40007000 	.word	0x40007000
 8001b58:	fffffcff 	.word	0xfffffcff
 8001b5c:	fffeffff 	.word	0xfffeffff
 8001b60:	00001388 	.word	0x00001388
 8001b64:	efffffff 	.word	0xefffffff

08001b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e044      	b.n	8001c04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d107      	bne.n	8001b92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2278      	movs	r2, #120	; 0x78
 8001b86:	2100      	movs	r1, #0
 8001b88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7fe fcc7 	bl	8000520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2224      	movs	r2, #36	; 0x24
 8001b96:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f000 fce0 	bl	8002578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 fb9c 	bl	80022f8 <UART_SetConfig>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e01c      	b.n	8001c04 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	490d      	ldr	r1, [pc, #52]	; (8001c0c <HAL_UART_Init+0xa4>)
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2108      	movs	r1, #8
 8001be6:	438a      	bics	r2, r1
 8001be8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f000 fd6f 	bl	80026e0 <UART_CheckIdleState>
 8001c02:	0003      	movs	r3, r0
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	fffff7ff 	.word	0xfffff7ff

08001c10 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	1dbb      	adds	r3, r7, #6
 8001c1c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d000      	beq.n	8001c28 <HAL_UART_Transmit_DMA+0x18>
 8001c26:	e077      	b.n	8001d18 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_UART_Transmit_DMA+0x26>
 8001c2e:	1dbb      	adds	r3, r7, #6
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e06f      	b.n	8001d1a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	015b      	lsls	r3, r3, #5
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d109      	bne.n	8001c5a <HAL_UART_Transmit_DMA+0x4a>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d105      	bne.n	8001c5a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	d001      	beq.n	8001c5a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e05f      	b.n	8001d1a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1dba      	adds	r2, r7, #6
 8001c64:	2150      	movs	r1, #80	; 0x50
 8001c66:	8812      	ldrh	r2, [r2, #0]
 8001c68:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1dba      	adds	r2, r7, #6
 8001c6e:	2152      	movs	r1, #82	; 0x52
 8001c70:	8812      	ldrh	r2, [r2, #0]
 8001c72:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2284      	movs	r2, #132	; 0x84
 8001c78:	2100      	movs	r1, #0
 8001c7a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2221      	movs	r2, #33	; 0x21
 8001c80:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d027      	beq.n	8001cda <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8e:	4a25      	ldr	r2, [pc, #148]	; (8001d24 <HAL_UART_Transmit_DMA+0x114>)
 8001c90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a24      	ldr	r2, [pc, #144]	; (8001d28 <HAL_UART_Transmit_DMA+0x118>)
 8001c98:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <HAL_UART_Transmit_DMA+0x11c>)
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3328      	adds	r3, #40	; 0x28
 8001cba:	001a      	movs	r2, r3
 8001cbc:	1dbb      	adds	r3, r7, #6
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	f7fe feb0 	bl	8000a24 <HAL_DMA_Start_IT>
 8001cc4:	1e03      	subs	r3, r0, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2284      	movs	r2, #132	; 0x84
 8001ccc:	2110      	movs	r1, #16
 8001cce:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e01f      	b.n	8001d1a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2240      	movs	r2, #64	; 0x40
 8001ce0:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ce6:	613b      	str	r3, [r7, #16]
  return(result);
 8001ce8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	2301      	movs	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f383 8810 	msr	PRIMASK, r3
}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2180      	movs	r1, #128	; 0x80
 8001d04:	430a      	orrs	r2, r1
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	f383 8810 	msr	PRIMASK, r3
}
 8001d12:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e000      	b.n	8001d1a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8001d18:	2302      	movs	r3, #2
  }
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b008      	add	sp, #32
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	08002a21 	.word	0x08002a21
 8001d28:	08002ab5 	.word	0x08002ab5
 8001d2c:	08002ad3 	.word	0x08002ad3

08001d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b0ab      	sub	sp, #172	; 0xac
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	22a4      	movs	r2, #164	; 0xa4
 8001d40:	18b9      	adds	r1, r7, r2
 8001d42:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	20a0      	movs	r0, #160	; 0xa0
 8001d4c:	1839      	adds	r1, r7, r0
 8001d4e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	219c      	movs	r1, #156	; 0x9c
 8001d58:	1879      	adds	r1, r7, r1
 8001d5a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001d5c:	0011      	movs	r1, r2
 8001d5e:	18bb      	adds	r3, r7, r2
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a99      	ldr	r2, [pc, #612]	; (8001fc8 <HAL_UART_IRQHandler+0x298>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	2298      	movs	r2, #152	; 0x98
 8001d68:	18bc      	adds	r4, r7, r2
 8001d6a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001d6c:	18bb      	adds	r3, r7, r2
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d114      	bne.n	8001d9e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	d00f      	beq.n	8001d9e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d7e:	183b      	adds	r3, r7, r0
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2220      	movs	r2, #32
 8001d84:	4013      	ands	r3, r2
 8001d86:	d00a      	beq.n	8001d9e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d100      	bne.n	8001d92 <HAL_UART_IRQHandler+0x62>
 8001d90:	e286      	b.n	80022a0 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	0010      	movs	r0, r2
 8001d9a:	4798      	blx	r3
      }
      return;
 8001d9c:	e280      	b.n	80022a0 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001d9e:	2398      	movs	r3, #152	; 0x98
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d100      	bne.n	8001daa <HAL_UART_IRQHandler+0x7a>
 8001da8:	e114      	b.n	8001fd4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001daa:	239c      	movs	r3, #156	; 0x9c
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2201      	movs	r2, #1
 8001db2:	4013      	ands	r3, r2
 8001db4:	d106      	bne.n	8001dc4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001db6:	23a0      	movs	r3, #160	; 0xa0
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a83      	ldr	r2, [pc, #524]	; (8001fcc <HAL_UART_IRQHandler+0x29c>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d100      	bne.n	8001dc4 <HAL_UART_IRQHandler+0x94>
 8001dc2:	e107      	b.n	8001fd4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001dc4:	23a4      	movs	r3, #164	; 0xa4
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d012      	beq.n	8001df6 <HAL_UART_IRQHandler+0xc6>
 8001dd0:	23a0      	movs	r3, #160	; 0xa0
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d00b      	beq.n	8001df6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2201      	movs	r2, #1
 8001de4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2284      	movs	r2, #132	; 0x84
 8001dea:	589b      	ldr	r3, [r3, r2]
 8001dec:	2201      	movs	r2, #1
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2184      	movs	r1, #132	; 0x84
 8001df4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001df6:	23a4      	movs	r3, #164	; 0xa4
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d011      	beq.n	8001e26 <HAL_UART_IRQHandler+0xf6>
 8001e02:	239c      	movs	r3, #156	; 0x9c
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d00b      	beq.n	8001e26 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2202      	movs	r2, #2
 8001e14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2284      	movs	r2, #132	; 0x84
 8001e1a:	589b      	ldr	r3, [r3, r2]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2184      	movs	r1, #132	; 0x84
 8001e24:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e26:	23a4      	movs	r3, #164	; 0xa4
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d011      	beq.n	8001e56 <HAL_UART_IRQHandler+0x126>
 8001e32:	239c      	movs	r3, #156	; 0x9c
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d00b      	beq.n	8001e56 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2204      	movs	r2, #4
 8001e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2284      	movs	r2, #132	; 0x84
 8001e4a:	589b      	ldr	r3, [r3, r2]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2184      	movs	r1, #132	; 0x84
 8001e54:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001e56:	23a4      	movs	r3, #164	; 0xa4
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d017      	beq.n	8001e92 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e62:	23a0      	movs	r3, #160	; 0xa0
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d105      	bne.n	8001e7a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001e6e:	239c      	movs	r3, #156	; 0x9c
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2201      	movs	r2, #1
 8001e76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001e78:	d00b      	beq.n	8001e92 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2208      	movs	r2, #8
 8001e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2284      	movs	r2, #132	; 0x84
 8001e86:	589b      	ldr	r3, [r3, r2]
 8001e88:	2208      	movs	r2, #8
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2184      	movs	r1, #132	; 0x84
 8001e90:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001e92:	23a4      	movs	r3, #164	; 0xa4
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_UART_IRQHandler+0x198>
 8001ea0:	23a0      	movs	r3, #160	; 0xa0
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	04db      	lsls	r3, r3, #19
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d00c      	beq.n	8001ec8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2284      	movs	r2, #132	; 0x84
 8001ebc:	589b      	ldr	r3, [r3, r2]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2184      	movs	r1, #132	; 0x84
 8001ec6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2284      	movs	r2, #132	; 0x84
 8001ecc:	589b      	ldr	r3, [r3, r2]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d100      	bne.n	8001ed4 <HAL_UART_IRQHandler+0x1a4>
 8001ed2:	e1e7      	b.n	80022a4 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001ed4:	23a4      	movs	r3, #164	; 0xa4
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2220      	movs	r2, #32
 8001edc:	4013      	ands	r3, r2
 8001ede:	d00e      	beq.n	8001efe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001ee0:	23a0      	movs	r3, #160	; 0xa0
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d008      	beq.n	8001efe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d004      	beq.n	8001efe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	0010      	movs	r0, r2
 8001efc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2284      	movs	r2, #132	; 0x84
 8001f02:	589b      	ldr	r3, [r3, r2]
 8001f04:	2194      	movs	r1, #148	; 0x94
 8001f06:	187a      	adds	r2, r7, r1
 8001f08:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2240      	movs	r2, #64	; 0x40
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b40      	cmp	r3, #64	; 0x40
 8001f16:	d004      	beq.n	8001f22 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2228      	movs	r2, #40	; 0x28
 8001f1e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f20:	d047      	beq.n	8001fb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f000 fd17 	bl	8002958 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2240      	movs	r2, #64	; 0x40
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b40      	cmp	r3, #64	; 0x40
 8001f36:	d137      	bne.n	8001fa8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f38:	f3ef 8310 	mrs	r3, PRIMASK
 8001f3c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f40:	2090      	movs	r0, #144	; 0x90
 8001f42:	183a      	adds	r2, r7, r0
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	2301      	movs	r3, #1
 8001f48:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f4c:	f383 8810 	msr	PRIMASK, r3
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2140      	movs	r1, #64	; 0x40
 8001f5e:	438a      	bics	r2, r1
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	183b      	adds	r3, r7, r0
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6a:	f383 8810 	msr	PRIMASK, r3
}
 8001f6e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d012      	beq.n	8001f9e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <HAL_UART_IRQHandler+0x2a0>)
 8001f7e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7fe fdeb 	bl	8000b60 <HAL_DMA_Abort_IT>
 8001f8a:	1e03      	subs	r3, r0, #0
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f98:	0018      	movs	r0, r3
 8001f9a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f9c:	e012      	b.n	8001fc4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 f995 	bl	80022d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa6:	e00d      	b.n	8001fc4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	0018      	movs	r0, r3
 8001fac:	f000 f990 	bl	80022d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb0:	e008      	b.n	8001fc4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f000 f98b 	bl	80022d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2284      	movs	r2, #132	; 0x84
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001fc2:	e16f      	b.n	80022a4 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc4:	46c0      	nop			; (mov r8, r8)
    return;
 8001fc6:	e16d      	b.n	80022a4 <HAL_UART_IRQHandler+0x574>
 8001fc8:	0000080f 	.word	0x0000080f
 8001fcc:	04000120 	.word	0x04000120
 8001fd0:	08002b57 	.word	0x08002b57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d000      	beq.n	8001fde <HAL_UART_IRQHandler+0x2ae>
 8001fdc:	e139      	b.n	8002252 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001fde:	23a4      	movs	r3, #164	; 0xa4
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d100      	bne.n	8001fec <HAL_UART_IRQHandler+0x2bc>
 8001fea:	e132      	b.n	8002252 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001fec:	23a0      	movs	r3, #160	; 0xa0
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2210      	movs	r2, #16
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d100      	bne.n	8001ffa <HAL_UART_IRQHandler+0x2ca>
 8001ff8:	e12b      	b.n	8002252 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2210      	movs	r2, #16
 8002000:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2240      	movs	r2, #64	; 0x40
 800200a:	4013      	ands	r3, r2
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	d000      	beq.n	8002012 <HAL_UART_IRQHandler+0x2e2>
 8002010:	e09f      	b.n	8002152 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	217e      	movs	r1, #126	; 0x7e
 800201c:	187b      	adds	r3, r7, r1
 800201e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002020:	187b      	adds	r3, r7, r1
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d100      	bne.n	800202a <HAL_UART_IRQHandler+0x2fa>
 8002028:	e13e      	b.n	80022a8 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2258      	movs	r2, #88	; 0x58
 800202e:	5a9b      	ldrh	r3, [r3, r2]
 8002030:	187a      	adds	r2, r7, r1
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d300      	bcc.n	800203a <HAL_UART_IRQHandler+0x30a>
 8002038:	e136      	b.n	80022a8 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	187a      	adds	r2, r7, r1
 800203e:	215a      	movs	r1, #90	; 0x5a
 8002040:	8812      	ldrh	r2, [r2, #0]
 8002042:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b20      	cmp	r3, #32
 800204c:	d06f      	beq.n	800212e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800204e:	f3ef 8310 	mrs	r3, PRIMASK
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002056:	67bb      	str	r3, [r7, #120]	; 0x78
 8002058:	2301      	movs	r3, #1
 800205a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205e:	f383 8810 	msr	PRIMASK, r3
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4992      	ldr	r1, [pc, #584]	; (80022b8 <HAL_UART_IRQHandler+0x588>)
 8002070:	400a      	ands	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002076:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207a:	f383 8810 	msr	PRIMASK, r3
}
 800207e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002080:	f3ef 8310 	mrs	r3, PRIMASK
 8002084:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002088:	677b      	str	r3, [r7, #116]	; 0x74
 800208a:	2301      	movs	r3, #1
 800208c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800208e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002090:	f383 8810 	msr	PRIMASK, r3
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2101      	movs	r1, #1
 80020a2:	438a      	bics	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ac:	f383 8810 	msr	PRIMASK, r3
}
 80020b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020b2:	f3ef 8310 	mrs	r3, PRIMASK
 80020b6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80020b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020ba:	673b      	str	r3, [r7, #112]	; 0x70
 80020bc:	2301      	movs	r3, #1
 80020be:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c2:	f383 8810 	msr	PRIMASK, r3
}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2140      	movs	r1, #64	; 0x40
 80020d4:	438a      	bics	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020da:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020de:	f383 8810 	msr	PRIMASK, r3
}
 80020e2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2280      	movs	r2, #128	; 0x80
 80020e8:	2120      	movs	r1, #32
 80020ea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020f2:	f3ef 8310 	mrs	r3, PRIMASK
 80020f6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80020f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80020fc:	2301      	movs	r3, #1
 80020fe:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002100:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002102:	f383 8810 	msr	PRIMASK, r3
}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2110      	movs	r1, #16
 8002114:	438a      	bics	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800211a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800211c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800211e:	f383 8810 	msr	PRIMASK, r3
}
 8002122:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002128:	0018      	movs	r0, r3
 800212a:	f7fe fce1 	bl	8000af0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2258      	movs	r2, #88	; 0x58
 8002138:	5a9a      	ldrh	r2, [r3, r2]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	215a      	movs	r1, #90	; 0x5a
 800213e:	5a5b      	ldrh	r3, [r3, r1]
 8002140:	b29b      	uxth	r3, r3
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	b29a      	uxth	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0011      	movs	r1, r2
 800214a:	0018      	movs	r0, r3
 800214c:	f000 f8c8 	bl	80022e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002150:	e0aa      	b.n	80022a8 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2258      	movs	r2, #88	; 0x58
 8002156:	5a99      	ldrh	r1, [r3, r2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	225a      	movs	r2, #90	; 0x5a
 800215c:	5a9b      	ldrh	r3, [r3, r2]
 800215e:	b29a      	uxth	r2, r3
 8002160:	208e      	movs	r0, #142	; 0x8e
 8002162:	183b      	adds	r3, r7, r0
 8002164:	1a8a      	subs	r2, r1, r2
 8002166:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	225a      	movs	r2, #90	; 0x5a
 800216c:	5a9b      	ldrh	r3, [r3, r2]
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d100      	bne.n	8002176 <HAL_UART_IRQHandler+0x446>
 8002174:	e09a      	b.n	80022ac <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8002176:	183b      	adds	r3, r7, r0
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d100      	bne.n	8002180 <HAL_UART_IRQHandler+0x450>
 800217e:	e095      	b.n	80022ac <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002180:	f3ef 8310 	mrs	r3, PRIMASK
 8002184:	60fb      	str	r3, [r7, #12]
  return(result);
 8002186:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002188:	2488      	movs	r4, #136	; 0x88
 800218a:	193a      	adds	r2, r7, r4
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	2301      	movs	r3, #1
 8002190:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f383 8810 	msr	PRIMASK, r3
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4945      	ldr	r1, [pc, #276]	; (80022bc <HAL_UART_IRQHandler+0x58c>)
 80021a6:	400a      	ands	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	193b      	adds	r3, r7, r4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f383 8810 	msr	PRIMASK, r3
}
 80021b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021b8:	f3ef 8310 	mrs	r3, PRIMASK
 80021bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80021be:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c0:	2484      	movs	r4, #132	; 0x84
 80021c2:	193a      	adds	r2, r7, r4
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	2301      	movs	r3, #1
 80021c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f383 8810 	msr	PRIMASK, r3
}
 80021d0:	46c0      	nop			; (mov r8, r8)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2101      	movs	r1, #1
 80021de:	438a      	bics	r2, r1
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	193b      	adds	r3, r7, r4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	f383 8810 	msr	PRIMASK, r3
}
 80021ee:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	2120      	movs	r1, #32
 80021f6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002204:	f3ef 8310 	mrs	r3, PRIMASK
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800220c:	2480      	movs	r4, #128	; 0x80
 800220e:	193a      	adds	r2, r7, r4
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	2301      	movs	r3, #1
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	f383 8810 	msr	PRIMASK, r3
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2110      	movs	r1, #16
 800222a:	438a      	bics	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	193b      	adds	r3, r7, r4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	f383 8810 	msr	PRIMASK, r3
}
 800223a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002242:	183b      	adds	r3, r7, r0
 8002244:	881a      	ldrh	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	0011      	movs	r1, r2
 800224a:	0018      	movs	r0, r3
 800224c:	f000 f848 	bl	80022e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002250:	e02c      	b.n	80022ac <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002252:	23a4      	movs	r3, #164	; 0xa4
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2280      	movs	r2, #128	; 0x80
 800225a:	4013      	ands	r3, r2
 800225c:	d00f      	beq.n	800227e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800225e:	23a0      	movs	r3, #160	; 0xa0
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	4013      	ands	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01e      	beq.n	80022b0 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	0010      	movs	r0, r2
 800227a:	4798      	blx	r3
    }
    return;
 800227c:	e018      	b.n	80022b0 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800227e:	23a4      	movs	r3, #164	; 0xa4
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2240      	movs	r2, #64	; 0x40
 8002286:	4013      	ands	r3, r2
 8002288:	d013      	beq.n	80022b2 <HAL_UART_IRQHandler+0x582>
 800228a:	23a0      	movs	r3, #160	; 0xa0
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	4013      	ands	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	0018      	movs	r0, r3
 800229a:	f000 fc73 	bl	8002b84 <UART_EndTransmit_IT>
    return;
 800229e:	e008      	b.n	80022b2 <HAL_UART_IRQHandler+0x582>
      return;
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	e006      	b.n	80022b2 <HAL_UART_IRQHandler+0x582>
    return;
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	e004      	b.n	80022b2 <HAL_UART_IRQHandler+0x582>
      return;
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	e002      	b.n	80022b2 <HAL_UART_IRQHandler+0x582>
      return;
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	e000      	b.n	80022b2 <HAL_UART_IRQHandler+0x582>
    return;
 80022b0:	46c0      	nop			; (mov r8, r8)
  }

}
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b02b      	add	sp, #172	; 0xac
 80022b6:	bd90      	pop	{r4, r7, pc}
 80022b8:	fffffeff 	.word	0xfffffeff
 80022bc:	fffffedf 	.word	0xfffffedf

080022c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b002      	add	sp, #8
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b002      	add	sp, #8
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	000a      	movs	r2, r1
 80022ea:	1cbb      	adds	r3, r7, #2
 80022ec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b002      	add	sp, #8
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002300:	231e      	movs	r3, #30
 8002302:	18fb      	adds	r3, r7, r3
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a8d      	ldr	r2, [pc, #564]	; (800255c <UART_SetConfig+0x264>)
 8002328:	4013      	ands	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a88      	ldr	r2, [pc, #544]	; (8002560 <UART_SetConfig+0x268>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a7f      	ldr	r2, [pc, #508]	; (8002564 <UART_SetConfig+0x26c>)
 8002366:	4013      	ands	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a7b      	ldr	r2, [pc, #492]	; (8002568 <UART_SetConfig+0x270>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d127      	bne.n	80023ce <UART_SetConfig+0xd6>
 800237e:	4b7b      	ldr	r3, [pc, #492]	; (800256c <UART_SetConfig+0x274>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	2203      	movs	r2, #3
 8002384:	4013      	ands	r3, r2
 8002386:	2b03      	cmp	r3, #3
 8002388:	d00d      	beq.n	80023a6 <UART_SetConfig+0xae>
 800238a:	d81b      	bhi.n	80023c4 <UART_SetConfig+0xcc>
 800238c:	2b02      	cmp	r3, #2
 800238e:	d014      	beq.n	80023ba <UART_SetConfig+0xc2>
 8002390:	d818      	bhi.n	80023c4 <UART_SetConfig+0xcc>
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <UART_SetConfig+0xa4>
 8002396:	2b01      	cmp	r3, #1
 8002398:	d00a      	beq.n	80023b0 <UART_SetConfig+0xb8>
 800239a:	e013      	b.n	80023c4 <UART_SetConfig+0xcc>
 800239c:	231f      	movs	r3, #31
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e021      	b.n	80023ea <UART_SetConfig+0xf2>
 80023a6:	231f      	movs	r3, #31
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2202      	movs	r2, #2
 80023ac:	701a      	strb	r2, [r3, #0]
 80023ae:	e01c      	b.n	80023ea <UART_SetConfig+0xf2>
 80023b0:	231f      	movs	r3, #31
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2204      	movs	r2, #4
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	e017      	b.n	80023ea <UART_SetConfig+0xf2>
 80023ba:	231f      	movs	r3, #31
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	2208      	movs	r2, #8
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e012      	b.n	80023ea <UART_SetConfig+0xf2>
 80023c4:	231f      	movs	r3, #31
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2210      	movs	r2, #16
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	e00d      	b.n	80023ea <UART_SetConfig+0xf2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a67      	ldr	r2, [pc, #412]	; (8002570 <UART_SetConfig+0x278>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d104      	bne.n	80023e2 <UART_SetConfig+0xea>
 80023d8:	231f      	movs	r3, #31
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	e003      	b.n	80023ea <UART_SetConfig+0xf2>
 80023e2:	231f      	movs	r3, #31
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2210      	movs	r2, #16
 80023e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d15c      	bne.n	80024b0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80023f6:	231f      	movs	r3, #31
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d015      	beq.n	800242c <UART_SetConfig+0x134>
 8002400:	dc18      	bgt.n	8002434 <UART_SetConfig+0x13c>
 8002402:	2b04      	cmp	r3, #4
 8002404:	d00d      	beq.n	8002422 <UART_SetConfig+0x12a>
 8002406:	dc15      	bgt.n	8002434 <UART_SetConfig+0x13c>
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <UART_SetConfig+0x11a>
 800240c:	2b02      	cmp	r3, #2
 800240e:	d005      	beq.n	800241c <UART_SetConfig+0x124>
 8002410:	e010      	b.n	8002434 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002412:	f7ff fac5 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 8002416:	0003      	movs	r3, r0
 8002418:	61bb      	str	r3, [r7, #24]
        break;
 800241a:	e012      	b.n	8002442 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800241c:	4b55      	ldr	r3, [pc, #340]	; (8002574 <UART_SetConfig+0x27c>)
 800241e:	61bb      	str	r3, [r7, #24]
        break;
 8002420:	e00f      	b.n	8002442 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002422:	f7ff fa5d 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 8002426:	0003      	movs	r3, r0
 8002428:	61bb      	str	r3, [r7, #24]
        break;
 800242a:	e00a      	b.n	8002442 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	61bb      	str	r3, [r7, #24]
        break;
 8002432:	e006      	b.n	8002442 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002438:	231e      	movs	r3, #30
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
        break;
 8002440:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d100      	bne.n	800244a <UART_SetConfig+0x152>
 8002448:	e07a      	b.n	8002540 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	005a      	lsls	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	085b      	lsrs	r3, r3, #1
 8002454:	18d2      	adds	r2, r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	0019      	movs	r1, r3
 800245c:	0010      	movs	r0, r2
 800245e:	f7fd fe5b 	bl	8000118 <__udivsi3>
 8002462:	0003      	movs	r3, r0
 8002464:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b0f      	cmp	r3, #15
 800246a:	d91c      	bls.n	80024a6 <UART_SetConfig+0x1ae>
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	025b      	lsls	r3, r3, #9
 8002472:	429a      	cmp	r2, r3
 8002474:	d217      	bcs.n	80024a6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	b29a      	uxth	r2, r3
 800247a:	200e      	movs	r0, #14
 800247c:	183b      	adds	r3, r7, r0
 800247e:	210f      	movs	r1, #15
 8002480:	438a      	bics	r2, r1
 8002482:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	085b      	lsrs	r3, r3, #1
 8002488:	b29b      	uxth	r3, r3
 800248a:	2207      	movs	r2, #7
 800248c:	4013      	ands	r3, r2
 800248e:	b299      	uxth	r1, r3
 8002490:	183b      	adds	r3, r7, r0
 8002492:	183a      	adds	r2, r7, r0
 8002494:	8812      	ldrh	r2, [r2, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	183a      	adds	r2, r7, r0
 80024a0:	8812      	ldrh	r2, [r2, #0]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	e04c      	b.n	8002540 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80024a6:	231e      	movs	r3, #30
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e047      	b.n	8002540 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024b0:	231f      	movs	r3, #31
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d015      	beq.n	80024e6 <UART_SetConfig+0x1ee>
 80024ba:	dc18      	bgt.n	80024ee <UART_SetConfig+0x1f6>
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d00d      	beq.n	80024dc <UART_SetConfig+0x1e4>
 80024c0:	dc15      	bgt.n	80024ee <UART_SetConfig+0x1f6>
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <UART_SetConfig+0x1d4>
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d005      	beq.n	80024d6 <UART_SetConfig+0x1de>
 80024ca:	e010      	b.n	80024ee <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024cc:	f7ff fa68 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 80024d0:	0003      	movs	r3, r0
 80024d2:	61bb      	str	r3, [r7, #24]
        break;
 80024d4:	e012      	b.n	80024fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024d6:	4b27      	ldr	r3, [pc, #156]	; (8002574 <UART_SetConfig+0x27c>)
 80024d8:	61bb      	str	r3, [r7, #24]
        break;
 80024da:	e00f      	b.n	80024fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024dc:	f7ff fa00 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 80024e0:	0003      	movs	r3, r0
 80024e2:	61bb      	str	r3, [r7, #24]
        break;
 80024e4:	e00a      	b.n	80024fc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	61bb      	str	r3, [r7, #24]
        break;
 80024ec:	e006      	b.n	80024fc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80024f2:	231e      	movs	r3, #30
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
        break;
 80024fa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d01e      	beq.n	8002540 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	085a      	lsrs	r2, r3, #1
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	18d2      	adds	r2, r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	0019      	movs	r1, r3
 8002512:	0010      	movs	r0, r2
 8002514:	f7fd fe00 	bl	8000118 <__udivsi3>
 8002518:	0003      	movs	r3, r0
 800251a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b0f      	cmp	r3, #15
 8002520:	d90a      	bls.n	8002538 <UART_SetConfig+0x240>
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	025b      	lsls	r3, r3, #9
 8002528:	429a      	cmp	r2, r3
 800252a:	d205      	bcs.n	8002538 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	e003      	b.n	8002540 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002538:	231e      	movs	r3, #30
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800254c:	231e      	movs	r3, #30
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	781b      	ldrb	r3, [r3, #0]
}
 8002552:	0018      	movs	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	b008      	add	sp, #32
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			; (mov r8, r8)
 800255c:	ffff69f3 	.word	0xffff69f3
 8002560:	ffffcfff 	.word	0xffffcfff
 8002564:	fffff4ff 	.word	0xfffff4ff
 8002568:	40013800 	.word	0x40013800
 800256c:	40021000 	.word	0x40021000
 8002570:	40004400 	.word	0x40004400
 8002574:	007a1200 	.word	0x007a1200

08002578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	2208      	movs	r2, #8
 8002586:	4013      	ands	r3, r2
 8002588:	d00b      	beq.n	80025a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a4a      	ldr	r2, [pc, #296]	; (80026bc <UART_AdvFeatureConfig+0x144>)
 8002592:	4013      	ands	r3, r2
 8002594:	0019      	movs	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	2201      	movs	r2, #1
 80025a8:	4013      	ands	r3, r2
 80025aa:	d00b      	beq.n	80025c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a43      	ldr	r2, [pc, #268]	; (80026c0 <UART_AdvFeatureConfig+0x148>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	2202      	movs	r2, #2
 80025ca:	4013      	ands	r3, r2
 80025cc:	d00b      	beq.n	80025e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a3b      	ldr	r2, [pc, #236]	; (80026c4 <UART_AdvFeatureConfig+0x14c>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	2204      	movs	r2, #4
 80025ec:	4013      	ands	r3, r2
 80025ee:	d00b      	beq.n	8002608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4a34      	ldr	r2, [pc, #208]	; (80026c8 <UART_AdvFeatureConfig+0x150>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	0019      	movs	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	2210      	movs	r2, #16
 800260e:	4013      	ands	r3, r2
 8002610:	d00b      	beq.n	800262a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a2c      	ldr	r2, [pc, #176]	; (80026cc <UART_AdvFeatureConfig+0x154>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	2220      	movs	r2, #32
 8002630:	4013      	ands	r3, r2
 8002632:	d00b      	beq.n	800264c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4a25      	ldr	r2, [pc, #148]	; (80026d0 <UART_AdvFeatureConfig+0x158>)
 800263c:	4013      	ands	r3, r2
 800263e:	0019      	movs	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2240      	movs	r2, #64	; 0x40
 8002652:	4013      	ands	r3, r2
 8002654:	d01d      	beq.n	8002692 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <UART_AdvFeatureConfig+0x15c>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	035b      	lsls	r3, r3, #13
 8002676:	429a      	cmp	r2, r3
 8002678:	d10b      	bne.n	8002692 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4a15      	ldr	r2, [pc, #84]	; (80026d8 <UART_AdvFeatureConfig+0x160>)
 8002682:	4013      	ands	r3, r2
 8002684:	0019      	movs	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	2280      	movs	r2, #128	; 0x80
 8002698:	4013      	ands	r3, r2
 800269a:	d00b      	beq.n	80026b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <UART_AdvFeatureConfig+0x164>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	605a      	str	r2, [r3, #4]
  }
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b002      	add	sp, #8
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	ffff7fff 	.word	0xffff7fff
 80026c0:	fffdffff 	.word	0xfffdffff
 80026c4:	fffeffff 	.word	0xfffeffff
 80026c8:	fffbffff 	.word	0xfffbffff
 80026cc:	ffffefff 	.word	0xffffefff
 80026d0:	ffffdfff 	.word	0xffffdfff
 80026d4:	ffefffff 	.word	0xffefffff
 80026d8:	ff9fffff 	.word	0xff9fffff
 80026dc:	fff7ffff 	.word	0xfff7ffff

080026e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b092      	sub	sp, #72	; 0x48
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2284      	movs	r2, #132	; 0x84
 80026ec:	2100      	movs	r1, #0
 80026ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026f0:	f7fe f868 	bl	80007c4 <HAL_GetTick>
 80026f4:	0003      	movs	r3, r0
 80026f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2208      	movs	r2, #8
 8002700:	4013      	ands	r3, r2
 8002702:	2b08      	cmp	r3, #8
 8002704:	d12c      	bne.n	8002760 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002708:	2280      	movs	r2, #128	; 0x80
 800270a:	0391      	lsls	r1, r2, #14
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4a46      	ldr	r2, [pc, #280]	; (8002828 <UART_CheckIdleState+0x148>)
 8002710:	9200      	str	r2, [sp, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	f000 f88c 	bl	8002830 <UART_WaitOnFlagUntilTimeout>
 8002718:	1e03      	subs	r3, r0, #0
 800271a:	d021      	beq.n	8002760 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271c:	f3ef 8310 	mrs	r3, PRIMASK
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002724:	63bb      	str	r3, [r7, #56]	; 0x38
 8002726:	2301      	movs	r3, #1
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	f383 8810 	msr	PRIMASK, r3
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2180      	movs	r1, #128	; 0x80
 800273e:	438a      	bics	r2, r1
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	f383 8810 	msr	PRIMASK, r3
}
 800274c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2220      	movs	r2, #32
 8002752:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2278      	movs	r2, #120	; 0x78
 8002758:	2100      	movs	r1, #0
 800275a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e05f      	b.n	8002820 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2204      	movs	r2, #4
 8002768:	4013      	ands	r3, r2
 800276a:	2b04      	cmp	r3, #4
 800276c:	d146      	bne.n	80027fc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800276e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	03d1      	lsls	r1, r2, #15
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4a2c      	ldr	r2, [pc, #176]	; (8002828 <UART_CheckIdleState+0x148>)
 8002778:	9200      	str	r2, [sp, #0]
 800277a:	2200      	movs	r2, #0
 800277c:	f000 f858 	bl	8002830 <UART_WaitOnFlagUntilTimeout>
 8002780:	1e03      	subs	r3, r0, #0
 8002782:	d03b      	beq.n	80027fc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002784:	f3ef 8310 	mrs	r3, PRIMASK
 8002788:	60fb      	str	r3, [r7, #12]
  return(result);
 800278a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
 800278e:	2301      	movs	r3, #1
 8002790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f383 8810 	msr	PRIMASK, r3
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4921      	ldr	r1, [pc, #132]	; (800282c <UART_CheckIdleState+0x14c>)
 80027a6:	400a      	ands	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f383 8810 	msr	PRIMASK, r3
}
 80027b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b6:	f3ef 8310 	mrs	r3, PRIMASK
 80027ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80027bc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027be:	633b      	str	r3, [r7, #48]	; 0x30
 80027c0:	2301      	movs	r3, #1
 80027c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f383 8810 	msr	PRIMASK, r3
}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	438a      	bics	r2, r1
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	f383 8810 	msr	PRIMASK, r3
}
 80027e6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	2120      	movs	r1, #32
 80027ee:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2278      	movs	r2, #120	; 0x78
 80027f4:	2100      	movs	r1, #0
 80027f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e011      	b.n	8002820 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2220      	movs	r2, #32
 8002800:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2280      	movs	r2, #128	; 0x80
 8002806:	2120      	movs	r1, #32
 8002808:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2278      	movs	r2, #120	; 0x78
 800281a:	2100      	movs	r1, #0
 800281c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b010      	add	sp, #64	; 0x40
 8002826:	bd80      	pop	{r7, pc}
 8002828:	01ffffff 	.word	0x01ffffff
 800282c:	fffffedf 	.word	0xfffffedf

08002830 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002840:	e051      	b.n	80028e6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	3301      	adds	r3, #1
 8002846:	d04e      	beq.n	80028e6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002848:	f7fd ffbc 	bl	80007c4 <HAL_GetTick>
 800284c:	0002      	movs	r2, r0
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	429a      	cmp	r2, r3
 8002856:	d302      	bcc.n	800285e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e051      	b.n	8002906 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2204      	movs	r2, #4
 800286a:	4013      	ands	r3, r2
 800286c:	d03b      	beq.n	80028e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b80      	cmp	r3, #128	; 0x80
 8002872:	d038      	beq.n	80028e6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b40      	cmp	r3, #64	; 0x40
 8002878:	d035      	beq.n	80028e6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	2208      	movs	r2, #8
 8002882:	4013      	ands	r3, r2
 8002884:	2b08      	cmp	r3, #8
 8002886:	d111      	bne.n	80028ac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2208      	movs	r2, #8
 800288e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	0018      	movs	r0, r3
 8002894:	f000 f860 	bl	8002958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2284      	movs	r2, #132	; 0x84
 800289c:	2108      	movs	r1, #8
 800289e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2278      	movs	r2, #120	; 0x78
 80028a4:	2100      	movs	r1, #0
 80028a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e02c      	b.n	8002906 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	401a      	ands	r2, r3
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	429a      	cmp	r2, r3
 80028be:	d112      	bne.n	80028e6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	0018      	movs	r0, r3
 80028ce:	f000 f843 	bl	8002958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2284      	movs	r2, #132	; 0x84
 80028d6:	2120      	movs	r1, #32
 80028d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2278      	movs	r2, #120	; 0x78
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e00f      	b.n	8002906 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	4013      	ands	r3, r2
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	425a      	negs	r2, r3
 80028f6:	4153      	adcs	r3, r2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	001a      	movs	r2, r3
 80028fc:	1dfb      	adds	r3, r7, #7
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d09e      	beq.n	8002842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bd80      	pop	{r7, pc}

0800290e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002916:	f3ef 8310 	mrs	r3, PRIMASK
 800291a:	60bb      	str	r3, [r7, #8]
  return(result);
 800291c:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	2301      	movs	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f383 8810 	msr	PRIMASK, r3
}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	21c0      	movs	r1, #192	; 0xc0
 8002938:	438a      	bics	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f383 8810 	msr	PRIMASK, r3
}
 8002946:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b006      	add	sp, #24
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	; 0x38
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002960:	f3ef 8310 	mrs	r3, PRIMASK
 8002964:	617b      	str	r3, [r7, #20]
  return(result);
 8002966:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
 800296a:	2301      	movs	r3, #1
 800296c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f383 8810 	msr	PRIMASK, r3
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4926      	ldr	r1, [pc, #152]	; (8002a1c <UART_EndRxTransfer+0xc4>)
 8002982:	400a      	ands	r2, r1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f383 8810 	msr	PRIMASK, r3
}
 8002990:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002992:	f3ef 8310 	mrs	r3, PRIMASK
 8002996:	623b      	str	r3, [r7, #32]
  return(result);
 8002998:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
 800299c:	2301      	movs	r3, #1
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	f383 8810 	msr	PRIMASK, r3
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2101      	movs	r1, #1
 80029b4:	438a      	bics	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	f383 8810 	msr	PRIMASK, r3
}
 80029c2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d118      	bne.n	80029fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029cc:	f3ef 8310 	mrs	r3, PRIMASK
 80029d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80029d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d6:	2301      	movs	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f383 8810 	msr	PRIMASK, r3
}
 80029e0:	46c0      	nop			; (mov r8, r8)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2110      	movs	r1, #16
 80029ee:	438a      	bics	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f383 8810 	msr	PRIMASK, r3
}
 80029fc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	2120      	movs	r1, #32
 8002a04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b00e      	add	sp, #56	; 0x38
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	fffffedf 	.word	0xfffffedf

08002a20 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08c      	sub	sp, #48	; 0x30
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d035      	beq.n	8002aa2 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	2252      	movs	r2, #82	; 0x52
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a42:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a44:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a48:	2301      	movs	r3, #1
 8002a4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f383 8810 	msr	PRIMASK, r3
}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	438a      	bics	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f383 8810 	msr	PRIMASK, r3
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a70:	f3ef 8310 	mrs	r3, PRIMASK
 8002a74:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a76:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f383 8810 	msr	PRIMASK, r3
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	f383 8810 	msr	PRIMASK, r3
}
 8002aa0:	e004      	b.n	8002aac <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7fd fdeb 	bl	8000680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b00c      	add	sp, #48	; 0x30
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7ff fbfb 	bl	80022c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b004      	add	sp, #16
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2280      	movs	r2, #128	; 0x80
 8002aea:	589b      	ldr	r3, [r3, r2]
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2280      	movs	r2, #128	; 0x80
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b80      	cmp	r3, #128	; 0x80
 8002afa:	d10a      	bne.n	8002b12 <UART_DMAError+0x40>
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b21      	cmp	r3, #33	; 0x21
 8002b00:	d107      	bne.n	8002b12 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2252      	movs	r2, #82	; 0x52
 8002b06:	2100      	movs	r1, #0
 8002b08:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7ff fefe 	bl	800290e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2240      	movs	r2, #64	; 0x40
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d10a      	bne.n	8002b36 <UART_DMAError+0x64>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b22      	cmp	r3, #34	; 0x22
 8002b24:	d107      	bne.n	8002b36 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	225a      	movs	r2, #90	; 0x5a
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7ff ff11 	bl	8002958 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2284      	movs	r2, #132	; 0x84
 8002b3a:	589b      	ldr	r3, [r3, r2]
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2184      	movs	r1, #132	; 0x84
 8002b44:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7ff fbc1 	bl	80022d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b006      	add	sp, #24
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	225a      	movs	r2, #90	; 0x5a
 8002b68:	2100      	movs	r1, #0
 8002b6a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2252      	movs	r2, #82	; 0x52
 8002b70:	2100      	movs	r1, #0
 8002b72:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f7ff fbaa 	bl	80022d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b004      	add	sp, #16
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b90:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b92:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	2301      	movs	r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2140      	movs	r1, #64	; 0x40
 8002bae:	438a      	bics	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f383 8810 	msr	PRIMASK, r3
}
 8002bbc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f7fd fd57 	bl	8000680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b006      	add	sp, #24
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <__libc_init_array>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	2600      	movs	r6, #0
 8002be0:	4d0c      	ldr	r5, [pc, #48]	; (8002c14 <__libc_init_array+0x38>)
 8002be2:	4c0d      	ldr	r4, [pc, #52]	; (8002c18 <__libc_init_array+0x3c>)
 8002be4:	1b64      	subs	r4, r4, r5
 8002be6:	10a4      	asrs	r4, r4, #2
 8002be8:	42a6      	cmp	r6, r4
 8002bea:	d109      	bne.n	8002c00 <__libc_init_array+0x24>
 8002bec:	2600      	movs	r6, #0
 8002bee:	f000 f821 	bl	8002c34 <_init>
 8002bf2:	4d0a      	ldr	r5, [pc, #40]	; (8002c1c <__libc_init_array+0x40>)
 8002bf4:	4c0a      	ldr	r4, [pc, #40]	; (8002c20 <__libc_init_array+0x44>)
 8002bf6:	1b64      	subs	r4, r4, r5
 8002bf8:	10a4      	asrs	r4, r4, #2
 8002bfa:	42a6      	cmp	r6, r4
 8002bfc:	d105      	bne.n	8002c0a <__libc_init_array+0x2e>
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	00b3      	lsls	r3, r6, #2
 8002c02:	58eb      	ldr	r3, [r5, r3]
 8002c04:	4798      	blx	r3
 8002c06:	3601      	adds	r6, #1
 8002c08:	e7ee      	b.n	8002be8 <__libc_init_array+0xc>
 8002c0a:	00b3      	lsls	r3, r6, #2
 8002c0c:	58eb      	ldr	r3, [r5, r3]
 8002c0e:	4798      	blx	r3
 8002c10:	3601      	adds	r6, #1
 8002c12:	e7f2      	b.n	8002bfa <__libc_init_array+0x1e>
 8002c14:	08002c84 	.word	0x08002c84
 8002c18:	08002c84 	.word	0x08002c84
 8002c1c:	08002c84 	.word	0x08002c84
 8002c20:	08002c88 	.word	0x08002c88

08002c24 <memset>:
 8002c24:	0003      	movs	r3, r0
 8002c26:	1882      	adds	r2, r0, r2
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d100      	bne.n	8002c2e <memset+0xa>
 8002c2c:	4770      	bx	lr
 8002c2e:	7019      	strb	r1, [r3, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	e7f9      	b.n	8002c28 <memset+0x4>

08002c34 <_init>:
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3a:	bc08      	pop	{r3}
 8002c3c:	469e      	mov	lr, r3
 8002c3e:	4770      	bx	lr

08002c40 <_fini>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr
