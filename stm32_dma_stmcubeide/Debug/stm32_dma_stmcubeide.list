
stm32_dma_stmcubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cd8  08003cd8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003cd8  08003cd8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cd8  08003cd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000070  08003d50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08003d50  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008adc  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a6  00000000  00000000  00028b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  0002a320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  0002a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbc3  00000000  00000000  0002af88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009288  00000000  00000000  0003ab4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d44a  00000000  00000000  00043dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a121d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001950  00000000  00000000  000a1270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c40 	.word	0x08003c40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003c40 	.word	0x08003c40

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b0a4      	sub	sp, #144	; 0x90
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fc23 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f887 	bl	8000360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f935 	bl	80004c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000256:	f000 f915 	bl	8000484 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800025a:	f000 f8e3 	bl	8000424 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start continuous DMA reception into our circular buffer
  if (HAL_UART_Receive_DMA(&huart1, rx_buffer, RX_BUFFER_SIZE) != HAL_OK)
 800025e:	2380      	movs	r3, #128	; 0x80
 8000260:	005a      	lsls	r2, r3, #1
 8000262:	4935      	ldr	r1, [pc, #212]	; (8000338 <main+0xf4>)
 8000264:	4b35      	ldr	r3, [pc, #212]	; (800033c <main+0xf8>)
 8000266:	0018      	movs	r0, r3
 8000268:	f001 ff24 	bl	80020b4 <HAL_UART_Receive_DMA>
 800026c:	1e03      	subs	r3, r0, #0
 800026e:	d001      	beq.n	8000274 <main+0x30>
  {
      Error_Handler();
 8000270:	f000 fa3a 	bl	80006e8 <Error_Handler>
  }
  // Enable the UART Idle Line detection interrupt
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000274:	4b31      	ldr	r3, [pc, #196]	; (800033c <main+0xf8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	4b30      	ldr	r3, [pc, #192]	; (800033c <main+0xf8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2110      	movs	r1, #16
 8000280:	430a      	orrs	r2, r1
 8000282:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Infinite loop */
  while (1)
  {
	    if(HAL_GetTick() - last_cmd >= 10000)
 8000284:	f000 fc60 	bl	8000b48 <HAL_GetTick>
 8000288:	0002      	movs	r2, r0
 800028a:	4b2d      	ldr	r3, [pc, #180]	; (8000340 <main+0xfc>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	1ad3      	subs	r3, r2, r3
 8000290:	4a2c      	ldr	r2, [pc, #176]	; (8000344 <main+0x100>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d91c      	bls.n	80002d0 <main+0x8c>
	    {
	      if(!tx_busy)
 8000296:	4b2c      	ldr	r3, [pc, #176]	; (8000348 <main+0x104>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	b2db      	uxtb	r3, r3
 800029c:	2b00      	cmp	r3, #0
 800029e:	d117      	bne.n	80002d0 <main+0x8c>
	      {
	        if(HAL_UART_Transmit_DMA(&huart1, (uint8_t*)"AT\r\n", 4) != HAL_OK)
 80002a0:	492a      	ldr	r1, [pc, #168]	; (800034c <main+0x108>)
 80002a2:	4b26      	ldr	r3, [pc, #152]	; (800033c <main+0xf8>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 fe74 	bl	8001f94 <HAL_UART_Transmit_DMA>
 80002ac:	1e03      	subs	r3, r0, #0
 80002ae:	d001      	beq.n	80002b4 <main+0x70>
	        {
	          Error_Handler();
 80002b0:	f000 fa1a 	bl	80006e8 <Error_Handler>
	        }
	        tx_busy = 1;
 80002b4:	4b24      	ldr	r3, [pc, #144]	; (8000348 <main+0x104>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	701a      	strb	r2, [r3, #0]
	        last_cmd = HAL_GetTick();
 80002ba:	f000 fc45 	bl	8000b48 <HAL_GetTick>
 80002be:	0002      	movs	r2, r0
 80002c0:	4b1f      	ldr	r3, [pc, #124]	; (8000340 <main+0xfc>)
 80002c2:	601a      	str	r2, [r3, #0]
	        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // Optional LED toggle.
 80002c4:	2390      	movs	r3, #144	; 0x90
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	2120      	movs	r1, #32
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 f8c7 	bl	800145e <HAL_GPIO_TogglePin>
	      }
	    }

	    // If a complete message (terminated by "\r\n") is received and TX is not busy, echo it.
	    if(response_ready && !tx_busy)
 80002d0:	4b1f      	ldr	r3, [pc, #124]	; (8000350 <main+0x10c>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0d4      	beq.n	8000284 <main+0x40>
 80002da:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <main+0x104>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1cf      	bne.n	8000284 <main+0x40>
	    {
	        if(strlen(response_buffer) > 0)
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <main+0x110>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d017      	beq.n	800031c <main+0xd8>
	        {
	            char echo_msg[MAX_RESPONSE_LEN + 16];
	            snprintf(echo_msg, sizeof(echo_msg), "\r\n[RX] %s\r\n", response_buffer);
 80002ec:	4b19      	ldr	r3, [pc, #100]	; (8000354 <main+0x110>)
 80002ee:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <main+0x114>)
 80002f0:	0038      	movs	r0, r7
 80002f2:	2190      	movs	r1, #144	; 0x90
 80002f4:	f003 f826 	bl	8003344 <sniprintf>
	            if(HAL_UART_Transmit_DMA(&huart1, (uint8_t*)echo_msg, strlen(echo_msg)) != HAL_OK)
 80002f8:	003b      	movs	r3, r7
 80002fa:	0018      	movs	r0, r3
 80002fc:	f7ff ff04 	bl	8000108 <strlen>
 8000300:	0003      	movs	r3, r0
 8000302:	b29a      	uxth	r2, r3
 8000304:	0039      	movs	r1, r7
 8000306:	4b0d      	ldr	r3, [pc, #52]	; (800033c <main+0xf8>)
 8000308:	0018      	movs	r0, r3
 800030a:	f001 fe43 	bl	8001f94 <HAL_UART_Transmit_DMA>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <main+0xd2>
	            {
	                Error_Handler();
 8000312:	f000 f9e9 	bl	80006e8 <Error_Handler>
	            }
	            tx_busy = 1;
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <main+0x104>)
 8000318:	2201      	movs	r2, #1
 800031a:	701a      	strb	r2, [r3, #0]
	        }
	        response_ready = 0;
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <main+0x10c>)
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
	        response_index = 0;  // Ensure fresh start for next message
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <main+0x118>)
 8000324:	2200      	movs	r2, #0
 8000326:	801a      	strh	r2, [r3, #0]
	        memset(response_buffer, 0, MAX_RESPONSE_LEN);
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <main+0x110>)
 800032a:	2280      	movs	r2, #128	; 0x80
 800032c:	2100      	movs	r1, #0
 800032e:	0018      	movs	r0, r3
 8000330:	f003 f800 	bl	8003334 <memset>
	    if(HAL_GetTick() - last_cmd >= 10000)
 8000334:	e7a6      	b.n	8000284 <main+0x40>
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	2000019c 	.word	0x2000019c
 800033c:	2000008c 	.word	0x2000008c
 8000340:	20000328 	.word	0x20000328
 8000344:	0000270f 	.word	0x0000270f
 8000348:	20000324 	.word	0x20000324
 800034c:	08003c58 	.word	0x08003c58
 8000350:	200002a0 	.word	0x200002a0
 8000354:	200002a4 	.word	0x200002a4
 8000358:	08003c60 	.word	0x08003c60
 800035c:	2000032c 	.word	0x2000032c

08000360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b095      	sub	sp, #84	; 0x54
 8000364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000366:	2420      	movs	r4, #32
 8000368:	193b      	adds	r3, r7, r4
 800036a:	0018      	movs	r0, r3
 800036c:	2330      	movs	r3, #48	; 0x30
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f002 ffdf 	bl	8003334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000376:	2310      	movs	r3, #16
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	0018      	movs	r0, r3
 800037c:	2310      	movs	r3, #16
 800037e:	001a      	movs	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	f002 ffd7 	bl	8003334 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000386:	003b      	movs	r3, r7
 8000388:	0018      	movs	r0, r3
 800038a:	2310      	movs	r3, #16
 800038c:	001a      	movs	r2, r3
 800038e:	2100      	movs	r1, #0
 8000390:	f002 ffd0 	bl	8003334 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000394:	0021      	movs	r1, r4
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2202      	movs	r2, #2
 800039a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2201      	movs	r2, #1
 80003a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2210      	movs	r2, #16
 80003a6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2202      	movs	r2, #2
 80003ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2200      	movs	r2, #0
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	22a0      	movs	r2, #160	; 0xa0
 80003b8:	0392      	lsls	r2, r2, #14
 80003ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 f865 	bl	8001494 <HAL_RCC_OscConfig>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003ce:	f000 f98b 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	2110      	movs	r1, #16
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2207      	movs	r2, #7
 80003d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2202      	movs	r2, #2
 80003de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2101      	movs	r1, #1
 80003f0:	0018      	movs	r0, r3
 80003f2:	f001 fb69 	bl	8001ac8 <HAL_RCC_ClockConfig>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003fa:	f000 f975 	bl	80006e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003fe:	003b      	movs	r3, r7
 8000400:	2201      	movs	r2, #1
 8000402:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000404:	003b      	movs	r3, r7
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040a:	003b      	movs	r3, r7
 800040c:	0018      	movs	r0, r3
 800040e:	f001 fc9f 	bl	8001d50 <HAL_RCCEx_PeriphCLKConfig>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000416:	f000 f967 	bl	80006e8 <Error_Handler>
  }
}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b015      	add	sp, #84	; 0x54
 8000420:	bd90      	pop	{r4, r7, pc}
	...

08000424 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_USART1_UART_Init+0x58>)
 800042a:	4a15      	ldr	r2, [pc, #84]	; (8000480 <MX_USART1_UART_Init+0x5c>)
 800042c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800042e:	4b13      	ldr	r3, [pc, #76]	; (800047c <MX_USART1_UART_Init+0x58>)
 8000430:	22e1      	movs	r2, #225	; 0xe1
 8000432:	0252      	lsls	r2, r2, #9
 8000434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_USART1_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_USART1_UART_Init+0x58>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_USART1_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_USART1_UART_Init+0x58>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <MX_USART1_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_USART1_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <MX_USART1_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_USART1_UART_Init+0x58>)
 8000462:	2200      	movs	r2, #0
 8000464:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <MX_USART1_UART_Init+0x58>)
 8000468:	0018      	movs	r0, r3
 800046a:	f001 fd3f 	bl	8001eec <HAL_UART_Init>
 800046e:	1e03      	subs	r3, r0, #0
 8000470:	d001      	beq.n	8000476 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000472:	f000 f939 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000008c 	.word	0x2000008c
 8000480:	40013800 	.word	0x40013800

08000484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <MX_DMA_Init+0x38>)
 800048c:	695a      	ldr	r2, [r3, #20]
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_DMA_Init+0x38>)
 8000490:	2101      	movs	r1, #1
 8000492:	430a      	orrs	r2, r1
 8000494:	615a      	str	r2, [r3, #20]
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MX_DMA_Init+0x38>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	2201      	movs	r2, #1
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2100      	movs	r1, #0
 80004a6:	200a      	movs	r0, #10
 80004a8:	f000 fc04 	bl	8000cb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80004ac:	200a      	movs	r0, #10
 80004ae:	f000 fc16 	bl	8000cde <HAL_NVIC_EnableIRQ>

}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	40021000 	.word	0x40021000

080004c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b089      	sub	sp, #36	; 0x24
 80004c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	240c      	movs	r4, #12
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	0018      	movs	r0, r3
 80004cc:	2314      	movs	r3, #20
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f002 ff2f 	bl	8003334 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b2d      	ldr	r3, [pc, #180]	; (800058c <MX_GPIO_Init+0xcc>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b2c      	ldr	r3, [pc, #176]	; (800058c <MX_GPIO_Init+0xcc>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	0309      	lsls	r1, r1, #12
 80004e0:	430a      	orrs	r2, r1
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	4b29      	ldr	r3, [pc, #164]	; (800058c <MX_GPIO_Init+0xcc>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	031b      	lsls	r3, r3, #12
 80004ec:	4013      	ands	r3, r2
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f2:	4b26      	ldr	r3, [pc, #152]	; (800058c <MX_GPIO_Init+0xcc>)
 80004f4:	695a      	ldr	r2, [r3, #20]
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <MX_GPIO_Init+0xcc>)
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	03c9      	lsls	r1, r1, #15
 80004fc:	430a      	orrs	r2, r1
 80004fe:	615a      	str	r2, [r3, #20]
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <MX_GPIO_Init+0xcc>)
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	03db      	lsls	r3, r3, #15
 8000508:	4013      	ands	r3, r2
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b1f      	ldr	r3, [pc, #124]	; (800058c <MX_GPIO_Init+0xcc>)
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <MX_GPIO_Init+0xcc>)
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	0289      	lsls	r1, r1, #10
 8000518:	430a      	orrs	r2, r1
 800051a:	615a      	str	r2, [r3, #20]
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <MX_GPIO_Init+0xcc>)
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	029b      	lsls	r3, r3, #10
 8000524:	4013      	ands	r3, r2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, GPIO_PIN_RESET);
 800052a:	2390      	movs	r3, #144	; 0x90
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	2200      	movs	r2, #0
 8000530:	2120      	movs	r1, #32
 8000532:	0018      	movs	r0, r3
 8000534:	f000 ff76 	bl	8001424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	0192      	lsls	r2, r2, #6
 800053e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	2284      	movs	r2, #132	; 0x84
 8000544:	0392      	lsls	r2, r2, #14
 8000546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800054e:	193b      	adds	r3, r7, r4
 8000550:	4a0f      	ldr	r2, [pc, #60]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000552:	0019      	movs	r1, r3
 8000554:	0010      	movs	r0, r2
 8000556:	f000 fdf5 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800055a:	0021      	movs	r1, r4
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2220      	movs	r2, #32
 8000560:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2201      	movs	r2, #1
 8000566:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000574:	187a      	adds	r2, r7, r1
 8000576:	2390      	movs	r3, #144	; 0x90
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	0011      	movs	r1, r2
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fde1 	bl	8001144 <HAL_GPIO_Init>

}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b009      	add	sp, #36	; 0x24
 8000588:	bd90      	pop	{r4, r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	40021000 	.word	0x40021000
 8000590:	48000800 	.word	0x48000800

08000594 <process_data_chunk>:
  * @param start_pos: The starting index in rx_buffer.
  * @param length: The number of bytes to process.
  * @retval None
  */
void process_data_chunk(uint16_t start_pos, uint16_t length)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	0002      	movs	r2, r0
 800059c:	1dbb      	adds	r3, r7, #6
 800059e:	801a      	strh	r2, [r3, #0]
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	1c0a      	adds	r2, r1, #0
 80005a4:	801a      	strh	r2, [r3, #0]
    // Process each character in the new chunk
    for (uint16_t i = 0; i < length; i++)
 80005a6:	230e      	movs	r3, #14
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	2200      	movs	r2, #0
 80005ac:	801a      	strh	r2, [r3, #0]
 80005ae:	e06d      	b.n	800068c <process_data_chunk+0xf8>
    {
        uint16_t pos = (start_pos + i) % RX_BUFFER_SIZE;
 80005b0:	1dba      	adds	r2, r7, #6
 80005b2:	230e      	movs	r3, #14
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	8812      	ldrh	r2, [r2, #0]
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	18d3      	adds	r3, r2, r3
 80005bc:	b29a      	uxth	r2, r3
 80005be:	200c      	movs	r0, #12
 80005c0:	183b      	adds	r3, r7, r0
 80005c2:	21ff      	movs	r1, #255	; 0xff
 80005c4:	400a      	ands	r2, r1
 80005c6:	801a      	strh	r2, [r3, #0]
        uint8_t current_char = rx_buffer[pos];
 80005c8:	183b      	adds	r3, r7, r0
 80005ca:	881a      	ldrh	r2, [r3, #0]
 80005cc:	230b      	movs	r3, #11
 80005ce:	18fb      	adds	r3, r7, r3
 80005d0:	4934      	ldr	r1, [pc, #208]	; (80006a4 <process_data_chunk+0x110>)
 80005d2:	5c8a      	ldrb	r2, [r1, r2]
 80005d4:	701a      	strb	r2, [r3, #0]

        // Check for buffer overflow, etc. (optional)
        if (response_index >= MAX_RESPONSE_LEN - 1)
 80005d6:	4b34      	ldr	r3, [pc, #208]	; (80006a8 <process_data_chunk+0x114>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	2b7e      	cmp	r3, #126	; 0x7e
 80005de:	d90b      	bls.n	80005f8 <process_data_chunk+0x64>
        {
            // If the response buffer is full, reset it.
            response_index = 0;
 80005e0:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <process_data_chunk+0x114>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	801a      	strh	r2, [r3, #0]
            memset(response_buffer, 0, MAX_RESPONSE_LEN);
 80005e6:	4b31      	ldr	r3, [pc, #196]	; (80006ac <process_data_chunk+0x118>)
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	2100      	movs	r1, #0
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 fea1 	bl	8003334 <memset>
            response_ready = 0;
 80005f2:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <process_data_chunk+0x11c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
            // Optionally return or handle error
        }

        // Store the character in the response buffer.
        response_buffer[response_index] = current_char;
 80005f8:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <process_data_chunk+0x114>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	0019      	movs	r1, r3
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <process_data_chunk+0x118>)
 8000602:	220b      	movs	r2, #11
 8000604:	18ba      	adds	r2, r7, r2
 8000606:	7812      	ldrb	r2, [r2, #0]
 8000608:	545a      	strb	r2, [r3, r1]
        response_index++;
 800060a:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <process_data_chunk+0x114>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	b29b      	uxth	r3, r3
 8000610:	3301      	adds	r3, #1
 8000612:	b29a      	uxth	r2, r3
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <process_data_chunk+0x114>)
 8000616:	801a      	strh	r2, [r3, #0]

        // If we detect a "\r\n" sequence in the response buffer:
        if (response_index > 1 &&
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <process_data_chunk+0x114>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	b29b      	uxth	r3, r3
 800061e:	2b01      	cmp	r3, #1
 8000620:	d92e      	bls.n	8000680 <process_data_chunk+0xec>
            response_buffer[response_index - 2] == '\r' &&
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <process_data_chunk+0x114>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	b29b      	uxth	r3, r3
 8000628:	3b02      	subs	r3, #2
 800062a:	4a20      	ldr	r2, [pc, #128]	; (80006ac <process_data_chunk+0x118>)
 800062c:	5cd3      	ldrb	r3, [r2, r3]
        if (response_index > 1 &&
 800062e:	2b0d      	cmp	r3, #13
 8000630:	d126      	bne.n	8000680 <process_data_chunk+0xec>
            response_buffer[response_index - 1] == '\n')
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <process_data_chunk+0x114>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	3b01      	subs	r3, #1
 800063a:	4a1c      	ldr	r2, [pc, #112]	; (80006ac <process_data_chunk+0x118>)
 800063c:	5cd3      	ldrb	r3, [r2, r3]
            response_buffer[response_index - 2] == '\r' &&
 800063e:	2b0a      	cmp	r3, #10
 8000640:	d11e      	bne.n	8000680 <process_data_chunk+0xec>
        {
            // Terminate the string before the newline.
            response_buffer[response_index - 2] = '\0';
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <process_data_chunk+0x114>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	b29b      	uxth	r3, r3
 8000648:	3b02      	subs	r3, #2
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <process_data_chunk+0x118>)
 800064c:	2100      	movs	r1, #0
 800064e:	54d1      	strb	r1, [r2, r3]
            response_ready = 1;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <process_data_chunk+0x11c>)
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]

            // Update the global tail pointer to skip over the processed message.
            // (start_pos + i + 1) is the new tail; adjust for wrap-around.
            rx_tail = (start_pos + i + 1) % RX_BUFFER_SIZE;
 8000656:	1dbb      	adds	r3, r7, #6
 8000658:	881a      	ldrh	r2, [r3, #0]
 800065a:	230e      	movs	r3, #14
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	18d3      	adds	r3, r2, r3
 8000662:	3301      	adds	r3, #1
 8000664:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <process_data_chunk+0x120>)
 8000666:	4013      	ands	r3, r2
 8000668:	d503      	bpl.n	8000672 <process_data_chunk+0xde>
 800066a:	3b01      	subs	r3, #1
 800066c:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <process_data_chunk+0x124>)
 800066e:	4313      	orrs	r3, r2
 8000670:	3301      	adds	r3, #1
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <process_data_chunk+0x128>)
 8000676:	801a      	strh	r2, [r3, #0]

            // Reset the response index so that the next message starts fresh.
            response_index = 0;
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <process_data_chunk+0x114>)
 800067a:	2200      	movs	r2, #0
 800067c:	801a      	strh	r2, [r3, #0]
            return;  // Stop processing further data for this idle event.
 800067e:	e00d      	b.n	800069c <process_data_chunk+0x108>
    for (uint16_t i = 0; i < length; i++)
 8000680:	210e      	movs	r1, #14
 8000682:	187b      	adds	r3, r7, r1
 8000684:	881a      	ldrh	r2, [r3, #0]
 8000686:	187b      	adds	r3, r7, r1
 8000688:	3201      	adds	r2, #1
 800068a:	801a      	strh	r2, [r3, #0]
 800068c:	230e      	movs	r3, #14
 800068e:	18fa      	adds	r2, r7, r3
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	8812      	ldrh	r2, [r2, #0]
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	429a      	cmp	r2, r3
 8000698:	d200      	bcs.n	800069c <process_data_chunk+0x108>
 800069a:	e789      	b.n	80005b0 <process_data_chunk+0x1c>
        }
    }
}
 800069c:	46bd      	mov	sp, r7
 800069e:	b004      	add	sp, #16
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	2000019c 	.word	0x2000019c
 80006a8:	2000032c 	.word	0x2000032c
 80006ac:	200002a4 	.word	0x200002a4
 80006b0:	200002a0 	.word	0x200002a0
 80006b4:	800000ff 	.word	0x800000ff
 80006b8:	ffffff00 	.word	0xffffff00
 80006bc:	2000029e 	.word	0x2000029e

080006c0 <HAL_UART_TxCpltCallback>:
  * @brief  This function is called when a TX DMA transfer is complete.
  * @param  huart: Pointer to the UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_UART_TxCpltCallback+0x20>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d102      	bne.n	80006d8 <HAL_UART_TxCpltCallback+0x18>
  {
    tx_busy = 0;
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <HAL_UART_TxCpltCallback+0x24>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
  }
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40013800 	.word	0x40013800
 80006e4:	20000324 	.word	0x20000324

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_MspInit+0x44>)
 80006fc:	699a      	ldr	r2, [r3, #24]
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_MspInit+0x44>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	619a      	str	r2, [r3, #24]
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_MspInit+0x44>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_MspInit+0x44>)
 8000714:	69da      	ldr	r2, [r3, #28]
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_MspInit+0x44>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0549      	lsls	r1, r1, #21
 800071c:	430a      	orrs	r2, r1
 800071e:	61da      	str	r2, [r3, #28]
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_MspInit+0x44>)
 8000722:	69da      	ldr	r2, [r3, #28]
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	055b      	lsls	r3, r3, #21
 8000728:	4013      	ands	r3, r2
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b08b      	sub	sp, #44	; 0x2c
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	2414      	movs	r4, #20
 8000746:	193b      	adds	r3, r7, r4
 8000748:	0018      	movs	r0, r3
 800074a:	2314      	movs	r3, #20
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f002 fdf0 	bl	8003334 <memset>
  if(huart->Instance==USART1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a47      	ldr	r2, [pc, #284]	; (8000878 <HAL_UART_MspInit+0x13c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d000      	beq.n	8000760 <HAL_UART_MspInit+0x24>
 800075e:	e087      	b.n	8000870 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000760:	4b46      	ldr	r3, [pc, #280]	; (800087c <HAL_UART_MspInit+0x140>)
 8000762:	699a      	ldr	r2, [r3, #24]
 8000764:	4b45      	ldr	r3, [pc, #276]	; (800087c <HAL_UART_MspInit+0x140>)
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	01c9      	lsls	r1, r1, #7
 800076a:	430a      	orrs	r2, r1
 800076c:	619a      	str	r2, [r3, #24]
 800076e:	4b43      	ldr	r3, [pc, #268]	; (800087c <HAL_UART_MspInit+0x140>)
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	01db      	lsls	r3, r3, #7
 8000776:	4013      	ands	r3, r2
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b3f      	ldr	r3, [pc, #252]	; (800087c <HAL_UART_MspInit+0x140>)
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	4b3e      	ldr	r3, [pc, #248]	; (800087c <HAL_UART_MspInit+0x140>)
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	0289      	lsls	r1, r1, #10
 8000786:	430a      	orrs	r2, r1
 8000788:	615a      	str	r2, [r3, #20]
 800078a:	4b3c      	ldr	r3, [pc, #240]	; (800087c <HAL_UART_MspInit+0x140>)
 800078c:	695a      	ldr	r2, [r3, #20]
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	029b      	lsls	r3, r3, #10
 8000792:	4013      	ands	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	22c0      	movs	r2, #192	; 0xc0
 800079c:	00d2      	lsls	r2, r2, #3
 800079e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	0021      	movs	r1, r4
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2202      	movs	r2, #2
 80007a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2203      	movs	r2, #3
 80007b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2201      	movs	r2, #1
 80007b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	187a      	adds	r2, r7, r1
 80007bc:	2390      	movs	r3, #144	; 0x90
 80007be:	05db      	lsls	r3, r3, #23
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 fcbe 	bl	8001144 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <HAL_UART_MspInit+0x144>)
 80007ca:	4a2e      	ldr	r2, [pc, #184]	; (8000884 <HAL_UART_MspInit+0x148>)
 80007cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <HAL_UART_MspInit+0x144>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <HAL_UART_MspInit+0x144>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007da:	4b29      	ldr	r3, [pc, #164]	; (8000880 <HAL_UART_MspInit+0x144>)
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <HAL_UART_MspInit+0x144>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <HAL_UART_MspInit+0x144>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <HAL_UART_MspInit+0x144>)
 80007ee:	2220      	movs	r2, #32
 80007f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <HAL_UART_MspInit+0x144>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <HAL_UART_MspInit+0x144>)
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 fa8c 	bl	8000d18 <HAL_DMA_Init>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000804:	f7ff ff70 	bl	80006e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <HAL_UART_MspInit+0x144>)
 800080c:	675a      	str	r2, [r3, #116]	; 0x74
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <HAL_UART_MspInit+0x144>)
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <HAL_UART_MspInit+0x14c>)
 8000816:	4a1d      	ldr	r2, [pc, #116]	; (800088c <HAL_UART_MspInit+0x150>)
 8000818:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <HAL_UART_MspInit+0x14c>)
 800081c:	2210      	movs	r2, #16
 800081e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_UART_MspInit+0x14c>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <HAL_UART_MspInit+0x14c>)
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <HAL_UART_MspInit+0x14c>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_UART_MspInit+0x14c>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <HAL_UART_MspInit+0x14c>)
 800083a:	2220      	movs	r2, #32
 800083c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_UART_MspInit+0x14c>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_UART_MspInit+0x14c>)
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fa66 	bl	8000d18 <HAL_DMA_Init>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8000850:	f7ff ff4a 	bl	80006e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <HAL_UART_MspInit+0x14c>)
 8000858:	671a      	str	r2, [r3, #112]	; 0x70
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_UART_MspInit+0x14c>)
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	201b      	movs	r0, #27
 8000866:	f000 fa25 	bl	8000cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800086a:	201b      	movs	r0, #27
 800086c:	f000 fa37 	bl	8000cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b00b      	add	sp, #44	; 0x2c
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	40013800 	.word	0x40013800
 800087c:	40021000 	.word	0x40021000
 8000880:	20000114 	.word	0x20000114
 8000884:	40020030 	.word	0x40020030
 8000888:	20000158 	.word	0x20000158
 800088c:	4002001c 	.word	0x4002001c

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b4:	f000 f936 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <DMA1_Channel2_3_IRQHandler+0x1c>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fb51 	bl	8000f6e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <DMA1_Channel2_3_IRQHandler+0x20>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fb4d 	bl	8000f6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000158 	.word	0x20000158
 80008e0:	20000114 	.word	0x20000114

080008e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 80008ea:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <USART1_IRQHandler+0xd0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	69db      	ldr	r3, [r3, #28]
 80008f0:	2210      	movs	r2, #16
 80008f2:	4013      	ands	r3, r2
 80008f4:	2b10      	cmp	r3, #16
 80008f6:	d155      	bne.n	80009a4 <USART1_IRQHandler+0xc0>
	  {
	      __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <USART1_IRQHandler+0xd0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2210      	movs	r2, #16
 80008fe:	621a      	str	r2, [r3, #32]
	      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000900:	2390      	movs	r3, #144	; 0x90
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	2120      	movs	r1, #32
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fda9 	bl	800145e <HAL_GPIO_TogglePin>

	      // Get the current DMA head pointer.
	      rx_head = RX_BUFFER_SIZE - hdma_usart1_rx.Instance->CNDTR;
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <USART1_IRQHandler+0xd4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	b29b      	uxth	r3, r3
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	0052      	lsls	r2, r2, #1
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	b29a      	uxth	r2, r3
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <USART1_IRQHandler+0xd8>)
 800091e:	801a      	strh	r2, [r3, #0]

	      // If a complete message is already waiting, do not process new data,
	      // just update the tail pointer to skip over any new/old data.
	      if (response_ready)
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <USART1_IRQHandler+0xdc>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d005      	beq.n	8000936 <USART1_IRQHandler+0x52>
	      {
	          rx_tail = rx_head;
 800092a:	4b24      	ldr	r3, [pc, #144]	; (80009bc <USART1_IRQHandler+0xd8>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <USART1_IRQHandler+0xe0>)
 8000932:	801a      	strh	r2, [r3, #0]
 8000934:	e036      	b.n	80009a4 <USART1_IRQHandler+0xc0>
	      }
	      else
	      {
	          uint16_t start = rx_tail;
 8000936:	1dbb      	adds	r3, r7, #6
 8000938:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <USART1_IRQHandler+0xe0>)
 800093a:	8812      	ldrh	r2, [r2, #0]
 800093c:	801a      	strh	r2, [r3, #0]
	          uint16_t end = rx_head;
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <USART1_IRQHandler+0xd8>)
 8000942:	8812      	ldrh	r2, [r2, #0]
 8000944:	801a      	strh	r2, [r3, #0]

	          if (end >= start)
 8000946:	1d3a      	adds	r2, r7, #4
 8000948:	1dbb      	adds	r3, r7, #6
 800094a:	8812      	ldrh	r2, [r2, #0]
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	d30c      	bcc.n	800096c <USART1_IRQHandler+0x88>
	          {
	              process_data_chunk(start, end - start);
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	1dbb      	adds	r3, r7, #6
 8000956:	8812      	ldrh	r2, [r2, #0]
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	b29a      	uxth	r2, r3
 800095e:	1dbb      	adds	r3, r7, #6
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	0011      	movs	r1, r2
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff fe15 	bl	8000594 <process_data_chunk>
 800096a:	e011      	b.n	8000990 <USART1_IRQHandler+0xac>
	          }
	          else
	          {
	              process_data_chunk(start, RX_BUFFER_SIZE - start);
 800096c:	1dbb      	adds	r3, r7, #6
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0052      	lsls	r2, r2, #1
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	b29a      	uxth	r2, r3
 8000978:	1dbb      	adds	r3, r7, #6
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	0011      	movs	r1, r2
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff fe08 	bl	8000594 <process_data_chunk>
	              process_data_chunk(0, end);
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	0019      	movs	r1, r3
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe02 	bl	8000594 <process_data_chunk>
	          }

	          // If process_data_chunk() did not detect a complete message,
	          // update the tail pointer to the current DMA head.
	          if (!response_ready)
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <USART1_IRQHandler+0xdc>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d104      	bne.n	80009a4 <USART1_IRQHandler+0xc0>
	          {
	              rx_tail = rx_head;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <USART1_IRQHandler+0xd8>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <USART1_IRQHandler+0xe0>)
 80009a2:	801a      	strh	r2, [r3, #0]
	      }
	  }


  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <USART1_IRQHandler+0xd0>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f001 fbdc 	bl	8002164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b002      	add	sp, #8
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2000008c 	.word	0x2000008c
 80009b8:	20000114 	.word	0x20000114
 80009bc:	2000029c 	.word	0x2000029c
 80009c0:	200002a0 	.word	0x200002a0
 80009c4:	2000029e 	.word	0x2000029e

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	18d3      	adds	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f002 fc72 	bl	80032e0 <__errno>
 80009fc:	0003      	movs	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	425b      	negs	r3, r3
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	18d2      	adds	r2, r2, r3
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <_sbrk+0x64>)
 8000a18:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b006      	add	sp, #24
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20002000 	.word	0x20002000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	20000330 	.word	0x20000330
 8000a30:	20000348 	.word	0x20000348

08000a34 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a44:	f7ff fff6 	bl	8000a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	; (8000a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	; (8000a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <LoopForever+0xe>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	; (8000a8c <LoopForever+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a6e:	f002 fc3d 	bl	80032ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a72:	f7ff fbe7 	bl	8000244 <main>

08000a76 <LoopForever>:

LoopForever:
    b LoopForever
 8000a76:	e7fe      	b.n	8000a76 <LoopForever>
  ldr   r0, =_estack
 8000a78:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a84:	08003ce0 	.word	0x08003ce0
  ldr r2, =_sbss
 8000a88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a8c:	20000348 	.word	0x20000348

08000a90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_IRQHandler>
	...

08000a94 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <HAL_Init+0x24>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_Init+0x24>)
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 f809 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aaa:	f7ff fe23 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_InitTick+0x5c>)
 8000ac6:	681c      	ldr	r4, [r3, #0]
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_InitTick+0x60>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	0019      	movs	r1, r3
 8000ace:	23fa      	movs	r3, #250	; 0xfa
 8000ad0:	0098      	lsls	r0, r3, #2
 8000ad2:	f7ff fb2b 	bl	800012c <__udivsi3>
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	0019      	movs	r1, r3
 8000ada:	0020      	movs	r0, r4
 8000adc:	f7ff fb26 	bl	800012c <__udivsi3>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f90b 	bl	8000cfe <HAL_SYSTICK_Config>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e00f      	b.n	8000b10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d80b      	bhi.n	8000b0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	2301      	movs	r3, #1
 8000afa:	425b      	negs	r3, r3
 8000afc:	2200      	movs	r2, #0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 f8d8 	bl	8000cb4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_InitTick+0x64>)
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b003      	add	sp, #12
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_IncTick+0x1c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_IncTick+0x20>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	18d2      	adds	r2, r2, r3
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_IncTick+0x20>)
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000008 	.word	0x20000008
 8000b44:	20000334 	.word	0x20000334

08000b48 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <HAL_GetTick+0x10>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	0018      	movs	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000334 	.word	0x20000334

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	0002      	movs	r2, r0
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b6e:	d809      	bhi.n	8000b84 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	001a      	movs	r2, r3
 8000b76:	231f      	movs	r3, #31
 8000b78:	401a      	ands	r2, r3
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_EnableIRQ+0x30>)
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4091      	lsls	r1, r2
 8000b80:	000a      	movs	r2, r1
 8000b82:	601a      	str	r2, [r3, #0]
  }
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b002      	add	sp, #8
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	0002      	movs	r2, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba4:	d828      	bhi.n	8000bf8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba6:	4a2f      	ldr	r2, [pc, #188]	; (8000c64 <__NVIC_SetPriority+0xd4>)
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	33c0      	adds	r3, #192	; 0xc0
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	589b      	ldr	r3, [r3, r2]
 8000bb6:	1dfa      	adds	r2, r7, #7
 8000bb8:	7812      	ldrb	r2, [r2, #0]
 8000bba:	0011      	movs	r1, r2
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	400a      	ands	r2, r1
 8000bc0:	00d2      	lsls	r2, r2, #3
 8000bc2:	21ff      	movs	r1, #255	; 0xff
 8000bc4:	4091      	lsls	r1, r2
 8000bc6:	000a      	movs	r2, r1
 8000bc8:	43d2      	mvns	r2, r2
 8000bca:	401a      	ands	r2, r3
 8000bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	019b      	lsls	r3, r3, #6
 8000bd2:	22ff      	movs	r2, #255	; 0xff
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	0018      	movs	r0, r3
 8000bdc:	2303      	movs	r3, #3
 8000bde:	4003      	ands	r3, r0
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be4:	481f      	ldr	r0, [pc, #124]	; (8000c64 <__NVIC_SetPriority+0xd4>)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b25b      	sxtb	r3, r3
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	33c0      	adds	r3, #192	; 0xc0
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bf6:	e031      	b.n	8000c5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <__NVIC_SetPriority+0xd8>)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	0019      	movs	r1, r3
 8000c00:	230f      	movs	r3, #15
 8000c02:	400b      	ands	r3, r1
 8000c04:	3b08      	subs	r3, #8
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	3306      	adds	r3, #6
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	18d3      	adds	r3, r2, r3
 8000c0e:	3304      	adds	r3, #4
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	1dfa      	adds	r2, r7, #7
 8000c14:	7812      	ldrb	r2, [r2, #0]
 8000c16:	0011      	movs	r1, r2
 8000c18:	2203      	movs	r2, #3
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	00d2      	lsls	r2, r2, #3
 8000c1e:	21ff      	movs	r1, #255	; 0xff
 8000c20:	4091      	lsls	r1, r2
 8000c22:	000a      	movs	r2, r1
 8000c24:	43d2      	mvns	r2, r2
 8000c26:	401a      	ands	r2, r3
 8000c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	22ff      	movs	r2, #255	; 0xff
 8000c30:	401a      	ands	r2, r3
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	0018      	movs	r0, r3
 8000c38:	2303      	movs	r3, #3
 8000c3a:	4003      	ands	r3, r0
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c40:	4809      	ldr	r0, [pc, #36]	; (8000c68 <__NVIC_SetPriority+0xd8>)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	001c      	movs	r4, r3
 8000c48:	230f      	movs	r3, #15
 8000c4a:	4023      	ands	r3, r4
 8000c4c:	3b08      	subs	r3, #8
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	430a      	orrs	r2, r1
 8000c52:	3306      	adds	r3, #6
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	18c3      	adds	r3, r0, r3
 8000c58:	3304      	adds	r3, #4
 8000c5a:	601a      	str	r2, [r3, #0]
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b003      	add	sp, #12
 8000c62:	bd90      	pop	{r4, r7, pc}
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	1e5a      	subs	r2, r3, #1
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	045b      	lsls	r3, r3, #17
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d301      	bcc.n	8000c84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c80:	2301      	movs	r3, #1
 8000c82:	e010      	b.n	8000ca6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <SysTick_Config+0x44>)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	425b      	negs	r3, r3
 8000c90:	2103      	movs	r1, #3
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff ff7c 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x44>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x44>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	1c02      	adds	r2, r0, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b25b      	sxtb	r3, r3
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f7ff ff5d 	bl	8000b90 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b004      	add	sp, #16
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	0002      	movs	r2, r0
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff ff33 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b002      	add	sp, #8
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ffaf 	bl	8000c6c <SysTick_Config>
 8000d0e:	0003      	movs	r3, r0
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e036      	b.n	8000d9c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2221      	movs	r2, #33	; 0x21
 8000d32:	2102      	movs	r1, #2
 8000d34:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4a18      	ldr	r2, [pc, #96]	; (8000da4 <HAL_DMA_Init+0x8c>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 f9c4 	bl	800110c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2221      	movs	r2, #33	; 0x21
 8000d8e:	2101      	movs	r1, #1
 8000d90:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2220      	movs	r2, #32
 8000d96:	2100      	movs	r1, #0
 8000d98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b004      	add	sp, #16
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	ffffc00f 	.word	0xffffc00f

08000da8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000db6:	2317      	movs	r3, #23
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	5c9b      	ldrb	r3, [r3, r2]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d101      	bne.n	8000dcc <HAL_DMA_Start_IT+0x24>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e04f      	b.n	8000e6c <HAL_DMA_Start_IT+0xc4>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2220      	movs	r2, #32
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2221      	movs	r2, #33	; 0x21
 8000dd8:	5c9b      	ldrb	r3, [r3, r2]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d13a      	bne.n	8000e56 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2221      	movs	r2, #33	; 0x21
 8000de4:	2102      	movs	r1, #2
 8000de6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2200      	movs	r2, #0
 8000dec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	438a      	bics	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f000 f954 	bl	80010b2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d008      	beq.n	8000e24 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	210e      	movs	r1, #14
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e00f      	b.n	8000e44 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	210a      	movs	r1, #10
 8000e30:	430a      	orrs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2104      	movs	r1, #4
 8000e40:	438a      	bics	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2101      	movs	r1, #1
 8000e50:	430a      	orrs	r2, r1
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	e007      	b.n	8000e66 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2220      	movs	r2, #32
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e5e:	2317      	movs	r3, #23
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	2202      	movs	r2, #2
 8000e64:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000e66:	2317      	movs	r3, #23
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	781b      	ldrb	r3, [r3, #0]
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b006      	add	sp, #24
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2221      	movs	r2, #33	; 0x21
 8000e80:	5c9b      	ldrb	r3, [r3, r2]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d008      	beq.n	8000e9a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2220      	movs	r2, #32
 8000e92:	2100      	movs	r1, #0
 8000e94:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e020      	b.n	8000edc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	210e      	movs	r1, #14
 8000ea6:	438a      	bics	r2, r1
 8000ea8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	438a      	bics	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4091      	lsls	r1, r2
 8000ec6:	000a      	movs	r2, r1
 8000ec8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2221      	movs	r2, #33	; 0x21
 8000ece:	2101      	movs	r1, #1
 8000ed0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eec:	210f      	movs	r1, #15
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2221      	movs	r2, #33	; 0x21
 8000ef8:	5c9b      	ldrb	r3, [r3, r2]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d006      	beq.n	8000f0e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2204      	movs	r2, #4
 8000f04:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
 8000f0c:	e028      	b.n	8000f60 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	210e      	movs	r1, #14
 8000f1a:	438a      	bics	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	438a      	bics	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f36:	2101      	movs	r1, #1
 8000f38:	4091      	lsls	r1, r2
 8000f3a:	000a      	movs	r2, r1
 8000f3c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2221      	movs	r2, #33	; 0x21
 8000f42:	2101      	movs	r1, #1
 8000f44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	0010      	movs	r0, r2
 8000f5e:	4798      	blx	r3
    }
  }
  return status;
 8000f60:	230f      	movs	r3, #15
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	781b      	ldrb	r3, [r3, #0]
}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b004      	add	sp, #16
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	0013      	movs	r3, r2
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	4013      	ands	r3, r2
 8000f94:	d024      	beq.n	8000fe0 <HAL_DMA_IRQHandler+0x72>
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d020      	beq.n	8000fe0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d107      	bne.n	8000fba <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	438a      	bics	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d100      	bne.n	8000fd4 <HAL_DMA_IRQHandler+0x66>
 8000fd2:	e06a      	b.n	80010aa <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	0010      	movs	r0, r2
 8000fdc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000fde:	e064      	b.n	80010aa <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4013      	ands	r3, r2
 8000fee:	d02b      	beq.n	8001048 <HAL_DMA_IRQHandler+0xda>
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d027      	beq.n	8001048 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2220      	movs	r2, #32
 8001000:	4013      	ands	r3, r2
 8001002:	d10b      	bne.n	800101c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	210a      	movs	r1, #10
 8001010:	438a      	bics	r2, r1
 8001012:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2221      	movs	r2, #33	; 0x21
 8001018:	2101      	movs	r1, #1
 800101a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001024:	2102      	movs	r1, #2
 8001026:	4091      	lsls	r1, r2
 8001028:	000a      	movs	r2, r1
 800102a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2220      	movs	r2, #32
 8001030:	2100      	movs	r1, #0
 8001032:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	2b00      	cmp	r3, #0
 800103a:	d036      	beq.n	80010aa <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	0010      	movs	r0, r2
 8001044:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001046:	e030      	b.n	80010aa <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	2208      	movs	r2, #8
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	4013      	ands	r3, r2
 8001056:	d028      	beq.n	80010aa <HAL_DMA_IRQHandler+0x13c>
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2208      	movs	r2, #8
 800105c:	4013      	ands	r3, r2
 800105e:	d024      	beq.n	80010aa <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	210e      	movs	r1, #14
 800106c:	438a      	bics	r2, r1
 800106e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001078:	2101      	movs	r1, #1
 800107a:	4091      	lsls	r1, r2
 800107c:	000a      	movs	r2, r1
 800107e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2221      	movs	r2, #33	; 0x21
 800108a:	2101      	movs	r1, #1
 800108c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2220      	movs	r2, #32
 8001092:	2100      	movs	r1, #0
 8001094:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	0010      	movs	r0, r2
 80010a6:	4798      	blx	r3
    }
  }
}
 80010a8:	e7ff      	b.n	80010aa <HAL_DMA_IRQHandler+0x13c>
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c8:	2101      	movs	r1, #1
 80010ca:	4091      	lsls	r1, r2
 80010cc:	000a      	movs	r2, r1
 80010ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b10      	cmp	r3, #16
 80010de:	d108      	bne.n	80010f2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010f0:	e007      	b.n	8001102 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	60da      	str	r2, [r3, #12]
}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b004      	add	sp, #16
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a08      	ldr	r2, [pc, #32]	; (800113c <DMA_CalcBaseAndBitshift+0x30>)
 800111a:	4694      	mov	ip, r2
 800111c:	4463      	add	r3, ip
 800111e:	2114      	movs	r1, #20
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff f803 	bl	800012c <__udivsi3>
 8001126:	0003      	movs	r3, r0
 8001128:	009a      	lsls	r2, r3, #2
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a03      	ldr	r2, [pc, #12]	; (8001140 <DMA_CalcBaseAndBitshift+0x34>)
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}
 800113c:	bffdfff8 	.word	0xbffdfff8
 8001140:	40020000 	.word	0x40020000

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	e14f      	b.n	80013f4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4091      	lsls	r1, r2
 800115e:	000a      	movs	r2, r1
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d100      	bne.n	800116c <HAL_GPIO_Init+0x28>
 800116a:	e140      	b.n	80013ee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	4013      	ands	r3, r2
 8001174:	2b01      	cmp	r3, #1
 8001176:	d005      	beq.n	8001184 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2203      	movs	r2, #3
 800117e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001180:	2b02      	cmp	r3, #2
 8001182:	d130      	bne.n	80011e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	409a      	lsls	r2, r3
 8001192:	0013      	movs	r3, r2
 8001194:	43da      	mvns	r2, r3
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	409a      	lsls	r2, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ba:	2201      	movs	r2, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	43da      	mvns	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	2201      	movs	r2, #1
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
 80011d8:	0013      	movs	r3, r2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d017      	beq.n	8001222 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	409a      	lsls	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	43da      	mvns	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2203      	movs	r2, #3
 8001228:	4013      	ands	r3, r2
 800122a:	2b02      	cmp	r3, #2
 800122c:	d123      	bne.n	8001276 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	58d3      	ldr	r3, [r2, r3]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2207      	movs	r2, #7
 8001240:	4013      	ands	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	43da      	mvns	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2107      	movs	r1, #7
 800125a:	400b      	ands	r3, r1
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	6939      	ldr	r1, [r7, #16]
 8001274:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	409a      	lsls	r2, r3
 8001284:	0013      	movs	r3, r2
 8001286:	43da      	mvns	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2203      	movs	r2, #3
 8001294:	401a      	ands	r2, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	409a      	lsls	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	23c0      	movs	r3, #192	; 0xc0
 80012b0:	029b      	lsls	r3, r3, #10
 80012b2:	4013      	ands	r3, r2
 80012b4:	d100      	bne.n	80012b8 <HAL_GPIO_Init+0x174>
 80012b6:	e09a      	b.n	80013ee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b8:	4b54      	ldr	r3, [pc, #336]	; (800140c <HAL_GPIO_Init+0x2c8>)
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	4b53      	ldr	r3, [pc, #332]	; (800140c <HAL_GPIO_Init+0x2c8>)
 80012be:	2101      	movs	r1, #1
 80012c0:	430a      	orrs	r2, r1
 80012c2:	619a      	str	r2, [r3, #24]
 80012c4:	4b51      	ldr	r3, [pc, #324]	; (800140c <HAL_GPIO_Init+0x2c8>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4013      	ands	r3, r2
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d0:	4a4f      	ldr	r2, [pc, #316]	; (8001410 <HAL_GPIO_Init+0x2cc>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	589b      	ldr	r3, [r3, r2]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2203      	movs	r2, #3
 80012e2:	4013      	ands	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	409a      	lsls	r2, r3
 80012ea:	0013      	movs	r3, r2
 80012ec:	43da      	mvns	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	2390      	movs	r3, #144	; 0x90
 80012f8:	05db      	lsls	r3, r3, #23
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x1e2>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a44      	ldr	r2, [pc, #272]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x1de>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a43      	ldr	r2, [pc, #268]	; (8001418 <HAL_GPIO_Init+0x2d4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x1da>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a42      	ldr	r2, [pc, #264]	; (800141c <HAL_GPIO_Init+0x2d8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x1d6>
 8001316:	2303      	movs	r3, #3
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x1e4>
 800131a:	2305      	movs	r3, #5
 800131c:	e004      	b.n	8001328 <HAL_GPIO_Init+0x1e4>
 800131e:	2302      	movs	r3, #2
 8001320:	e002      	b.n	8001328 <HAL_GPIO_Init+0x1e4>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x1e4>
 8001326:	2300      	movs	r3, #0
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	2103      	movs	r1, #3
 800132c:	400a      	ands	r2, r1
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	4093      	lsls	r3, r2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001338:	4935      	ldr	r1, [pc, #212]	; (8001410 <HAL_GPIO_Init+0x2cc>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001346:	4b36      	ldr	r3, [pc, #216]	; (8001420 <HAL_GPIO_Init+0x2dc>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	035b      	lsls	r3, r3, #13
 800135e:	4013      	ands	r3, r2
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_GPIO_Init+0x2dc>)
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_GPIO_Init+0x2dc>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43da      	mvns	r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	039b      	lsls	r3, r3, #14
 8001388:	4013      	ands	r3, r2
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <HAL_GPIO_Init+0x2dc>)
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_GPIO_Init+0x2dc>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43da      	mvns	r2, r3
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	029b      	lsls	r3, r3, #10
 80013b2:	4013      	ands	r3, r2
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_GPIO_Init+0x2dc>)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <HAL_GPIO_Init+0x2dc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43da      	mvns	r2, r3
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	025b      	lsls	r3, r3, #9
 80013dc:	4013      	ands	r3, r2
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_GPIO_Init+0x2dc>)
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	40da      	lsrs	r2, r3
 80013fc:	1e13      	subs	r3, r2, #0
 80013fe:	d000      	beq.n	8001402 <HAL_GPIO_Init+0x2be>
 8001400:	e6a8      	b.n	8001154 <HAL_GPIO_Init+0x10>
  } 
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b006      	add	sp, #24
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000800 	.word	0x48000800
 800141c:	48000c00 	.word	0x48000c00
 8001420:	40010400 	.word	0x40010400

08001424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	0008      	movs	r0, r1
 800142e:	0011      	movs	r1, r2
 8001430:	1cbb      	adds	r3, r7, #2
 8001432:	1c02      	adds	r2, r0, #0
 8001434:	801a      	strh	r2, [r3, #0]
 8001436:	1c7b      	adds	r3, r7, #1
 8001438:	1c0a      	adds	r2, r1, #0
 800143a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800143c:	1c7b      	adds	r3, r7, #1
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001444:	1cbb      	adds	r3, r7, #2
 8001446:	881a      	ldrh	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800144c:	e003      	b.n	8001456 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144e:	1cbb      	adds	r3, r7, #2
 8001450:	881a      	ldrh	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	000a      	movs	r2, r1
 8001468:	1cbb      	adds	r3, r7, #2
 800146a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001472:	1cbb      	adds	r3, r7, #2
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4013      	ands	r3, r2
 800147a:	041a      	lsls	r2, r3, #16
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	1cb9      	adds	r1, r7, #2
 8001482:	8809      	ldrh	r1, [r1, #0]
 8001484:	400b      	ands	r3, r1
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b004      	add	sp, #16
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e301      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2201      	movs	r2, #1
 80014ac:	4013      	ands	r3, r2
 80014ae:	d100      	bne.n	80014b2 <HAL_RCC_OscConfig+0x1e>
 80014b0:	e08d      	b.n	80015ce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014b2:	4bc3      	ldr	r3, [pc, #780]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	220c      	movs	r2, #12
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d00e      	beq.n	80014dc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014be:	4bc0      	ldr	r3, [pc, #768]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	220c      	movs	r2, #12
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d116      	bne.n	80014f8 <HAL_RCC_OscConfig+0x64>
 80014ca:	4bbd      	ldr	r3, [pc, #756]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	025b      	lsls	r3, r3, #9
 80014d2:	401a      	ands	r2, r3
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	025b      	lsls	r3, r3, #9
 80014d8:	429a      	cmp	r2, r3
 80014da:	d10d      	bne.n	80014f8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	4bb8      	ldr	r3, [pc, #736]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	029b      	lsls	r3, r3, #10
 80014e4:	4013      	ands	r3, r2
 80014e6:	d100      	bne.n	80014ea <HAL_RCC_OscConfig+0x56>
 80014e8:	e070      	b.n	80015cc <HAL_RCC_OscConfig+0x138>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d000      	beq.n	80014f4 <HAL_RCC_OscConfig+0x60>
 80014f2:	e06b      	b.n	80015cc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e2d8      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d107      	bne.n	8001510 <HAL_RCC_OscConfig+0x7c>
 8001500:	4baf      	ldr	r3, [pc, #700]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4bae      	ldr	r3, [pc, #696]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001506:	2180      	movs	r1, #128	; 0x80
 8001508:	0249      	lsls	r1, r1, #9
 800150a:	430a      	orrs	r2, r1
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e02f      	b.n	8001570 <HAL_RCC_OscConfig+0xdc>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10c      	bne.n	8001532 <HAL_RCC_OscConfig+0x9e>
 8001518:	4ba9      	ldr	r3, [pc, #676]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4ba8      	ldr	r3, [pc, #672]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800151e:	49a9      	ldr	r1, [pc, #676]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 8001520:	400a      	ands	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	4ba6      	ldr	r3, [pc, #664]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4ba5      	ldr	r3, [pc, #660]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800152a:	49a7      	ldr	r1, [pc, #668]	; (80017c8 <HAL_RCC_OscConfig+0x334>)
 800152c:	400a      	ands	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e01e      	b.n	8001570 <HAL_RCC_OscConfig+0xdc>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b05      	cmp	r3, #5
 8001538:	d10e      	bne.n	8001558 <HAL_RCC_OscConfig+0xc4>
 800153a:	4ba1      	ldr	r3, [pc, #644]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4ba0      	ldr	r3, [pc, #640]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	02c9      	lsls	r1, r1, #11
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	4b9d      	ldr	r3, [pc, #628]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b9c      	ldr	r3, [pc, #624]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	0249      	lsls	r1, r1, #9
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0xdc>
 8001558:	4b99      	ldr	r3, [pc, #612]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b98      	ldr	r3, [pc, #608]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800155e:	4999      	ldr	r1, [pc, #612]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 8001560:	400a      	ands	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	4b96      	ldr	r3, [pc, #600]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b95      	ldr	r3, [pc, #596]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800156a:	4997      	ldr	r1, [pc, #604]	; (80017c8 <HAL_RCC_OscConfig+0x334>)
 800156c:	400a      	ands	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d014      	beq.n	80015a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fae6 	bl	8000b48 <HAL_GetTick>
 800157c:	0003      	movs	r3, r0
 800157e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001582:	f7ff fae1 	bl	8000b48 <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b64      	cmp	r3, #100	; 0x64
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e28a      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001594:	4b8a      	ldr	r3, [pc, #552]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	029b      	lsls	r3, r3, #10
 800159c:	4013      	ands	r3, r2
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0xee>
 80015a0:	e015      	b.n	80015ce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff fad1 	bl	8000b48 <HAL_GetTick>
 80015a6:	0003      	movs	r3, r0
 80015a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff facc 	bl	8000b48 <HAL_GetTick>
 80015b0:	0002      	movs	r2, r0
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e275      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	4b80      	ldr	r3, [pc, #512]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	029b      	lsls	r3, r3, #10
 80015c6:	4013      	ands	r3, r2
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x118>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2202      	movs	r2, #2
 80015d4:	4013      	ands	r3, r2
 80015d6:	d100      	bne.n	80015da <HAL_RCC_OscConfig+0x146>
 80015d8:	e069      	b.n	80016ae <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015da:	4b79      	ldr	r3, [pc, #484]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	220c      	movs	r2, #12
 80015e0:	4013      	ands	r3, r2
 80015e2:	d00b      	beq.n	80015fc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015e4:	4b76      	ldr	r3, [pc, #472]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	220c      	movs	r2, #12
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d11c      	bne.n	800162a <HAL_RCC_OscConfig+0x196>
 80015f0:	4b73      	ldr	r3, [pc, #460]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	025b      	lsls	r3, r3, #9
 80015f8:	4013      	ands	r3, r2
 80015fa:	d116      	bne.n	800162a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fc:	4b70      	ldr	r3, [pc, #448]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2202      	movs	r2, #2
 8001602:	4013      	ands	r3, r2
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x17e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e24b      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b6b      	ldr	r3, [pc, #428]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	22f8      	movs	r2, #248	; 0xf8
 8001618:	4393      	bics	r3, r2
 800161a:	0019      	movs	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	00da      	lsls	r2, r3, #3
 8001622:	4b67      	ldr	r3, [pc, #412]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001628:	e041      	b.n	80016ae <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d024      	beq.n	800167c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001632:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b62      	ldr	r3, [pc, #392]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001638:	2101      	movs	r1, #1
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fa83 	bl	8000b48 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff fa7e 	bl	8000b48 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e227      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165a:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2202      	movs	r2, #2
 8001660:	4013      	ands	r3, r2
 8001662:	d0f1      	beq.n	8001648 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b56      	ldr	r3, [pc, #344]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	22f8      	movs	r2, #248	; 0xf8
 800166a:	4393      	bics	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00da      	lsls	r2, r3, #3
 8001674:	4b52      	ldr	r3, [pc, #328]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001676:	430a      	orrs	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e018      	b.n	80016ae <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167c:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001682:	2101      	movs	r1, #1
 8001684:	438a      	bics	r2, r1
 8001686:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fa5e 	bl	8000b48 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fa59 	bl	8000b48 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e202      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a4:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2202      	movs	r2, #2
 80016aa:	4013      	ands	r3, r2
 80016ac:	d1f1      	bne.n	8001692 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2208      	movs	r2, #8
 80016b4:	4013      	ands	r3, r2
 80016b6:	d036      	beq.n	8001726 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d019      	beq.n	80016f4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c0:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80016c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c4:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	2101      	movs	r1, #1
 80016c8:	430a      	orrs	r2, r1
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fa3c 	bl	8000b48 <HAL_GetTick>
 80016d0:	0003      	movs	r3, r0
 80016d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d6:	f7ff fa37 	bl	8000b48 <HAL_GetTick>
 80016da:	0002      	movs	r2, r0
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e1e0      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e8:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	2202      	movs	r2, #2
 80016ee:	4013      	ands	r3, r2
 80016f0:	d0f1      	beq.n	80016d6 <HAL_RCC_OscConfig+0x242>
 80016f2:	e018      	b.n	8001726 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f4:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f8:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	438a      	bics	r2, r1
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fa22 	bl	8000b48 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800170a:	f7ff fa1d 	bl	8000b48 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1c6      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2202      	movs	r2, #2
 8001722:	4013      	ands	r3, r2
 8001724:	d1f1      	bne.n	800170a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2204      	movs	r2, #4
 800172c:	4013      	ands	r3, r2
 800172e:	d100      	bne.n	8001732 <HAL_RCC_OscConfig+0x29e>
 8001730:	e0b4      	b.n	800189c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	201f      	movs	r0, #31
 8001734:	183b      	adds	r3, r7, r0
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	055b      	lsls	r3, r3, #21
 8001742:	4013      	ands	r3, r2
 8001744:	d110      	bne.n	8001768 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001748:	69da      	ldr	r2, [r3, #28]
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	0549      	lsls	r1, r1, #21
 8001750:	430a      	orrs	r2, r1
 8001752:	61da      	str	r2, [r3, #28]
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 8001756:	69da      	ldr	r2, [r3, #28]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	055b      	lsls	r3, r3, #21
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001762:	183b      	adds	r3, r7, r0
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_RCC_OscConfig+0x338>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4013      	ands	r3, r2
 8001772:	d11a      	bne.n	80017aa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_RCC_OscConfig+0x338>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_RCC_OscConfig+0x338>)
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	0049      	lsls	r1, r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001782:	f7ff f9e1 	bl	8000b48 <HAL_GetTick>
 8001786:	0003      	movs	r3, r0
 8001788:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178c:	f7ff f9dc 	bl	8000b48 <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e185      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_RCC_OscConfig+0x338>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4013      	ands	r3, r2
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d10e      	bne.n	80017d0 <HAL_RCC_OscConfig+0x33c>
 80017b2:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80017b4:	6a1a      	ldr	r2, [r3, #32]
 80017b6:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <HAL_RCC_OscConfig+0x32c>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	621a      	str	r2, [r3, #32]
 80017be:	e035      	b.n	800182c <HAL_RCC_OscConfig+0x398>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	fffeffff 	.word	0xfffeffff
 80017c8:	fffbffff 	.word	0xfffbffff
 80017cc:	40007000 	.word	0x40007000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10c      	bne.n	80017f2 <HAL_RCC_OscConfig+0x35e>
 80017d8:	4bb6      	ldr	r3, [pc, #728]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80017da:	6a1a      	ldr	r2, [r3, #32]
 80017dc:	4bb5      	ldr	r3, [pc, #724]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80017de:	2101      	movs	r1, #1
 80017e0:	438a      	bics	r2, r1
 80017e2:	621a      	str	r2, [r3, #32]
 80017e4:	4bb3      	ldr	r3, [pc, #716]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80017e6:	6a1a      	ldr	r2, [r3, #32]
 80017e8:	4bb2      	ldr	r3, [pc, #712]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80017ea:	2104      	movs	r1, #4
 80017ec:	438a      	bics	r2, r1
 80017ee:	621a      	str	r2, [r3, #32]
 80017f0:	e01c      	b.n	800182c <HAL_RCC_OscConfig+0x398>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x380>
 80017fa:	4bae      	ldr	r3, [pc, #696]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	4bad      	ldr	r3, [pc, #692]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001800:	2104      	movs	r1, #4
 8001802:	430a      	orrs	r2, r1
 8001804:	621a      	str	r2, [r3, #32]
 8001806:	4bab      	ldr	r3, [pc, #684]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001808:	6a1a      	ldr	r2, [r3, #32]
 800180a:	4baa      	ldr	r3, [pc, #680]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 800180c:	2101      	movs	r1, #1
 800180e:	430a      	orrs	r2, r1
 8001810:	621a      	str	r2, [r3, #32]
 8001812:	e00b      	b.n	800182c <HAL_RCC_OscConfig+0x398>
 8001814:	4ba7      	ldr	r3, [pc, #668]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001816:	6a1a      	ldr	r2, [r3, #32]
 8001818:	4ba6      	ldr	r3, [pc, #664]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 800181a:	2101      	movs	r1, #1
 800181c:	438a      	bics	r2, r1
 800181e:	621a      	str	r2, [r3, #32]
 8001820:	4ba4      	ldr	r3, [pc, #656]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001822:	6a1a      	ldr	r2, [r3, #32]
 8001824:	4ba3      	ldr	r3, [pc, #652]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001826:	2104      	movs	r1, #4
 8001828:	438a      	bics	r2, r1
 800182a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d014      	beq.n	800185e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7ff f988 	bl	8000b48 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	e009      	b.n	8001852 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff f983 	bl	8000b48 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	4a9b      	ldr	r2, [pc, #620]	; (8001ab8 <HAL_RCC_OscConfig+0x624>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e12b      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	4b98      	ldr	r3, [pc, #608]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	2202      	movs	r2, #2
 8001858:	4013      	ands	r3, r2
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x3aa>
 800185c:	e013      	b.n	8001886 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7ff f973 	bl	8000b48 <HAL_GetTick>
 8001862:	0003      	movs	r3, r0
 8001864:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001866:	e009      	b.n	800187c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7ff f96e 	bl	8000b48 <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	4a91      	ldr	r2, [pc, #580]	; (8001ab8 <HAL_RCC_OscConfig+0x624>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e116      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	4b8d      	ldr	r3, [pc, #564]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	2202      	movs	r2, #2
 8001882:	4013      	ands	r3, r2
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001886:	231f      	movs	r3, #31
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001890:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001892:	69da      	ldr	r2, [r3, #28]
 8001894:	4b87      	ldr	r3, [pc, #540]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001896:	4989      	ldr	r1, [pc, #548]	; (8001abc <HAL_RCC_OscConfig+0x628>)
 8001898:	400a      	ands	r2, r1
 800189a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2210      	movs	r2, #16
 80018a2:	4013      	ands	r3, r2
 80018a4:	d063      	beq.n	800196e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d12a      	bne.n	8001904 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018ae:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80018b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b2:	4b80      	ldr	r3, [pc, #512]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80018b4:	2104      	movs	r1, #4
 80018b6:	430a      	orrs	r2, r1
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018ba:	4b7e      	ldr	r3, [pc, #504]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80018bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018be:	4b7d      	ldr	r3, [pc, #500]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80018c0:	2101      	movs	r1, #1
 80018c2:	430a      	orrs	r2, r1
 80018c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff f93f 	bl	8000b48 <HAL_GetTick>
 80018ca:	0003      	movs	r3, r0
 80018cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018d0:	f7ff f93a 	bl	8000b48 <HAL_GetTick>
 80018d4:	0002      	movs	r2, r0
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e0e3      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018e2:	4b74      	ldr	r3, [pc, #464]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80018e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e6:	2202      	movs	r2, #2
 80018e8:	4013      	ands	r3, r2
 80018ea:	d0f1      	beq.n	80018d0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018ec:	4b71      	ldr	r3, [pc, #452]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	22f8      	movs	r2, #248	; 0xf8
 80018f2:	4393      	bics	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	00da      	lsls	r2, r3, #3
 80018fc:	4b6d      	ldr	r3, [pc, #436]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80018fe:	430a      	orrs	r2, r1
 8001900:	635a      	str	r2, [r3, #52]	; 0x34
 8001902:	e034      	b.n	800196e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	3305      	adds	r3, #5
 800190a:	d111      	bne.n	8001930 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800190c:	4b69      	ldr	r3, [pc, #420]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 800190e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001910:	4b68      	ldr	r3, [pc, #416]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001912:	2104      	movs	r1, #4
 8001914:	438a      	bics	r2, r1
 8001916:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001918:	4b66      	ldr	r3, [pc, #408]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 800191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191c:	22f8      	movs	r2, #248	; 0xf8
 800191e:	4393      	bics	r3, r2
 8001920:	0019      	movs	r1, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	00da      	lsls	r2, r3, #3
 8001928:	4b62      	ldr	r3, [pc, #392]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 800192a:	430a      	orrs	r2, r1
 800192c:	635a      	str	r2, [r3, #52]	; 0x34
 800192e:	e01e      	b.n	800196e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001930:	4b60      	ldr	r3, [pc, #384]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001934:	4b5f      	ldr	r3, [pc, #380]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001936:	2104      	movs	r1, #4
 8001938:	430a      	orrs	r2, r1
 800193a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800193c:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 800193e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001940:	4b5c      	ldr	r3, [pc, #368]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001942:	2101      	movs	r1, #1
 8001944:	438a      	bics	r2, r1
 8001946:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001948:	f7ff f8fe 	bl	8000b48 <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001952:	f7ff f8f9 	bl	8000b48 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0a2      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001968:	2202      	movs	r2, #2
 800196a:	4013      	ands	r3, r2
 800196c:	d1f1      	bne.n	8001952 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d100      	bne.n	8001978 <HAL_RCC_OscConfig+0x4e4>
 8001976:	e097      	b.n	8001aa8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001978:	4b4e      	ldr	r3, [pc, #312]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	220c      	movs	r2, #12
 800197e:	4013      	ands	r3, r2
 8001980:	2b08      	cmp	r3, #8
 8001982:	d100      	bne.n	8001986 <HAL_RCC_OscConfig+0x4f2>
 8001984:	e06b      	b.n	8001a5e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d14c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4b48      	ldr	r3, [pc, #288]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001994:	494a      	ldr	r1, [pc, #296]	; (8001ac0 <HAL_RCC_OscConfig+0x62c>)
 8001996:	400a      	ands	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff f8d5 	bl	8000b48 <HAL_GetTick>
 800199e:	0003      	movs	r3, r0
 80019a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f8d0 	bl	8000b48 <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e079      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	4b3f      	ldr	r3, [pc, #252]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	049b      	lsls	r3, r3, #18
 80019be:	4013      	ands	r3, r2
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c2:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	220f      	movs	r2, #15
 80019c8:	4393      	bics	r3, r2
 80019ca:	0019      	movs	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d0:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80019d2:	430a      	orrs	r2, r1
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d6:	4b37      	ldr	r3, [pc, #220]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a3a      	ldr	r2, [pc, #232]	; (8001ac4 <HAL_RCC_OscConfig+0x630>)
 80019dc:	4013      	ands	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	431a      	orrs	r2, r3
 80019ea:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f0:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	0449      	lsls	r1, r1, #17
 80019fa:	430a      	orrs	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff f8a3 	bl	8000b48 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff f89e 	bl	8000b48 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e047      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	049b      	lsls	r3, r3, #18
 8001a22:	4013      	ands	r3, r2
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x574>
 8001a26:	e03f      	b.n	8001aa8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001a2e:	4924      	ldr	r1, [pc, #144]	; (8001ac0 <HAL_RCC_OscConfig+0x62c>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff f888 	bl	8000b48 <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff f883 	bl	8000b48 <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e02c      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	049b      	lsls	r3, r3, #18
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x5aa>
 8001a5c:	e024      	b.n	8001aa8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e01f      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_RCC_OscConfig+0x620>)
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	025b      	lsls	r3, r3, #9
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d10e      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	220f      	movs	r2, #15
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	23f0      	movs	r3, #240	; 0xf0
 8001a98:	039b      	lsls	r3, r3, #14
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	0018      	movs	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b008      	add	sp, #32
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	00001388 	.word	0x00001388
 8001abc:	efffffff 	.word	0xefffffff
 8001ac0:	feffffff 	.word	0xfeffffff
 8001ac4:	ffc2ffff 	.word	0xffc2ffff

08001ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b3      	b.n	8001c44 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b5b      	ldr	r3, [pc, #364]	; (8001c4c <HAL_RCC_ClockConfig+0x184>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d911      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b58      	ldr	r3, [pc, #352]	; (8001c4c <HAL_RCC_ClockConfig+0x184>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2201      	movs	r2, #1
 8001af0:	4393      	bics	r3, r2
 8001af2:	0019      	movs	r1, r3
 8001af4:	4b55      	ldr	r3, [pc, #340]	; (8001c4c <HAL_RCC_ClockConfig+0x184>)
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_ClockConfig+0x184>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e09a      	b.n	8001c44 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	d015      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d006      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b22:	4b4b      	ldr	r3, [pc, #300]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001b28:	21e0      	movs	r1, #224	; 0xe0
 8001b2a:	00c9      	lsls	r1, r1, #3
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	22f0      	movs	r2, #240	; 0xf0
 8001b36:	4393      	bics	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001b40:	430a      	orrs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d040      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d114      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e06e      	b.n	8001c44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6e:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	049b      	lsls	r3, r3, #18
 8001b76:	4013      	ands	r3, r2
 8001b78:	d108      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e062      	b.n	8001c44 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2202      	movs	r2, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e05b      	b.n	8001c44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2203      	movs	r2, #3
 8001b92:	4393      	bics	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba0:	f7fe ffd2 	bl	8000b48 <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba8:	e009      	b.n	8001bbe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001baa:	f7fe ffcd 	bl	8000b48 <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_RCC_ClockConfig+0x18c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e042      	b.n	8001c44 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1ec      	bne.n	8001baa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <HAL_RCC_ClockConfig+0x184>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d211      	bcs.n	8001c02 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_RCC_ClockConfig+0x184>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2201      	movs	r2, #1
 8001be4:	4393      	bics	r3, r2
 8001be6:	0019      	movs	r1, r3
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_RCC_ClockConfig+0x184>)
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_RCC_ClockConfig+0x184>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e020      	b.n	8001c44 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2204      	movs	r2, #4
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d009      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <HAL_RCC_ClockConfig+0x190>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	0019      	movs	r1, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c20:	f000 f820 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001c24:	0001      	movs	r1, r0
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_RCC_ClockConfig+0x188>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	4013      	ands	r3, r2
 8001c30:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_RCC_ClockConfig+0x194>)
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
 8001c34:	000a      	movs	r2, r1
 8001c36:	40da      	lsrs	r2, r3
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x198>)
 8001c3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7fe ff3d 	bl	8000abc <HAL_InitTick>
  
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b004      	add	sp, #16
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40022000 	.word	0x40022000
 8001c50:	40021000 	.word	0x40021000
 8001c54:	00001388 	.word	0x00001388
 8001c58:	fffff8ff 	.word	0xfffff8ff
 8001c5c:	08003c6c 	.word	0x08003c6c
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001c7e:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	220c      	movs	r2, #12
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x30>
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x36>
 8001c92:	e02c      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c96:	613b      	str	r3, [r7, #16]
      break;
 8001c98:	e02c      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	0c9b      	lsrs	r3, r3, #18
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	220f      	movs	r2, #15
 8001cae:	4013      	ands	r3, r2
 8001cb0:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	025b      	lsls	r3, r3, #9
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d009      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	4810      	ldr	r0, [pc, #64]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cc4:	f7fe fa32 	bl	800012c <__udivsi3>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	001a      	movs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4353      	muls	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e009      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	000a      	movs	r2, r1
 8001cd8:	0152      	lsls	r2, r2, #5
 8001cda:	1a52      	subs	r2, r2, r1
 8001cdc:	0193      	lsls	r3, r2, #6
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	185b      	adds	r3, r3, r1
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
      break;
 8001cec:	e002      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cf0:	613b      	str	r3, [r7, #16]
      break;
 8001cf2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cf4:	693b      	ldr	r3, [r7, #16]
}
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b006      	add	sp, #24
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	40021000 	.word	0x40021000
 8001d04:	007a1200 	.word	0x007a1200
 8001d08:	08003c84 	.word	0x08003c84
 8001d0c:	08003c94 	.word	0x08003c94

08001d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b02      	ldr	r3, [pc, #8]	; (8001d20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	20000000 	.word	0x20000000

08001d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d28:	f7ff fff2 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d2c:	0001      	movs	r1, r0
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	2207      	movs	r2, #7
 8001d36:	4013      	ands	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d3a:	5cd3      	ldrb	r3, [r2, r3]
 8001d3c:	40d9      	lsrs	r1, r3
 8001d3e:	000b      	movs	r3, r1
}    
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08003c7c 	.word	0x08003c7c

08001d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	025b      	lsls	r3, r3, #9
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d100      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d6c:	e08e      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	2017      	movs	r0, #23
 8001d70:	183b      	adds	r3, r7, r0
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d78:	69da      	ldr	r2, [r3, #28]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	055b      	lsls	r3, r3, #21
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d110      	bne.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b54      	ldr	r3, [pc, #336]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d84:	69da      	ldr	r2, [r3, #28]
 8001d86:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	0549      	lsls	r1, r1, #21
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	61da      	str	r2, [r3, #28]
 8001d90:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d92:	69da      	ldr	r2, [r3, #28]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	055b      	lsls	r3, r3, #21
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9e:	183b      	adds	r3, r7, r0
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4013      	ands	r3, r2
 8001dae:	d11a      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db0:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b48      	ldr	r3, [pc, #288]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001db6:	2180      	movs	r1, #128	; 0x80
 8001db8:	0049      	lsls	r1, r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7fe fec3 	bl	8000b48 <HAL_GetTick>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	e008      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc8:	f7fe febe 	bl	8000b48 <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e077      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b3f      	ldr	r3, [pc, #252]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4013      	ands	r3, r2
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001de6:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001de8:	6a1a      	ldr	r2, [r3, #32]
 8001dea:	23c0      	movs	r3, #192	; 0xc0
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d034      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	23c0      	movs	r3, #192	; 0xc0
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d02c      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e08:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a33      	ldr	r2, [pc, #204]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e12:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e14:	6a1a      	ldr	r2, [r3, #32]
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	0249      	lsls	r1, r1, #9
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e22:	6a1a      	ldr	r2, [r3, #32]
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e26:	492e      	ldr	r1, [pc, #184]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001e28:	400a      	ands	r2, r1
 8001e2a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e2c:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fe85 	bl	8000b48 <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e42:	e009      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7fe fe80 	bl	8000b48 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	4a25      	ldr	r2, [pc, #148]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e038      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e62:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e72:	430a      	orrs	r2, r1
 8001e74:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e76:	2317      	movs	r3, #23
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d105      	bne.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e86:	4918      	ldr	r1, [pc, #96]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	d009      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	4393      	bics	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	2210      	movs	r2, #16
 8001eba:	4393      	bics	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b006      	add	sp, #24
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	fffffcff 	.word	0xfffffcff
 8001ee0:	fffeffff 	.word	0xfffeffff
 8001ee4:	00001388 	.word	0x00001388
 8001ee8:	efffffff 	.word	0xefffffff

08001eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e044      	b.n	8001f88 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d107      	bne.n	8001f16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2278      	movs	r2, #120	; 0x78
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7fe fc13 	bl	800073c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2224      	movs	r2, #36	; 0x24
 8001f1a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2101      	movs	r1, #1
 8001f28:	438a      	bics	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	0018      	movs	r0, r3
 8001f38:	f000 fd48 	bl	80029cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f000 fc04 	bl	800274c <UART_SetConfig>
 8001f44:	0003      	movs	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e01c      	b.n	8001f88 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	490d      	ldr	r1, [pc, #52]	; (8001f90 <HAL_UART_Init+0xa4>)
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2108      	movs	r1, #8
 8001f6a:	438a      	bics	r2, r1
 8001f6c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2101      	movs	r1, #1
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 fdd7 	bl	8002b34 <UART_CheckIdleState>
 8001f86:	0003      	movs	r3, r0
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	fffff7ff 	.word	0xfffff7ff

08001f94 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	1dbb      	adds	r3, r7, #6
 8001fa0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	d000      	beq.n	8001fac <HAL_UART_Transmit_DMA+0x18>
 8001faa:	e077      	b.n	800209c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_UART_Transmit_DMA+0x26>
 8001fb2:	1dbb      	adds	r3, r7, #6
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e06f      	b.n	800209e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	015b      	lsls	r3, r3, #5
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d109      	bne.n	8001fde <HAL_UART_Transmit_DMA+0x4a>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d001      	beq.n	8001fde <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e05f      	b.n	800209e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1dba      	adds	r2, r7, #6
 8001fe8:	2150      	movs	r1, #80	; 0x50
 8001fea:	8812      	ldrh	r2, [r2, #0]
 8001fec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1dba      	adds	r2, r7, #6
 8001ff2:	2152      	movs	r1, #82	; 0x52
 8001ff4:	8812      	ldrh	r2, [r2, #0]
 8001ff6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2284      	movs	r2, #132	; 0x84
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2221      	movs	r2, #33	; 0x21
 8002004:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	2b00      	cmp	r3, #0
 800200c:	d027      	beq.n	800205e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <HAL_UART_Transmit_DMA+0x114>)
 8002014:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a24      	ldr	r2, [pc, #144]	; (80020ac <HAL_UART_Transmit_DMA+0x118>)
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002022:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <HAL_UART_Transmit_DMA+0x11c>)
 8002024:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	2200      	movs	r2, #0
 800202c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	0019      	movs	r1, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3328      	adds	r3, #40	; 0x28
 800203e:	001a      	movs	r2, r3
 8002040:	1dbb      	adds	r3, r7, #6
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	f7fe feb0 	bl	8000da8 <HAL_DMA_Start_IT>
 8002048:	1e03      	subs	r3, r0, #0
 800204a:	d008      	beq.n	800205e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2284      	movs	r2, #132	; 0x84
 8002050:	2110      	movs	r1, #16
 8002052:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e01f      	b.n	800209e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2240      	movs	r2, #64	; 0x40
 8002064:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002066:	f3ef 8310 	mrs	r3, PRIMASK
 800206a:	613b      	str	r3, [r7, #16]
  return(result);
 800206c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f383 8810 	msr	PRIMASK, r3
}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2180      	movs	r1, #128	; 0x80
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	f383 8810 	msr	PRIMASK, r3
}
 8002096:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	e000      	b.n	800209e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800209c:	2302      	movs	r3, #2
  }
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b008      	add	sp, #32
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	08002fb5 	.word	0x08002fb5
 80020ac:	08003049 	.word	0x08003049
 80020b0:	080031d7 	.word	0x080031d7

080020b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	1dbb      	adds	r3, r7, #6
 80020c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	589b      	ldr	r3, [r3, r2]
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d145      	bne.n	8002158 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_UART_Receive_DMA+0x26>
 80020d2:	1dbb      	adds	r3, r7, #6
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e03d      	b.n	800215a <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	015b      	lsls	r3, r3, #5
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d109      	bne.n	80020fe <HAL_UART_Receive_DMA+0x4a>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	d001      	beq.n	80020fe <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e02d      	b.n	800215a <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	4013      	ands	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002112:	f3ef 8310 	mrs	r3, PRIMASK
 8002116:	613b      	str	r3, [r7, #16]
  return(result);
 8002118:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	2301      	movs	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f383 8810 	msr	PRIMASK, r3
}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	04c9      	lsls	r1, r1, #19
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f383 8810 	msr	PRIMASK, r3
}
 8002144:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002146:	1dbb      	adds	r3, r7, #6
 8002148:	881a      	ldrh	r2, [r3, #0]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	0018      	movs	r0, r3
 8002150:	f000 fe08 	bl	8002d64 <UART_Start_Receive_DMA>
 8002154:	0003      	movs	r3, r0
 8002156:	e000      	b.n	800215a <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002158:	2302      	movs	r3, #2
  }
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b008      	add	sp, #32
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b0ab      	sub	sp, #172	; 0xac
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	22a4      	movs	r2, #164	; 0xa4
 8002174:	18b9      	adds	r1, r7, r2
 8002176:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	20a0      	movs	r0, #160	; 0xa0
 8002180:	1839      	adds	r1, r7, r0
 8002182:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	219c      	movs	r1, #156	; 0x9c
 800218c:	1879      	adds	r1, r7, r1
 800218e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002190:	0011      	movs	r1, r2
 8002192:	18bb      	adds	r3, r7, r2
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a99      	ldr	r2, [pc, #612]	; (80023fc <HAL_UART_IRQHandler+0x298>)
 8002198:	4013      	ands	r3, r2
 800219a:	2298      	movs	r2, #152	; 0x98
 800219c:	18bc      	adds	r4, r7, r2
 800219e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80021a0:	18bb      	adds	r3, r7, r2
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d114      	bne.n	80021d2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80021a8:	187b      	adds	r3, r7, r1
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2220      	movs	r2, #32
 80021ae:	4013      	ands	r3, r2
 80021b0:	d00f      	beq.n	80021d2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80021b2:	183b      	adds	r3, r7, r0
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2220      	movs	r2, #32
 80021b8:	4013      	ands	r3, r2
 80021ba:	d00a      	beq.n	80021d2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d100      	bne.n	80021c6 <HAL_UART_IRQHandler+0x62>
 80021c4:	e286      	b.n	80026d4 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	0010      	movs	r0, r2
 80021ce:	4798      	blx	r3
      }
      return;
 80021d0:	e280      	b.n	80026d4 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80021d2:	2398      	movs	r3, #152	; 0x98
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d100      	bne.n	80021de <HAL_UART_IRQHandler+0x7a>
 80021dc:	e114      	b.n	8002408 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80021de:	239c      	movs	r3, #156	; 0x9c
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	d106      	bne.n	80021f8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80021ea:	23a0      	movs	r3, #160	; 0xa0
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a83      	ldr	r2, [pc, #524]	; (8002400 <HAL_UART_IRQHandler+0x29c>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	d100      	bne.n	80021f8 <HAL_UART_IRQHandler+0x94>
 80021f6:	e107      	b.n	8002408 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80021f8:	23a4      	movs	r3, #164	; 0xa4
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2201      	movs	r2, #1
 8002200:	4013      	ands	r3, r2
 8002202:	d012      	beq.n	800222a <HAL_UART_IRQHandler+0xc6>
 8002204:	23a0      	movs	r3, #160	; 0xa0
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4013      	ands	r3, r2
 8002210:	d00b      	beq.n	800222a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2284      	movs	r2, #132	; 0x84
 800221e:	589b      	ldr	r3, [r3, r2]
 8002220:	2201      	movs	r2, #1
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2184      	movs	r1, #132	; 0x84
 8002228:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800222a:	23a4      	movs	r3, #164	; 0xa4
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2202      	movs	r2, #2
 8002232:	4013      	ands	r3, r2
 8002234:	d011      	beq.n	800225a <HAL_UART_IRQHandler+0xf6>
 8002236:	239c      	movs	r3, #156	; 0x9c
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2201      	movs	r2, #1
 800223e:	4013      	ands	r3, r2
 8002240:	d00b      	beq.n	800225a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2202      	movs	r2, #2
 8002248:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2284      	movs	r2, #132	; 0x84
 800224e:	589b      	ldr	r3, [r3, r2]
 8002250:	2204      	movs	r2, #4
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2184      	movs	r1, #132	; 0x84
 8002258:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800225a:	23a4      	movs	r3, #164	; 0xa4
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2204      	movs	r2, #4
 8002262:	4013      	ands	r3, r2
 8002264:	d011      	beq.n	800228a <HAL_UART_IRQHandler+0x126>
 8002266:	239c      	movs	r3, #156	; 0x9c
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2201      	movs	r2, #1
 800226e:	4013      	ands	r3, r2
 8002270:	d00b      	beq.n	800228a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2204      	movs	r2, #4
 8002278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2284      	movs	r2, #132	; 0x84
 800227e:	589b      	ldr	r3, [r3, r2]
 8002280:	2202      	movs	r2, #2
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2184      	movs	r1, #132	; 0x84
 8002288:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800228a:	23a4      	movs	r3, #164	; 0xa4
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2208      	movs	r2, #8
 8002292:	4013      	ands	r3, r2
 8002294:	d017      	beq.n	80022c6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002296:	23a0      	movs	r3, #160	; 0xa0
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2220      	movs	r2, #32
 800229e:	4013      	ands	r3, r2
 80022a0:	d105      	bne.n	80022ae <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80022a2:	239c      	movs	r3, #156	; 0x9c
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2201      	movs	r2, #1
 80022aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022ac:	d00b      	beq.n	80022c6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2208      	movs	r2, #8
 80022b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2284      	movs	r2, #132	; 0x84
 80022ba:	589b      	ldr	r3, [r3, r2]
 80022bc:	2208      	movs	r2, #8
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2184      	movs	r1, #132	; 0x84
 80022c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80022c6:	23a4      	movs	r3, #164	; 0xa4
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	4013      	ands	r3, r2
 80022d2:	d013      	beq.n	80022fc <HAL_UART_IRQHandler+0x198>
 80022d4:	23a0      	movs	r3, #160	; 0xa0
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	04db      	lsls	r3, r3, #19
 80022de:	4013      	ands	r3, r2
 80022e0:	d00c      	beq.n	80022fc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2280      	movs	r2, #128	; 0x80
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2284      	movs	r2, #132	; 0x84
 80022f0:	589b      	ldr	r3, [r3, r2]
 80022f2:	2220      	movs	r2, #32
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2184      	movs	r1, #132	; 0x84
 80022fa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2284      	movs	r2, #132	; 0x84
 8002300:	589b      	ldr	r3, [r3, r2]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d100      	bne.n	8002308 <HAL_UART_IRQHandler+0x1a4>
 8002306:	e1e7      	b.n	80026d8 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002308:	23a4      	movs	r3, #164	; 0xa4
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2220      	movs	r2, #32
 8002310:	4013      	ands	r3, r2
 8002312:	d00e      	beq.n	8002332 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002314:	23a0      	movs	r3, #160	; 0xa0
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2220      	movs	r2, #32
 800231c:	4013      	ands	r3, r2
 800231e:	d008      	beq.n	8002332 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	0010      	movs	r0, r2
 8002330:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2284      	movs	r2, #132	; 0x84
 8002336:	589b      	ldr	r3, [r3, r2]
 8002338:	2194      	movs	r1, #148	; 0x94
 800233a:	187a      	adds	r2, r7, r1
 800233c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2240      	movs	r2, #64	; 0x40
 8002346:	4013      	ands	r3, r2
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d004      	beq.n	8002356 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800234c:	187b      	adds	r3, r7, r1
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2228      	movs	r2, #40	; 0x28
 8002352:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002354:	d047      	beq.n	80023e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f000 fdc7 	bl	8002eec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2240      	movs	r2, #64	; 0x40
 8002366:	4013      	ands	r3, r2
 8002368:	2b40      	cmp	r3, #64	; 0x40
 800236a:	d137      	bne.n	80023dc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800236c:	f3ef 8310 	mrs	r3, PRIMASK
 8002370:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002374:	2090      	movs	r0, #144	; 0x90
 8002376:	183a      	adds	r2, r7, r0
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	2301      	movs	r3, #1
 800237c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800237e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002380:	f383 8810 	msr	PRIMASK, r3
}
 8002384:	46c0      	nop			; (mov r8, r8)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2140      	movs	r1, #64	; 0x40
 8002392:	438a      	bics	r2, r1
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	183b      	adds	r3, r7, r0
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800239c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800239e:	f383 8810 	msr	PRIMASK, r3
}
 80023a2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d012      	beq.n	80023d2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <HAL_UART_IRQHandler+0x2a0>)
 80023b2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b8:	0018      	movs	r0, r3
 80023ba:	f7fe fd93 	bl	8000ee4 <HAL_DMA_Abort_IT>
 80023be:	1e03      	subs	r3, r0, #0
 80023c0:	d01a      	beq.n	80023f8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023cc:	0018      	movs	r0, r3
 80023ce:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d0:	e012      	b.n	80023f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 f9a5 	bl	8002724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023da:	e00d      	b.n	80023f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	0018      	movs	r0, r3
 80023e0:	f000 f9a0 	bl	8002724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e4:	e008      	b.n	80023f8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 f99b 	bl	8002724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2284      	movs	r2, #132	; 0x84
 80023f2:	2100      	movs	r1, #0
 80023f4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80023f6:	e16f      	b.n	80026d8 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f8:	46c0      	nop			; (mov r8, r8)
    return;
 80023fa:	e16d      	b.n	80026d8 <HAL_UART_IRQHandler+0x574>
 80023fc:	0000080f 	.word	0x0000080f
 8002400:	04000120 	.word	0x04000120
 8002404:	0800325b 	.word	0x0800325b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240c:	2b01      	cmp	r3, #1
 800240e:	d000      	beq.n	8002412 <HAL_UART_IRQHandler+0x2ae>
 8002410:	e139      	b.n	8002686 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002412:	23a4      	movs	r3, #164	; 0xa4
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2210      	movs	r2, #16
 800241a:	4013      	ands	r3, r2
 800241c:	d100      	bne.n	8002420 <HAL_UART_IRQHandler+0x2bc>
 800241e:	e132      	b.n	8002686 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002420:	23a0      	movs	r3, #160	; 0xa0
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2210      	movs	r2, #16
 8002428:	4013      	ands	r3, r2
 800242a:	d100      	bne.n	800242e <HAL_UART_IRQHandler+0x2ca>
 800242c:	e12b      	b.n	8002686 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2210      	movs	r2, #16
 8002434:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2240      	movs	r2, #64	; 0x40
 800243e:	4013      	ands	r3, r2
 8002440:	2b40      	cmp	r3, #64	; 0x40
 8002442:	d000      	beq.n	8002446 <HAL_UART_IRQHandler+0x2e2>
 8002444:	e09f      	b.n	8002586 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	217e      	movs	r1, #126	; 0x7e
 8002450:	187b      	adds	r3, r7, r1
 8002452:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002454:	187b      	adds	r3, r7, r1
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d100      	bne.n	800245e <HAL_UART_IRQHandler+0x2fa>
 800245c:	e13e      	b.n	80026dc <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2258      	movs	r2, #88	; 0x58
 8002462:	5a9b      	ldrh	r3, [r3, r2]
 8002464:	187a      	adds	r2, r7, r1
 8002466:	8812      	ldrh	r2, [r2, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d300      	bcc.n	800246e <HAL_UART_IRQHandler+0x30a>
 800246c:	e136      	b.n	80026dc <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	187a      	adds	r2, r7, r1
 8002472:	215a      	movs	r1, #90	; 0x5a
 8002474:	8812      	ldrh	r2, [r2, #0]
 8002476:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b20      	cmp	r3, #32
 8002480:	d06f      	beq.n	8002562 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002482:	f3ef 8310 	mrs	r3, PRIMASK
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800248a:	67bb      	str	r3, [r7, #120]	; 0x78
 800248c:	2301      	movs	r3, #1
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002492:	f383 8810 	msr	PRIMASK, r3
}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4992      	ldr	r1, [pc, #584]	; (80026ec <HAL_UART_IRQHandler+0x588>)
 80024a4:	400a      	ands	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ae:	f383 8810 	msr	PRIMASK, r3
}
 80024b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024b4:	f3ef 8310 	mrs	r3, PRIMASK
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80024ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024bc:	677b      	str	r3, [r7, #116]	; 0x74
 80024be:	2301      	movs	r3, #1
 80024c0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c4:	f383 8810 	msr	PRIMASK, r3
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2101      	movs	r1, #1
 80024d6:	438a      	bics	r2, r1
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024dc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e0:	f383 8810 	msr	PRIMASK, r3
}
 80024e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e6:	f3ef 8310 	mrs	r3, PRIMASK
 80024ea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80024ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ee:	673b      	str	r3, [r7, #112]	; 0x70
 80024f0:	2301      	movs	r3, #1
 80024f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f6:	f383 8810 	msr	PRIMASK, r3
}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2140      	movs	r1, #64	; 0x40
 8002508:	438a      	bics	r2, r1
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800250e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002512:	f383 8810 	msr	PRIMASK, r3
}
 8002516:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	2120      	movs	r1, #32
 800251e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002526:	f3ef 8310 	mrs	r3, PRIMASK
 800252a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800252c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800252e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002530:	2301      	movs	r3, #1
 8002532:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002536:	f383 8810 	msr	PRIMASK, r3
}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2110      	movs	r1, #16
 8002548:	438a      	bics	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002552:	f383 8810 	msr	PRIMASK, r3
}
 8002556:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255c:	0018      	movs	r0, r3
 800255e:	f7fe fc89 	bl	8000e74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2258      	movs	r2, #88	; 0x58
 800256c:	5a9a      	ldrh	r2, [r3, r2]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	215a      	movs	r1, #90	; 0x5a
 8002572:	5a5b      	ldrh	r3, [r3, r1]
 8002574:	b29b      	uxth	r3, r3
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	b29a      	uxth	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	0011      	movs	r1, r2
 800257e:	0018      	movs	r0, r3
 8002580:	f000 f8d8 	bl	8002734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002584:	e0aa      	b.n	80026dc <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2258      	movs	r2, #88	; 0x58
 800258a:	5a99      	ldrh	r1, [r3, r2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	225a      	movs	r2, #90	; 0x5a
 8002590:	5a9b      	ldrh	r3, [r3, r2]
 8002592:	b29a      	uxth	r2, r3
 8002594:	208e      	movs	r0, #142	; 0x8e
 8002596:	183b      	adds	r3, r7, r0
 8002598:	1a8a      	subs	r2, r1, r2
 800259a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	225a      	movs	r2, #90	; 0x5a
 80025a0:	5a9b      	ldrh	r3, [r3, r2]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d100      	bne.n	80025aa <HAL_UART_IRQHandler+0x446>
 80025a8:	e09a      	b.n	80026e0 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80025aa:	183b      	adds	r3, r7, r0
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d100      	bne.n	80025b4 <HAL_UART_IRQHandler+0x450>
 80025b2:	e095      	b.n	80026e0 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b4:	f3ef 8310 	mrs	r3, PRIMASK
 80025b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80025ba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025bc:	2488      	movs	r4, #136	; 0x88
 80025be:	193a      	adds	r2, r7, r4
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	2301      	movs	r3, #1
 80025c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f383 8810 	msr	PRIMASK, r3
}
 80025cc:	46c0      	nop			; (mov r8, r8)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4945      	ldr	r1, [pc, #276]	; (80026f0 <HAL_UART_IRQHandler+0x58c>)
 80025da:	400a      	ands	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	193b      	adds	r3, r7, r4
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f383 8810 	msr	PRIMASK, r3
}
 80025ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ec:	f3ef 8310 	mrs	r3, PRIMASK
 80025f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80025f2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f4:	2484      	movs	r4, #132	; 0x84
 80025f6:	193a      	adds	r2, r7, r4
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	2301      	movs	r3, #1
 80025fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f383 8810 	msr	PRIMASK, r3
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2101      	movs	r1, #1
 8002612:	438a      	bics	r2, r1
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	193b      	adds	r3, r7, r4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	f383 8810 	msr	PRIMASK, r3
}
 8002622:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	2120      	movs	r1, #32
 800262a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002638:	f3ef 8310 	mrs	r3, PRIMASK
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002640:	2480      	movs	r4, #128	; 0x80
 8002642:	193a      	adds	r2, r7, r4
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	2301      	movs	r3, #1
 8002648:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	f383 8810 	msr	PRIMASK, r3
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2110      	movs	r1, #16
 800265e:	438a      	bics	r2, r1
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	193b      	adds	r3, r7, r4
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	f383 8810 	msr	PRIMASK, r3
}
 800266e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002676:	183b      	adds	r3, r7, r0
 8002678:	881a      	ldrh	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	0011      	movs	r1, r2
 800267e:	0018      	movs	r0, r3
 8002680:	f000 f858 	bl	8002734 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002684:	e02c      	b.n	80026e0 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002686:	23a4      	movs	r3, #164	; 0xa4
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2280      	movs	r2, #128	; 0x80
 800268e:	4013      	ands	r3, r2
 8002690:	d00f      	beq.n	80026b2 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002692:	23a0      	movs	r3, #160	; 0xa0
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	4013      	ands	r3, r2
 800269c:	d009      	beq.n	80026b2 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01e      	beq.n	80026e4 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	0010      	movs	r0, r2
 80026ae:	4798      	blx	r3
    }
    return;
 80026b0:	e018      	b.n	80026e4 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80026b2:	23a4      	movs	r3, #164	; 0xa4
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2240      	movs	r2, #64	; 0x40
 80026ba:	4013      	ands	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_UART_IRQHandler+0x582>
 80026be:	23a0      	movs	r3, #160	; 0xa0
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2240      	movs	r2, #64	; 0x40
 80026c6:	4013      	ands	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 fddb 	bl	8003288 <UART_EndTransmit_IT>
    return;
 80026d2:	e008      	b.n	80026e6 <HAL_UART_IRQHandler+0x582>
      return;
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	e006      	b.n	80026e6 <HAL_UART_IRQHandler+0x582>
    return;
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	e004      	b.n	80026e6 <HAL_UART_IRQHandler+0x582>
      return;
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	e002      	b.n	80026e6 <HAL_UART_IRQHandler+0x582>
      return;
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	e000      	b.n	80026e6 <HAL_UART_IRQHandler+0x582>
    return;
 80026e4:	46c0      	nop			; (mov r8, r8)
  }

}
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b02b      	add	sp, #172	; 0xac
 80026ea:	bd90      	pop	{r4, r7, pc}
 80026ec:	fffffeff 	.word	0xfffffeff
 80026f0:	fffffedf 	.word	0xfffffedf

080026f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b002      	add	sp, #8
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	000a      	movs	r2, r1
 800273e:	1cbb      	adds	r3, r7, #2
 8002740:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002754:	231e      	movs	r3, #30
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a8d      	ldr	r2, [pc, #564]	; (80029b0 <UART_SetConfig+0x264>)
 800277c:	4013      	ands	r3, r2
 800277e:	0019      	movs	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	430a      	orrs	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4a88      	ldr	r2, [pc, #544]	; (80029b4 <UART_SetConfig+0x268>)
 8002792:	4013      	ands	r3, r2
 8002794:	0019      	movs	r1, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a7f      	ldr	r2, [pc, #508]	; (80029b8 <UART_SetConfig+0x26c>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a7b      	ldr	r2, [pc, #492]	; (80029bc <UART_SetConfig+0x270>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d127      	bne.n	8002822 <UART_SetConfig+0xd6>
 80027d2:	4b7b      	ldr	r3, [pc, #492]	; (80029c0 <UART_SetConfig+0x274>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	2203      	movs	r2, #3
 80027d8:	4013      	ands	r3, r2
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d00d      	beq.n	80027fa <UART_SetConfig+0xae>
 80027de:	d81b      	bhi.n	8002818 <UART_SetConfig+0xcc>
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d014      	beq.n	800280e <UART_SetConfig+0xc2>
 80027e4:	d818      	bhi.n	8002818 <UART_SetConfig+0xcc>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <UART_SetConfig+0xa4>
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d00a      	beq.n	8002804 <UART_SetConfig+0xb8>
 80027ee:	e013      	b.n	8002818 <UART_SetConfig+0xcc>
 80027f0:	231f      	movs	r3, #31
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e021      	b.n	800283e <UART_SetConfig+0xf2>
 80027fa:	231f      	movs	r3, #31
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	2202      	movs	r2, #2
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e01c      	b.n	800283e <UART_SetConfig+0xf2>
 8002804:	231f      	movs	r3, #31
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	2204      	movs	r2, #4
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e017      	b.n	800283e <UART_SetConfig+0xf2>
 800280e:	231f      	movs	r3, #31
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	2208      	movs	r2, #8
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	e012      	b.n	800283e <UART_SetConfig+0xf2>
 8002818:	231f      	movs	r3, #31
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2210      	movs	r2, #16
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e00d      	b.n	800283e <UART_SetConfig+0xf2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a67      	ldr	r2, [pc, #412]	; (80029c4 <UART_SetConfig+0x278>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d104      	bne.n	8002836 <UART_SetConfig+0xea>
 800282c:	231f      	movs	r3, #31
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e003      	b.n	800283e <UART_SetConfig+0xf2>
 8002836:	231f      	movs	r3, #31
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2210      	movs	r2, #16
 800283c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	429a      	cmp	r2, r3
 8002848:	d15c      	bne.n	8002904 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800284a:	231f      	movs	r3, #31
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d015      	beq.n	8002880 <UART_SetConfig+0x134>
 8002854:	dc18      	bgt.n	8002888 <UART_SetConfig+0x13c>
 8002856:	2b04      	cmp	r3, #4
 8002858:	d00d      	beq.n	8002876 <UART_SetConfig+0x12a>
 800285a:	dc15      	bgt.n	8002888 <UART_SetConfig+0x13c>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <UART_SetConfig+0x11a>
 8002860:	2b02      	cmp	r3, #2
 8002862:	d005      	beq.n	8002870 <UART_SetConfig+0x124>
 8002864:	e010      	b.n	8002888 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002866:	f7ff fa5d 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 800286a:	0003      	movs	r3, r0
 800286c:	61bb      	str	r3, [r7, #24]
        break;
 800286e:	e012      	b.n	8002896 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002870:	4b55      	ldr	r3, [pc, #340]	; (80029c8 <UART_SetConfig+0x27c>)
 8002872:	61bb      	str	r3, [r7, #24]
        break;
 8002874:	e00f      	b.n	8002896 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002876:	f7ff f9f5 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 800287a:	0003      	movs	r3, r0
 800287c:	61bb      	str	r3, [r7, #24]
        break;
 800287e:	e00a      	b.n	8002896 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	61bb      	str	r3, [r7, #24]
        break;
 8002886:	e006      	b.n	8002896 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800288c:	231e      	movs	r3, #30
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
        break;
 8002894:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d100      	bne.n	800289e <UART_SetConfig+0x152>
 800289c:	e07a      	b.n	8002994 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	005a      	lsls	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	18d2      	adds	r2, r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	0019      	movs	r1, r3
 80028b0:	0010      	movs	r0, r2
 80028b2:	f7fd fc3b 	bl	800012c <__udivsi3>
 80028b6:	0003      	movs	r3, r0
 80028b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	d91c      	bls.n	80028fa <UART_SetConfig+0x1ae>
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	025b      	lsls	r3, r3, #9
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d217      	bcs.n	80028fa <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	200e      	movs	r0, #14
 80028d0:	183b      	adds	r3, r7, r0
 80028d2:	210f      	movs	r1, #15
 80028d4:	438a      	bics	r2, r1
 80028d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2207      	movs	r2, #7
 80028e0:	4013      	ands	r3, r2
 80028e2:	b299      	uxth	r1, r3
 80028e4:	183b      	adds	r3, r7, r0
 80028e6:	183a      	adds	r2, r7, r0
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	183a      	adds	r2, r7, r0
 80028f4:	8812      	ldrh	r2, [r2, #0]
 80028f6:	60da      	str	r2, [r3, #12]
 80028f8:	e04c      	b.n	8002994 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80028fa:	231e      	movs	r3, #30
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	e047      	b.n	8002994 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002904:	231f      	movs	r3, #31
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b08      	cmp	r3, #8
 800290c:	d015      	beq.n	800293a <UART_SetConfig+0x1ee>
 800290e:	dc18      	bgt.n	8002942 <UART_SetConfig+0x1f6>
 8002910:	2b04      	cmp	r3, #4
 8002912:	d00d      	beq.n	8002930 <UART_SetConfig+0x1e4>
 8002914:	dc15      	bgt.n	8002942 <UART_SetConfig+0x1f6>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <UART_SetConfig+0x1d4>
 800291a:	2b02      	cmp	r3, #2
 800291c:	d005      	beq.n	800292a <UART_SetConfig+0x1de>
 800291e:	e010      	b.n	8002942 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002920:	f7ff fa00 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 8002924:	0003      	movs	r3, r0
 8002926:	61bb      	str	r3, [r7, #24]
        break;
 8002928:	e012      	b.n	8002950 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800292a:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <UART_SetConfig+0x27c>)
 800292c:	61bb      	str	r3, [r7, #24]
        break;
 800292e:	e00f      	b.n	8002950 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002930:	f7ff f998 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8002934:	0003      	movs	r3, r0
 8002936:	61bb      	str	r3, [r7, #24]
        break;
 8002938:	e00a      	b.n	8002950 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	61bb      	str	r3, [r7, #24]
        break;
 8002940:	e006      	b.n	8002950 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002946:	231e      	movs	r3, #30
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
        break;
 800294e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01e      	beq.n	8002994 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	085a      	lsrs	r2, r3, #1
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	18d2      	adds	r2, r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	0019      	movs	r1, r3
 8002966:	0010      	movs	r0, r2
 8002968:	f7fd fbe0 	bl	800012c <__udivsi3>
 800296c:	0003      	movs	r3, r0
 800296e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b0f      	cmp	r3, #15
 8002974:	d90a      	bls.n	800298c <UART_SetConfig+0x240>
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	025b      	lsls	r3, r3, #9
 800297c:	429a      	cmp	r2, r3
 800297e:	d205      	bcs.n	800298c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	b29a      	uxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	e003      	b.n	8002994 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800298c:	231e      	movs	r3, #30
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80029a0:	231e      	movs	r3, #30
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	781b      	ldrb	r3, [r3, #0]
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b008      	add	sp, #32
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	ffff69f3 	.word	0xffff69f3
 80029b4:	ffffcfff 	.word	0xffffcfff
 80029b8:	fffff4ff 	.word	0xfffff4ff
 80029bc:	40013800 	.word	0x40013800
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40004400 	.word	0x40004400
 80029c8:	007a1200 	.word	0x007a1200

080029cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2208      	movs	r2, #8
 80029da:	4013      	ands	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a4a      	ldr	r2, [pc, #296]	; (8002b10 <UART_AdvFeatureConfig+0x144>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	2201      	movs	r2, #1
 80029fc:	4013      	ands	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4a43      	ldr	r2, [pc, #268]	; (8002b14 <UART_AdvFeatureConfig+0x148>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d00b      	beq.n	8002a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a3b      	ldr	r2, [pc, #236]	; (8002b18 <UART_AdvFeatureConfig+0x14c>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2204      	movs	r2, #4
 8002a40:	4013      	ands	r3, r2
 8002a42:	d00b      	beq.n	8002a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4a34      	ldr	r2, [pc, #208]	; (8002b1c <UART_AdvFeatureConfig+0x150>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2210      	movs	r2, #16
 8002a62:	4013      	ands	r3, r2
 8002a64:	d00b      	beq.n	8002a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a2c      	ldr	r2, [pc, #176]	; (8002b20 <UART_AdvFeatureConfig+0x154>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2220      	movs	r2, #32
 8002a84:	4013      	ands	r3, r2
 8002a86:	d00b      	beq.n	8002aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	4a25      	ldr	r2, [pc, #148]	; (8002b24 <UART_AdvFeatureConfig+0x158>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	2240      	movs	r2, #64	; 0x40
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d01d      	beq.n	8002ae6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <UART_AdvFeatureConfig+0x15c>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	035b      	lsls	r3, r3, #13
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d10b      	bne.n	8002ae6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <UART_AdvFeatureConfig+0x160>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	4013      	ands	r3, r2
 8002aee:	d00b      	beq.n	8002b08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <UART_AdvFeatureConfig+0x164>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	0019      	movs	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
  }
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	ffff7fff 	.word	0xffff7fff
 8002b14:	fffdffff 	.word	0xfffdffff
 8002b18:	fffeffff 	.word	0xfffeffff
 8002b1c:	fffbffff 	.word	0xfffbffff
 8002b20:	ffffefff 	.word	0xffffefff
 8002b24:	ffffdfff 	.word	0xffffdfff
 8002b28:	ffefffff 	.word	0xffefffff
 8002b2c:	ff9fffff 	.word	0xff9fffff
 8002b30:	fff7ffff 	.word	0xfff7ffff

08002b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b092      	sub	sp, #72	; 0x48
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2284      	movs	r2, #132	; 0x84
 8002b40:	2100      	movs	r1, #0
 8002b42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b44:	f7fe f800 	bl	8000b48 <HAL_GetTick>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2208      	movs	r2, #8
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d12c      	bne.n	8002bb4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5c:	2280      	movs	r2, #128	; 0x80
 8002b5e:	0391      	lsls	r1, r2, #14
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4a46      	ldr	r2, [pc, #280]	; (8002c7c <UART_CheckIdleState+0x148>)
 8002b64:	9200      	str	r2, [sp, #0]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f000 f88c 	bl	8002c84 <UART_WaitOnFlagUntilTimeout>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d021      	beq.n	8002bb4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b70:	f3ef 8310 	mrs	r3, PRIMASK
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	438a      	bics	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ba0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2278      	movs	r2, #120	; 0x78
 8002bac:	2100      	movs	r1, #0
 8002bae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e05f      	b.n	8002c74 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2204      	movs	r2, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d146      	bne.n	8002c50 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	03d1      	lsls	r1, r2, #15
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4a2c      	ldr	r2, [pc, #176]	; (8002c7c <UART_CheckIdleState+0x148>)
 8002bcc:	9200      	str	r2, [sp, #0]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f000 f858 	bl	8002c84 <UART_WaitOnFlagUntilTimeout>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d03b      	beq.n	8002c50 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bde:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be0:	637b      	str	r3, [r7, #52]	; 0x34
 8002be2:	2301      	movs	r3, #1
 8002be4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f383 8810 	msr	PRIMASK, r3
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4921      	ldr	r1, [pc, #132]	; (8002c80 <UART_CheckIdleState+0x14c>)
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f383 8810 	msr	PRIMASK, r3
}
 8002c08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c10:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30
 8002c14:	2301      	movs	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f383 8810 	msr	PRIMASK, r3
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	438a      	bics	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f383 8810 	msr	PRIMASK, r3
}
 8002c3a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	2120      	movs	r1, #32
 8002c42:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2278      	movs	r2, #120	; 0x78
 8002c48:	2100      	movs	r1, #0
 8002c4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e011      	b.n	8002c74 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2280      	movs	r2, #128	; 0x80
 8002c5a:	2120      	movs	r1, #32
 8002c5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2278      	movs	r2, #120	; 0x78
 8002c6e:	2100      	movs	r1, #0
 8002c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b010      	add	sp, #64	; 0x40
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	01ffffff 	.word	0x01ffffff
 8002c80:	fffffedf 	.word	0xfffffedf

08002c84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	1dfb      	adds	r3, r7, #7
 8002c92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c94:	e051      	b.n	8002d3a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	d04e      	beq.n	8002d3a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9c:	f7fd ff54 	bl	8000b48 <HAL_GetTick>
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d302      	bcc.n	8002cb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e051      	b.n	8002d5a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d03b      	beq.n	8002d3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b80      	cmp	r3, #128	; 0x80
 8002cc6:	d038      	beq.n	8002d3a <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d035      	beq.n	8002d3a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d111      	bne.n	8002d00 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f900 	bl	8002eec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2284      	movs	r2, #132	; 0x84
 8002cf0:	2108      	movs	r1, #8
 8002cf2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2278      	movs	r2, #120	; 0x78
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e02c      	b.n	8002d5a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d112      	bne.n	8002d3a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2280      	movs	r2, #128	; 0x80
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 f8e3 	bl	8002eec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2284      	movs	r2, #132	; 0x84
 8002d2a:	2120      	movs	r1, #32
 8002d2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2278      	movs	r2, #120	; 0x78
 8002d32:	2100      	movs	r1, #0
 8002d34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e00f      	b.n	8002d5a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	4013      	ands	r3, r2
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	425a      	negs	r2, r3
 8002d4a:	4153      	adcs	r3, r2
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	001a      	movs	r2, r3
 8002d50:	1dfb      	adds	r3, r7, #7
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d09e      	beq.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b004      	add	sp, #16
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b090      	sub	sp, #64	; 0x40
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	1dbb      	adds	r3, r7, #6
 8002d70:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1dba      	adds	r2, r7, #6
 8002d7c:	2158      	movs	r1, #88	; 0x58
 8002d7e:	8812      	ldrh	r2, [r2, #0]
 8002d80:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2284      	movs	r2, #132	; 0x84
 8002d86:	2100      	movs	r1, #0
 8002d88:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	2122      	movs	r1, #34	; 0x22
 8002d90:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d028      	beq.n	8002dec <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9e:	4a3e      	ldr	r2, [pc, #248]	; (8002e98 <UART_Start_Receive_DMA+0x134>)
 8002da0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da6:	4a3d      	ldr	r2, [pc, #244]	; (8002e9c <UART_Start_Receive_DMA+0x138>)
 8002da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dae:	4a3c      	ldr	r2, [pc, #240]	; (8002ea0 <UART_Start_Receive_DMA+0x13c>)
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db6:	2200      	movs	r2, #0
 8002db8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3324      	adds	r3, #36	; 0x24
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	001a      	movs	r2, r3
 8002dcc:	1dbb      	adds	r3, r7, #6
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	f7fd ffea 	bl	8000da8 <HAL_DMA_Start_IT>
 8002dd4:	1e03      	subs	r3, r0, #0
 8002dd6:	d009      	beq.n	8002dec <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2284      	movs	r2, #132	; 0x84
 8002ddc:	2110      	movs	r1, #16
 8002dde:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	2120      	movs	r1, #32
 8002de6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e050      	b.n	8002e8e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d019      	beq.n	8002e28 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df4:	f3ef 8310 	mrs	r3, PRIMASK
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dfe:	2301      	movs	r3, #1
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	f383 8810 	msr	PRIMASK, r3
}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	0049      	lsls	r1, r1, #1
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	f383 8810 	msr	PRIMASK, r3
}
 8002e26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e28:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2c:	613b      	str	r3, [r7, #16]
  return(result);
 8002e2e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e32:	2301      	movs	r3, #1
 8002e34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f383 8810 	msr	PRIMASK, r3
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2101      	movs	r1, #1
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f383 8810 	msr	PRIMASK, r3
}
 8002e58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e60:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
 8002e64:	2301      	movs	r3, #1
 8002e66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f383 8810 	msr	PRIMASK, r3
}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2140      	movs	r1, #64	; 0x40
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	f383 8810 	msr	PRIMASK, r3
}
 8002e8a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b010      	add	sp, #64	; 0x40
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	08003069 	.word	0x08003069
 8002e9c:	08003195 	.word	0x08003195
 8002ea0:	080031d7 	.word	0x080031d7

08002ea4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eac:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f383 8810 	msr	PRIMASK, r3
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	21c0      	movs	r1, #192	; 0xc0
 8002ece:	438a      	bics	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f383 8810 	msr	PRIMASK, r3
}
 8002edc:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b006      	add	sp, #24
 8002eea:	bd80      	pop	{r7, pc}

08002eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef8:	617b      	str	r3, [r7, #20]
  return(result);
 8002efa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
 8002efe:	2301      	movs	r3, #1
 8002f00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4926      	ldr	r1, [pc, #152]	; (8002fb0 <UART_EndRxTransfer+0xc4>)
 8002f16:	400a      	ands	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f383 8810 	msr	PRIMASK, r3
}
 8002f24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f26:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2a:	623b      	str	r3, [r7, #32]
  return(result);
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f30:	2301      	movs	r3, #1
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	f383 8810 	msr	PRIMASK, r3
}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	438a      	bics	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	f383 8810 	msr	PRIMASK, r3
}
 8002f56:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d118      	bne.n	8002f92 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f60:	f3ef 8310 	mrs	r3, PRIMASK
 8002f64:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f66:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f383 8810 	msr	PRIMASK, r3
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2110      	movs	r1, #16
 8002f82:	438a      	bics	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f383 8810 	msr	PRIMASK, r3
}
 8002f90:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	2120      	movs	r1, #32
 8002f98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b00e      	add	sp, #56	; 0x38
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	fffffedf 	.word	0xfffffedf

08002fb4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	; 0x30
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d035      	beq.n	8003036 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	2252      	movs	r2, #82	; 0x52
 8002fce:	2100      	movs	r1, #0
 8002fd0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fd8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fdc:	2301      	movs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f383 8810 	msr	PRIMASK, r3
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	438a      	bics	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f383 8810 	msr	PRIMASK, r3
}
 8003002:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003004:	f3ef 8310 	mrs	r3, PRIMASK
 8003008:	61bb      	str	r3, [r7, #24]
  return(result);
 800300a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
 800300e:	2301      	movs	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f383 8810 	msr	PRIMASK, r3
}
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2140      	movs	r1, #64	; 0x40
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f383 8810 	msr	PRIMASK, r3
}
 8003034:	e004      	b.n	8003040 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8003036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003038:	0018      	movs	r0, r3
 800303a:	f7fd fb41 	bl	80006c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b00c      	add	sp, #48	; 0x30
 8003046:	bd80      	pop	{r7, pc}

08003048 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	0018      	movs	r0, r3
 800305a:	f7ff fb4b 	bl	80026f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b094      	sub	sp, #80	; 0x50
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b20      	cmp	r3, #32
 800307c:	d06f      	beq.n	800315e <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800307e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003080:	225a      	movs	r2, #90	; 0x5a
 8003082:	2100      	movs	r1, #0
 8003084:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003086:	f3ef 8310 	mrs	r3, PRIMASK
 800308a:	61bb      	str	r3, [r7, #24]
  return(result);
 800308c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003090:	2301      	movs	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f383 8810 	msr	PRIMASK, r3
}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	493a      	ldr	r1, [pc, #232]	; (8003190 <UART_DMAReceiveCplt+0x128>)
 80030a8:	400a      	ands	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	f383 8810 	msr	PRIMASK, r3
}
 80030b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b8:	f3ef 8310 	mrs	r3, PRIMASK
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c0:	647b      	str	r3, [r7, #68]	; 0x44
 80030c2:	2301      	movs	r3, #1
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	f383 8810 	msr	PRIMASK, r3
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2101      	movs	r1, #1
 80030da:	438a      	bics	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	f383 8810 	msr	PRIMASK, r3
}
 80030e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ea:	f3ef 8310 	mrs	r3, PRIMASK
 80030ee:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030f2:	643b      	str	r3, [r7, #64]	; 0x40
 80030f4:	2301      	movs	r3, #1
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fa:	f383 8810 	msr	PRIMASK, r3
}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2140      	movs	r1, #64	; 0x40
 800310c:	438a      	bics	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003112:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	f383 8810 	msr	PRIMASK, r3
}
 800311a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800311c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	2120      	movs	r1, #32
 8003122:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003128:	2b01      	cmp	r3, #1
 800312a:	d118      	bne.n	800315e <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312c:	f3ef 8310 	mrs	r3, PRIMASK
 8003130:	60fb      	str	r3, [r7, #12]
  return(result);
 8003132:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003136:	2301      	movs	r3, #1
 8003138:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f383 8810 	msr	PRIMASK, r3
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2110      	movs	r1, #16
 800314e:	438a      	bics	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003154:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f383 8810 	msr	PRIMASK, r3
}
 800315c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800315e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003160:	2200      	movs	r2, #0
 8003162:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003168:	2b01      	cmp	r3, #1
 800316a:	d108      	bne.n	800317e <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800316c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800316e:	2258      	movs	r2, #88	; 0x58
 8003170:	5a9a      	ldrh	r2, [r3, r2]
 8003172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003174:	0011      	movs	r1, r2
 8003176:	0018      	movs	r0, r3
 8003178:	f7ff fadc 	bl	8002734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800317c:	e003      	b.n	8003186 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800317e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003180:	0018      	movs	r0, r3
 8003182:	f7ff fabf 	bl	8002704 <HAL_UART_RxCpltCallback>
}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	46bd      	mov	sp, r7
 800318a:	b014      	add	sp, #80	; 0x50
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	fffffeff 	.word	0xfffffeff

08003194 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d10a      	bne.n	80031c6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2258      	movs	r2, #88	; 0x58
 80031b4:	5a9b      	ldrh	r3, [r3, r2]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	0011      	movs	r1, r2
 80031be:	0018      	movs	r0, r3
 80031c0:	f7ff fab8 	bl	8002734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031c4:	e003      	b.n	80031ce <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7ff faa3 	bl	8002714 <HAL_UART_RxHalfCpltCallback>
}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b004      	add	sp, #16
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2280      	movs	r2, #128	; 0x80
 80031ee:	589b      	ldr	r3, [r3, r2]
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b80      	cmp	r3, #128	; 0x80
 80031fe:	d10a      	bne.n	8003216 <UART_DMAError+0x40>
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b21      	cmp	r3, #33	; 0x21
 8003204:	d107      	bne.n	8003216 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2252      	movs	r2, #82	; 0x52
 800320a:	2100      	movs	r1, #0
 800320c:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	0018      	movs	r0, r3
 8003212:	f7ff fe47 	bl	8002ea4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2240      	movs	r2, #64	; 0x40
 800321e:	4013      	ands	r3, r2
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d10a      	bne.n	800323a <UART_DMAError+0x64>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b22      	cmp	r3, #34	; 0x22
 8003228:	d107      	bne.n	800323a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	225a      	movs	r2, #90	; 0x5a
 800322e:	2100      	movs	r1, #0
 8003230:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	0018      	movs	r0, r3
 8003236:	f7ff fe59 	bl	8002eec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2284      	movs	r2, #132	; 0x84
 800323e:	589b      	ldr	r3, [r3, r2]
 8003240:	2210      	movs	r2, #16
 8003242:	431a      	orrs	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2184      	movs	r1, #132	; 0x84
 8003248:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	0018      	movs	r0, r3
 800324e:	f7ff fa69 	bl	8002724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b006      	add	sp, #24
 8003258:	bd80      	pop	{r7, pc}

0800325a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	225a      	movs	r2, #90	; 0x5a
 800326c:	2100      	movs	r1, #0
 800326e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2252      	movs	r2, #82	; 0x52
 8003274:	2100      	movs	r1, #0
 8003276:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	0018      	movs	r0, r3
 800327c:	f7ff fa52 	bl	8002724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	b004      	add	sp, #16
 8003286:	bd80      	pop	{r7, pc}

08003288 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003290:	f3ef 8310 	mrs	r3, PRIMASK
 8003294:	60bb      	str	r3, [r7, #8]
  return(result);
 8003296:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	2301      	movs	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f383 8810 	msr	PRIMASK, r3
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2140      	movs	r1, #64	; 0x40
 80032b2:	438a      	bics	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f383 8810 	msr	PRIMASK, r3
}
 80032c0:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7fd f9f5 	bl	80006c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	b006      	add	sp, #24
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <__errno>:
 80032e0:	4b01      	ldr	r3, [pc, #4]	; (80032e8 <__errno+0x8>)
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	4770      	bx	lr
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	2000000c 	.word	0x2000000c

080032ec <__libc_init_array>:
 80032ec:	b570      	push	{r4, r5, r6, lr}
 80032ee:	2600      	movs	r6, #0
 80032f0:	4d0c      	ldr	r5, [pc, #48]	; (8003324 <__libc_init_array+0x38>)
 80032f2:	4c0d      	ldr	r4, [pc, #52]	; (8003328 <__libc_init_array+0x3c>)
 80032f4:	1b64      	subs	r4, r4, r5
 80032f6:	10a4      	asrs	r4, r4, #2
 80032f8:	42a6      	cmp	r6, r4
 80032fa:	d109      	bne.n	8003310 <__libc_init_array+0x24>
 80032fc:	2600      	movs	r6, #0
 80032fe:	f000 fc9f 	bl	8003c40 <_init>
 8003302:	4d0a      	ldr	r5, [pc, #40]	; (800332c <__libc_init_array+0x40>)
 8003304:	4c0a      	ldr	r4, [pc, #40]	; (8003330 <__libc_init_array+0x44>)
 8003306:	1b64      	subs	r4, r4, r5
 8003308:	10a4      	asrs	r4, r4, #2
 800330a:	42a6      	cmp	r6, r4
 800330c:	d105      	bne.n	800331a <__libc_init_array+0x2e>
 800330e:	bd70      	pop	{r4, r5, r6, pc}
 8003310:	00b3      	lsls	r3, r6, #2
 8003312:	58eb      	ldr	r3, [r5, r3]
 8003314:	4798      	blx	r3
 8003316:	3601      	adds	r6, #1
 8003318:	e7ee      	b.n	80032f8 <__libc_init_array+0xc>
 800331a:	00b3      	lsls	r3, r6, #2
 800331c:	58eb      	ldr	r3, [r5, r3]
 800331e:	4798      	blx	r3
 8003320:	3601      	adds	r6, #1
 8003322:	e7f2      	b.n	800330a <__libc_init_array+0x1e>
 8003324:	08003cd8 	.word	0x08003cd8
 8003328:	08003cd8 	.word	0x08003cd8
 800332c:	08003cd8 	.word	0x08003cd8
 8003330:	08003cdc 	.word	0x08003cdc

08003334 <memset>:
 8003334:	0003      	movs	r3, r0
 8003336:	1882      	adds	r2, r0, r2
 8003338:	4293      	cmp	r3, r2
 800333a:	d100      	bne.n	800333e <memset+0xa>
 800333c:	4770      	bx	lr
 800333e:	7019      	strb	r1, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	e7f9      	b.n	8003338 <memset+0x4>

08003344 <sniprintf>:
 8003344:	b40c      	push	{r2, r3}
 8003346:	b530      	push	{r4, r5, lr}
 8003348:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <sniprintf+0x64>)
 800334a:	000c      	movs	r4, r1
 800334c:	681d      	ldr	r5, [r3, #0]
 800334e:	b09d      	sub	sp, #116	; 0x74
 8003350:	2900      	cmp	r1, #0
 8003352:	da08      	bge.n	8003366 <sniprintf+0x22>
 8003354:	238b      	movs	r3, #139	; 0x8b
 8003356:	2001      	movs	r0, #1
 8003358:	602b      	str	r3, [r5, #0]
 800335a:	4240      	negs	r0, r0
 800335c:	b01d      	add	sp, #116	; 0x74
 800335e:	bc30      	pop	{r4, r5}
 8003360:	bc08      	pop	{r3}
 8003362:	b002      	add	sp, #8
 8003364:	4718      	bx	r3
 8003366:	2382      	movs	r3, #130	; 0x82
 8003368:	466a      	mov	r2, sp
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	8293      	strh	r3, [r2, #20]
 800336e:	2300      	movs	r3, #0
 8003370:	9002      	str	r0, [sp, #8]
 8003372:	9006      	str	r0, [sp, #24]
 8003374:	4299      	cmp	r1, r3
 8003376:	d000      	beq.n	800337a <sniprintf+0x36>
 8003378:	1e4b      	subs	r3, r1, #1
 800337a:	9304      	str	r3, [sp, #16]
 800337c:	9307      	str	r3, [sp, #28]
 800337e:	2301      	movs	r3, #1
 8003380:	466a      	mov	r2, sp
 8003382:	425b      	negs	r3, r3
 8003384:	82d3      	strh	r3, [r2, #22]
 8003386:	0028      	movs	r0, r5
 8003388:	ab21      	add	r3, sp, #132	; 0x84
 800338a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800338c:	a902      	add	r1, sp, #8
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	f000 f86e 	bl	8003470 <_svfiprintf_r>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	da01      	bge.n	800339c <sniprintf+0x58>
 8003398:	238b      	movs	r3, #139	; 0x8b
 800339a:	602b      	str	r3, [r5, #0]
 800339c:	2c00      	cmp	r4, #0
 800339e:	d0dd      	beq.n	800335c <sniprintf+0x18>
 80033a0:	2300      	movs	r3, #0
 80033a2:	9a02      	ldr	r2, [sp, #8]
 80033a4:	7013      	strb	r3, [r2, #0]
 80033a6:	e7d9      	b.n	800335c <sniprintf+0x18>
 80033a8:	2000000c 	.word	0x2000000c

080033ac <__ssputs_r>:
 80033ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ae:	688e      	ldr	r6, [r1, #8]
 80033b0:	b085      	sub	sp, #20
 80033b2:	0007      	movs	r7, r0
 80033b4:	000c      	movs	r4, r1
 80033b6:	9203      	str	r2, [sp, #12]
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	429e      	cmp	r6, r3
 80033bc:	d83c      	bhi.n	8003438 <__ssputs_r+0x8c>
 80033be:	2390      	movs	r3, #144	; 0x90
 80033c0:	898a      	ldrh	r2, [r1, #12]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	421a      	tst	r2, r3
 80033c6:	d034      	beq.n	8003432 <__ssputs_r+0x86>
 80033c8:	6909      	ldr	r1, [r1, #16]
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	6960      	ldr	r0, [r4, #20]
 80033ce:	1a5b      	subs	r3, r3, r1
 80033d0:	9302      	str	r3, [sp, #8]
 80033d2:	2303      	movs	r3, #3
 80033d4:	4343      	muls	r3, r0
 80033d6:	0fdd      	lsrs	r5, r3, #31
 80033d8:	18ed      	adds	r5, r5, r3
 80033da:	9b01      	ldr	r3, [sp, #4]
 80033dc:	9802      	ldr	r0, [sp, #8]
 80033de:	3301      	adds	r3, #1
 80033e0:	181b      	adds	r3, r3, r0
 80033e2:	106d      	asrs	r5, r5, #1
 80033e4:	42ab      	cmp	r3, r5
 80033e6:	d900      	bls.n	80033ea <__ssputs_r+0x3e>
 80033e8:	001d      	movs	r5, r3
 80033ea:	0553      	lsls	r3, r2, #21
 80033ec:	d532      	bpl.n	8003454 <__ssputs_r+0xa8>
 80033ee:	0029      	movs	r1, r5
 80033f0:	0038      	movs	r0, r7
 80033f2:	f000 fb53 	bl	8003a9c <_malloc_r>
 80033f6:	1e06      	subs	r6, r0, #0
 80033f8:	d109      	bne.n	800340e <__ssputs_r+0x62>
 80033fa:	230c      	movs	r3, #12
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	2340      	movs	r3, #64	; 0x40
 8003400:	2001      	movs	r0, #1
 8003402:	89a2      	ldrh	r2, [r4, #12]
 8003404:	4240      	negs	r0, r0
 8003406:	4313      	orrs	r3, r2
 8003408:	81a3      	strh	r3, [r4, #12]
 800340a:	b005      	add	sp, #20
 800340c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800340e:	9a02      	ldr	r2, [sp, #8]
 8003410:	6921      	ldr	r1, [r4, #16]
 8003412:	f000 faba 	bl	800398a <memcpy>
 8003416:	89a3      	ldrh	r3, [r4, #12]
 8003418:	4a14      	ldr	r2, [pc, #80]	; (800346c <__ssputs_r+0xc0>)
 800341a:	401a      	ands	r2, r3
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	4313      	orrs	r3, r2
 8003420:	81a3      	strh	r3, [r4, #12]
 8003422:	9b02      	ldr	r3, [sp, #8]
 8003424:	6126      	str	r6, [r4, #16]
 8003426:	18f6      	adds	r6, r6, r3
 8003428:	6026      	str	r6, [r4, #0]
 800342a:	6165      	str	r5, [r4, #20]
 800342c:	9e01      	ldr	r6, [sp, #4]
 800342e:	1aed      	subs	r5, r5, r3
 8003430:	60a5      	str	r5, [r4, #8]
 8003432:	9b01      	ldr	r3, [sp, #4]
 8003434:	429e      	cmp	r6, r3
 8003436:	d900      	bls.n	800343a <__ssputs_r+0x8e>
 8003438:	9e01      	ldr	r6, [sp, #4]
 800343a:	0032      	movs	r2, r6
 800343c:	9903      	ldr	r1, [sp, #12]
 800343e:	6820      	ldr	r0, [r4, #0]
 8003440:	f000 faac 	bl	800399c <memmove>
 8003444:	68a3      	ldr	r3, [r4, #8]
 8003446:	2000      	movs	r0, #0
 8003448:	1b9b      	subs	r3, r3, r6
 800344a:	60a3      	str	r3, [r4, #8]
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	199e      	adds	r6, r3, r6
 8003450:	6026      	str	r6, [r4, #0]
 8003452:	e7da      	b.n	800340a <__ssputs_r+0x5e>
 8003454:	002a      	movs	r2, r5
 8003456:	0038      	movs	r0, r7
 8003458:	f000 fb96 	bl	8003b88 <_realloc_r>
 800345c:	1e06      	subs	r6, r0, #0
 800345e:	d1e0      	bne.n	8003422 <__ssputs_r+0x76>
 8003460:	0038      	movs	r0, r7
 8003462:	6921      	ldr	r1, [r4, #16]
 8003464:	f000 faae 	bl	80039c4 <_free_r>
 8003468:	e7c7      	b.n	80033fa <__ssputs_r+0x4e>
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	fffffb7f 	.word	0xfffffb7f

08003470 <_svfiprintf_r>:
 8003470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003472:	b0a1      	sub	sp, #132	; 0x84
 8003474:	9003      	str	r0, [sp, #12]
 8003476:	001d      	movs	r5, r3
 8003478:	898b      	ldrh	r3, [r1, #12]
 800347a:	000f      	movs	r7, r1
 800347c:	0016      	movs	r6, r2
 800347e:	061b      	lsls	r3, r3, #24
 8003480:	d511      	bpl.n	80034a6 <_svfiprintf_r+0x36>
 8003482:	690b      	ldr	r3, [r1, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10e      	bne.n	80034a6 <_svfiprintf_r+0x36>
 8003488:	2140      	movs	r1, #64	; 0x40
 800348a:	f000 fb07 	bl	8003a9c <_malloc_r>
 800348e:	6038      	str	r0, [r7, #0]
 8003490:	6138      	str	r0, [r7, #16]
 8003492:	2800      	cmp	r0, #0
 8003494:	d105      	bne.n	80034a2 <_svfiprintf_r+0x32>
 8003496:	230c      	movs	r3, #12
 8003498:	9a03      	ldr	r2, [sp, #12]
 800349a:	3801      	subs	r0, #1
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	b021      	add	sp, #132	; 0x84
 80034a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a2:	2340      	movs	r3, #64	; 0x40
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	2300      	movs	r3, #0
 80034a8:	ac08      	add	r4, sp, #32
 80034aa:	6163      	str	r3, [r4, #20]
 80034ac:	3320      	adds	r3, #32
 80034ae:	7663      	strb	r3, [r4, #25]
 80034b0:	3310      	adds	r3, #16
 80034b2:	76a3      	strb	r3, [r4, #26]
 80034b4:	9507      	str	r5, [sp, #28]
 80034b6:	0035      	movs	r5, r6
 80034b8:	782b      	ldrb	r3, [r5, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <_svfiprintf_r+0x52>
 80034be:	2b25      	cmp	r3, #37	; 0x25
 80034c0:	d147      	bne.n	8003552 <_svfiprintf_r+0xe2>
 80034c2:	1bab      	subs	r3, r5, r6
 80034c4:	9305      	str	r3, [sp, #20]
 80034c6:	42b5      	cmp	r5, r6
 80034c8:	d00c      	beq.n	80034e4 <_svfiprintf_r+0x74>
 80034ca:	0032      	movs	r2, r6
 80034cc:	0039      	movs	r1, r7
 80034ce:	9803      	ldr	r0, [sp, #12]
 80034d0:	f7ff ff6c 	bl	80033ac <__ssputs_r>
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	d100      	bne.n	80034da <_svfiprintf_r+0x6a>
 80034d8:	e0ae      	b.n	8003638 <_svfiprintf_r+0x1c8>
 80034da:	6962      	ldr	r2, [r4, #20]
 80034dc:	9b05      	ldr	r3, [sp, #20]
 80034de:	4694      	mov	ip, r2
 80034e0:	4463      	add	r3, ip
 80034e2:	6163      	str	r3, [r4, #20]
 80034e4:	782b      	ldrb	r3, [r5, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d100      	bne.n	80034ec <_svfiprintf_r+0x7c>
 80034ea:	e0a5      	b.n	8003638 <_svfiprintf_r+0x1c8>
 80034ec:	2201      	movs	r2, #1
 80034ee:	2300      	movs	r3, #0
 80034f0:	4252      	negs	r2, r2
 80034f2:	6062      	str	r2, [r4, #4]
 80034f4:	a904      	add	r1, sp, #16
 80034f6:	3254      	adds	r2, #84	; 0x54
 80034f8:	1852      	adds	r2, r2, r1
 80034fa:	1c6e      	adds	r6, r5, #1
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	60e3      	str	r3, [r4, #12]
 8003500:	60a3      	str	r3, [r4, #8]
 8003502:	7013      	strb	r3, [r2, #0]
 8003504:	65a3      	str	r3, [r4, #88]	; 0x58
 8003506:	2205      	movs	r2, #5
 8003508:	7831      	ldrb	r1, [r6, #0]
 800350a:	4854      	ldr	r0, [pc, #336]	; (800365c <_svfiprintf_r+0x1ec>)
 800350c:	f000 fa32 	bl	8003974 <memchr>
 8003510:	1c75      	adds	r5, r6, #1
 8003512:	2800      	cmp	r0, #0
 8003514:	d11f      	bne.n	8003556 <_svfiprintf_r+0xe6>
 8003516:	6822      	ldr	r2, [r4, #0]
 8003518:	06d3      	lsls	r3, r2, #27
 800351a:	d504      	bpl.n	8003526 <_svfiprintf_r+0xb6>
 800351c:	2353      	movs	r3, #83	; 0x53
 800351e:	a904      	add	r1, sp, #16
 8003520:	185b      	adds	r3, r3, r1
 8003522:	2120      	movs	r1, #32
 8003524:	7019      	strb	r1, [r3, #0]
 8003526:	0713      	lsls	r3, r2, #28
 8003528:	d504      	bpl.n	8003534 <_svfiprintf_r+0xc4>
 800352a:	2353      	movs	r3, #83	; 0x53
 800352c:	a904      	add	r1, sp, #16
 800352e:	185b      	adds	r3, r3, r1
 8003530:	212b      	movs	r1, #43	; 0x2b
 8003532:	7019      	strb	r1, [r3, #0]
 8003534:	7833      	ldrb	r3, [r6, #0]
 8003536:	2b2a      	cmp	r3, #42	; 0x2a
 8003538:	d016      	beq.n	8003568 <_svfiprintf_r+0xf8>
 800353a:	0035      	movs	r5, r6
 800353c:	2100      	movs	r1, #0
 800353e:	200a      	movs	r0, #10
 8003540:	68e3      	ldr	r3, [r4, #12]
 8003542:	782a      	ldrb	r2, [r5, #0]
 8003544:	1c6e      	adds	r6, r5, #1
 8003546:	3a30      	subs	r2, #48	; 0x30
 8003548:	2a09      	cmp	r2, #9
 800354a:	d94e      	bls.n	80035ea <_svfiprintf_r+0x17a>
 800354c:	2900      	cmp	r1, #0
 800354e:	d111      	bne.n	8003574 <_svfiprintf_r+0x104>
 8003550:	e017      	b.n	8003582 <_svfiprintf_r+0x112>
 8003552:	3501      	adds	r5, #1
 8003554:	e7b0      	b.n	80034b8 <_svfiprintf_r+0x48>
 8003556:	4b41      	ldr	r3, [pc, #260]	; (800365c <_svfiprintf_r+0x1ec>)
 8003558:	6822      	ldr	r2, [r4, #0]
 800355a:	1ac0      	subs	r0, r0, r3
 800355c:	2301      	movs	r3, #1
 800355e:	4083      	lsls	r3, r0
 8003560:	4313      	orrs	r3, r2
 8003562:	002e      	movs	r6, r5
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	e7ce      	b.n	8003506 <_svfiprintf_r+0x96>
 8003568:	9b07      	ldr	r3, [sp, #28]
 800356a:	1d19      	adds	r1, r3, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	9107      	str	r1, [sp, #28]
 8003570:	2b00      	cmp	r3, #0
 8003572:	db01      	blt.n	8003578 <_svfiprintf_r+0x108>
 8003574:	930b      	str	r3, [sp, #44]	; 0x2c
 8003576:	e004      	b.n	8003582 <_svfiprintf_r+0x112>
 8003578:	425b      	negs	r3, r3
 800357a:	60e3      	str	r3, [r4, #12]
 800357c:	2302      	movs	r3, #2
 800357e:	4313      	orrs	r3, r2
 8003580:	6023      	str	r3, [r4, #0]
 8003582:	782b      	ldrb	r3, [r5, #0]
 8003584:	2b2e      	cmp	r3, #46	; 0x2e
 8003586:	d10a      	bne.n	800359e <_svfiprintf_r+0x12e>
 8003588:	786b      	ldrb	r3, [r5, #1]
 800358a:	2b2a      	cmp	r3, #42	; 0x2a
 800358c:	d135      	bne.n	80035fa <_svfiprintf_r+0x18a>
 800358e:	9b07      	ldr	r3, [sp, #28]
 8003590:	3502      	adds	r5, #2
 8003592:	1d1a      	adds	r2, r3, #4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	9207      	str	r2, [sp, #28]
 8003598:	2b00      	cmp	r3, #0
 800359a:	db2b      	blt.n	80035f4 <_svfiprintf_r+0x184>
 800359c:	9309      	str	r3, [sp, #36]	; 0x24
 800359e:	4e30      	ldr	r6, [pc, #192]	; (8003660 <_svfiprintf_r+0x1f0>)
 80035a0:	2203      	movs	r2, #3
 80035a2:	0030      	movs	r0, r6
 80035a4:	7829      	ldrb	r1, [r5, #0]
 80035a6:	f000 f9e5 	bl	8003974 <memchr>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d006      	beq.n	80035bc <_svfiprintf_r+0x14c>
 80035ae:	2340      	movs	r3, #64	; 0x40
 80035b0:	1b80      	subs	r0, r0, r6
 80035b2:	4083      	lsls	r3, r0
 80035b4:	6822      	ldr	r2, [r4, #0]
 80035b6:	3501      	adds	r5, #1
 80035b8:	4313      	orrs	r3, r2
 80035ba:	6023      	str	r3, [r4, #0]
 80035bc:	7829      	ldrb	r1, [r5, #0]
 80035be:	2206      	movs	r2, #6
 80035c0:	4828      	ldr	r0, [pc, #160]	; (8003664 <_svfiprintf_r+0x1f4>)
 80035c2:	1c6e      	adds	r6, r5, #1
 80035c4:	7621      	strb	r1, [r4, #24]
 80035c6:	f000 f9d5 	bl	8003974 <memchr>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d03c      	beq.n	8003648 <_svfiprintf_r+0x1d8>
 80035ce:	4b26      	ldr	r3, [pc, #152]	; (8003668 <_svfiprintf_r+0x1f8>)
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d125      	bne.n	8003620 <_svfiprintf_r+0x1b0>
 80035d4:	2207      	movs	r2, #7
 80035d6:	9b07      	ldr	r3, [sp, #28]
 80035d8:	3307      	adds	r3, #7
 80035da:	4393      	bics	r3, r2
 80035dc:	3308      	adds	r3, #8
 80035de:	9307      	str	r3, [sp, #28]
 80035e0:	6963      	ldr	r3, [r4, #20]
 80035e2:	9a04      	ldr	r2, [sp, #16]
 80035e4:	189b      	adds	r3, r3, r2
 80035e6:	6163      	str	r3, [r4, #20]
 80035e8:	e765      	b.n	80034b6 <_svfiprintf_r+0x46>
 80035ea:	4343      	muls	r3, r0
 80035ec:	0035      	movs	r5, r6
 80035ee:	2101      	movs	r1, #1
 80035f0:	189b      	adds	r3, r3, r2
 80035f2:	e7a6      	b.n	8003542 <_svfiprintf_r+0xd2>
 80035f4:	2301      	movs	r3, #1
 80035f6:	425b      	negs	r3, r3
 80035f8:	e7d0      	b.n	800359c <_svfiprintf_r+0x12c>
 80035fa:	2300      	movs	r3, #0
 80035fc:	200a      	movs	r0, #10
 80035fe:	001a      	movs	r2, r3
 8003600:	3501      	adds	r5, #1
 8003602:	6063      	str	r3, [r4, #4]
 8003604:	7829      	ldrb	r1, [r5, #0]
 8003606:	1c6e      	adds	r6, r5, #1
 8003608:	3930      	subs	r1, #48	; 0x30
 800360a:	2909      	cmp	r1, #9
 800360c:	d903      	bls.n	8003616 <_svfiprintf_r+0x1a6>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0c5      	beq.n	800359e <_svfiprintf_r+0x12e>
 8003612:	9209      	str	r2, [sp, #36]	; 0x24
 8003614:	e7c3      	b.n	800359e <_svfiprintf_r+0x12e>
 8003616:	4342      	muls	r2, r0
 8003618:	0035      	movs	r5, r6
 800361a:	2301      	movs	r3, #1
 800361c:	1852      	adds	r2, r2, r1
 800361e:	e7f1      	b.n	8003604 <_svfiprintf_r+0x194>
 8003620:	ab07      	add	r3, sp, #28
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	003a      	movs	r2, r7
 8003626:	0021      	movs	r1, r4
 8003628:	4b10      	ldr	r3, [pc, #64]	; (800366c <_svfiprintf_r+0x1fc>)
 800362a:	9803      	ldr	r0, [sp, #12]
 800362c:	e000      	b.n	8003630 <_svfiprintf_r+0x1c0>
 800362e:	bf00      	nop
 8003630:	9004      	str	r0, [sp, #16]
 8003632:	9b04      	ldr	r3, [sp, #16]
 8003634:	3301      	adds	r3, #1
 8003636:	d1d3      	bne.n	80035e0 <_svfiprintf_r+0x170>
 8003638:	89bb      	ldrh	r3, [r7, #12]
 800363a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800363c:	065b      	lsls	r3, r3, #25
 800363e:	d400      	bmi.n	8003642 <_svfiprintf_r+0x1d2>
 8003640:	e72d      	b.n	800349e <_svfiprintf_r+0x2e>
 8003642:	2001      	movs	r0, #1
 8003644:	4240      	negs	r0, r0
 8003646:	e72a      	b.n	800349e <_svfiprintf_r+0x2e>
 8003648:	ab07      	add	r3, sp, #28
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	003a      	movs	r2, r7
 800364e:	0021      	movs	r1, r4
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <_svfiprintf_r+0x1fc>)
 8003652:	9803      	ldr	r0, [sp, #12]
 8003654:	f000 f87c 	bl	8003750 <_printf_i>
 8003658:	e7ea      	b.n	8003630 <_svfiprintf_r+0x1c0>
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	08003ca4 	.word	0x08003ca4
 8003660:	08003caa 	.word	0x08003caa
 8003664:	08003cae 	.word	0x08003cae
 8003668:	00000000 	.word	0x00000000
 800366c:	080033ad 	.word	0x080033ad

08003670 <_printf_common>:
 8003670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003672:	0015      	movs	r5, r2
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	688a      	ldr	r2, [r1, #8]
 8003678:	690b      	ldr	r3, [r1, #16]
 800367a:	000c      	movs	r4, r1
 800367c:	9000      	str	r0, [sp, #0]
 800367e:	4293      	cmp	r3, r2
 8003680:	da00      	bge.n	8003684 <_printf_common+0x14>
 8003682:	0013      	movs	r3, r2
 8003684:	0022      	movs	r2, r4
 8003686:	602b      	str	r3, [r5, #0]
 8003688:	3243      	adds	r2, #67	; 0x43
 800368a:	7812      	ldrb	r2, [r2, #0]
 800368c:	2a00      	cmp	r2, #0
 800368e:	d001      	beq.n	8003694 <_printf_common+0x24>
 8003690:	3301      	adds	r3, #1
 8003692:	602b      	str	r3, [r5, #0]
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	069b      	lsls	r3, r3, #26
 8003698:	d502      	bpl.n	80036a0 <_printf_common+0x30>
 800369a:	682b      	ldr	r3, [r5, #0]
 800369c:	3302      	adds	r3, #2
 800369e:	602b      	str	r3, [r5, #0]
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	2306      	movs	r3, #6
 80036a4:	0017      	movs	r7, r2
 80036a6:	401f      	ands	r7, r3
 80036a8:	421a      	tst	r2, r3
 80036aa:	d027      	beq.n	80036fc <_printf_common+0x8c>
 80036ac:	0023      	movs	r3, r4
 80036ae:	3343      	adds	r3, #67	; 0x43
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	1e5a      	subs	r2, r3, #1
 80036b4:	4193      	sbcs	r3, r2
 80036b6:	6822      	ldr	r2, [r4, #0]
 80036b8:	0692      	lsls	r2, r2, #26
 80036ba:	d430      	bmi.n	800371e <_printf_common+0xae>
 80036bc:	0022      	movs	r2, r4
 80036be:	9901      	ldr	r1, [sp, #4]
 80036c0:	9800      	ldr	r0, [sp, #0]
 80036c2:	9e08      	ldr	r6, [sp, #32]
 80036c4:	3243      	adds	r2, #67	; 0x43
 80036c6:	47b0      	blx	r6
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d025      	beq.n	8003718 <_printf_common+0xa8>
 80036cc:	2306      	movs	r3, #6
 80036ce:	6820      	ldr	r0, [r4, #0]
 80036d0:	682a      	ldr	r2, [r5, #0]
 80036d2:	68e1      	ldr	r1, [r4, #12]
 80036d4:	2500      	movs	r5, #0
 80036d6:	4003      	ands	r3, r0
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d103      	bne.n	80036e4 <_printf_common+0x74>
 80036dc:	1a8d      	subs	r5, r1, r2
 80036de:	43eb      	mvns	r3, r5
 80036e0:	17db      	asrs	r3, r3, #31
 80036e2:	401d      	ands	r5, r3
 80036e4:	68a3      	ldr	r3, [r4, #8]
 80036e6:	6922      	ldr	r2, [r4, #16]
 80036e8:	4293      	cmp	r3, r2
 80036ea:	dd01      	ble.n	80036f0 <_printf_common+0x80>
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	18ed      	adds	r5, r5, r3
 80036f0:	2700      	movs	r7, #0
 80036f2:	42bd      	cmp	r5, r7
 80036f4:	d120      	bne.n	8003738 <_printf_common+0xc8>
 80036f6:	2000      	movs	r0, #0
 80036f8:	e010      	b.n	800371c <_printf_common+0xac>
 80036fa:	3701      	adds	r7, #1
 80036fc:	68e3      	ldr	r3, [r4, #12]
 80036fe:	682a      	ldr	r2, [r5, #0]
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	42bb      	cmp	r3, r7
 8003704:	ddd2      	ble.n	80036ac <_printf_common+0x3c>
 8003706:	0022      	movs	r2, r4
 8003708:	2301      	movs	r3, #1
 800370a:	9901      	ldr	r1, [sp, #4]
 800370c:	9800      	ldr	r0, [sp, #0]
 800370e:	9e08      	ldr	r6, [sp, #32]
 8003710:	3219      	adds	r2, #25
 8003712:	47b0      	blx	r6
 8003714:	1c43      	adds	r3, r0, #1
 8003716:	d1f0      	bne.n	80036fa <_printf_common+0x8a>
 8003718:	2001      	movs	r0, #1
 800371a:	4240      	negs	r0, r0
 800371c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800371e:	2030      	movs	r0, #48	; 0x30
 8003720:	18e1      	adds	r1, r4, r3
 8003722:	3143      	adds	r1, #67	; 0x43
 8003724:	7008      	strb	r0, [r1, #0]
 8003726:	0021      	movs	r1, r4
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	3145      	adds	r1, #69	; 0x45
 800372c:	7809      	ldrb	r1, [r1, #0]
 800372e:	18a2      	adds	r2, r4, r2
 8003730:	3243      	adds	r2, #67	; 0x43
 8003732:	3302      	adds	r3, #2
 8003734:	7011      	strb	r1, [r2, #0]
 8003736:	e7c1      	b.n	80036bc <_printf_common+0x4c>
 8003738:	0022      	movs	r2, r4
 800373a:	2301      	movs	r3, #1
 800373c:	9901      	ldr	r1, [sp, #4]
 800373e:	9800      	ldr	r0, [sp, #0]
 8003740:	9e08      	ldr	r6, [sp, #32]
 8003742:	321a      	adds	r2, #26
 8003744:	47b0      	blx	r6
 8003746:	1c43      	adds	r3, r0, #1
 8003748:	d0e6      	beq.n	8003718 <_printf_common+0xa8>
 800374a:	3701      	adds	r7, #1
 800374c:	e7d1      	b.n	80036f2 <_printf_common+0x82>
	...

08003750 <_printf_i>:
 8003750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003752:	b08b      	sub	sp, #44	; 0x2c
 8003754:	9206      	str	r2, [sp, #24]
 8003756:	000a      	movs	r2, r1
 8003758:	3243      	adds	r2, #67	; 0x43
 800375a:	9307      	str	r3, [sp, #28]
 800375c:	9005      	str	r0, [sp, #20]
 800375e:	9204      	str	r2, [sp, #16]
 8003760:	7e0a      	ldrb	r2, [r1, #24]
 8003762:	000c      	movs	r4, r1
 8003764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003766:	2a78      	cmp	r2, #120	; 0x78
 8003768:	d807      	bhi.n	800377a <_printf_i+0x2a>
 800376a:	2a62      	cmp	r2, #98	; 0x62
 800376c:	d809      	bhi.n	8003782 <_printf_i+0x32>
 800376e:	2a00      	cmp	r2, #0
 8003770:	d100      	bne.n	8003774 <_printf_i+0x24>
 8003772:	e0c1      	b.n	80038f8 <_printf_i+0x1a8>
 8003774:	2a58      	cmp	r2, #88	; 0x58
 8003776:	d100      	bne.n	800377a <_printf_i+0x2a>
 8003778:	e08c      	b.n	8003894 <_printf_i+0x144>
 800377a:	0026      	movs	r6, r4
 800377c:	3642      	adds	r6, #66	; 0x42
 800377e:	7032      	strb	r2, [r6, #0]
 8003780:	e022      	b.n	80037c8 <_printf_i+0x78>
 8003782:	0010      	movs	r0, r2
 8003784:	3863      	subs	r0, #99	; 0x63
 8003786:	2815      	cmp	r0, #21
 8003788:	d8f7      	bhi.n	800377a <_printf_i+0x2a>
 800378a:	f7fc fcc5 	bl	8000118 <__gnu_thumb1_case_shi>
 800378e:	0016      	.short	0x0016
 8003790:	fff6001f 	.word	0xfff6001f
 8003794:	fff6fff6 	.word	0xfff6fff6
 8003798:	001ffff6 	.word	0x001ffff6
 800379c:	fff6fff6 	.word	0xfff6fff6
 80037a0:	fff6fff6 	.word	0xfff6fff6
 80037a4:	003600a8 	.word	0x003600a8
 80037a8:	fff6009a 	.word	0xfff6009a
 80037ac:	00b9fff6 	.word	0x00b9fff6
 80037b0:	0036fff6 	.word	0x0036fff6
 80037b4:	fff6fff6 	.word	0xfff6fff6
 80037b8:	009e      	.short	0x009e
 80037ba:	0026      	movs	r6, r4
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	3642      	adds	r6, #66	; 0x42
 80037c0:	1d11      	adds	r1, r2, #4
 80037c2:	6019      	str	r1, [r3, #0]
 80037c4:	6813      	ldr	r3, [r2, #0]
 80037c6:	7033      	strb	r3, [r6, #0]
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0a7      	b.n	800391c <_printf_i+0x1cc>
 80037cc:	6808      	ldr	r0, [r1, #0]
 80037ce:	6819      	ldr	r1, [r3, #0]
 80037d0:	1d0a      	adds	r2, r1, #4
 80037d2:	0605      	lsls	r5, r0, #24
 80037d4:	d50b      	bpl.n	80037ee <_printf_i+0x9e>
 80037d6:	680d      	ldr	r5, [r1, #0]
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	2d00      	cmp	r5, #0
 80037dc:	da03      	bge.n	80037e6 <_printf_i+0x96>
 80037de:	232d      	movs	r3, #45	; 0x2d
 80037e0:	9a04      	ldr	r2, [sp, #16]
 80037e2:	426d      	negs	r5, r5
 80037e4:	7013      	strb	r3, [r2, #0]
 80037e6:	4b61      	ldr	r3, [pc, #388]	; (800396c <_printf_i+0x21c>)
 80037e8:	270a      	movs	r7, #10
 80037ea:	9303      	str	r3, [sp, #12]
 80037ec:	e01b      	b.n	8003826 <_printf_i+0xd6>
 80037ee:	680d      	ldr	r5, [r1, #0]
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	0641      	lsls	r1, r0, #25
 80037f4:	d5f1      	bpl.n	80037da <_printf_i+0x8a>
 80037f6:	b22d      	sxth	r5, r5
 80037f8:	e7ef      	b.n	80037da <_printf_i+0x8a>
 80037fa:	680d      	ldr	r5, [r1, #0]
 80037fc:	6819      	ldr	r1, [r3, #0]
 80037fe:	1d08      	adds	r0, r1, #4
 8003800:	6018      	str	r0, [r3, #0]
 8003802:	062e      	lsls	r6, r5, #24
 8003804:	d501      	bpl.n	800380a <_printf_i+0xba>
 8003806:	680d      	ldr	r5, [r1, #0]
 8003808:	e003      	b.n	8003812 <_printf_i+0xc2>
 800380a:	066d      	lsls	r5, r5, #25
 800380c:	d5fb      	bpl.n	8003806 <_printf_i+0xb6>
 800380e:	680d      	ldr	r5, [r1, #0]
 8003810:	b2ad      	uxth	r5, r5
 8003812:	4b56      	ldr	r3, [pc, #344]	; (800396c <_printf_i+0x21c>)
 8003814:	2708      	movs	r7, #8
 8003816:	9303      	str	r3, [sp, #12]
 8003818:	2a6f      	cmp	r2, #111	; 0x6f
 800381a:	d000      	beq.n	800381e <_printf_i+0xce>
 800381c:	3702      	adds	r7, #2
 800381e:	0023      	movs	r3, r4
 8003820:	2200      	movs	r2, #0
 8003822:	3343      	adds	r3, #67	; 0x43
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	6863      	ldr	r3, [r4, #4]
 8003828:	60a3      	str	r3, [r4, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db03      	blt.n	8003836 <_printf_i+0xe6>
 800382e:	2204      	movs	r2, #4
 8003830:	6821      	ldr	r1, [r4, #0]
 8003832:	4391      	bics	r1, r2
 8003834:	6021      	str	r1, [r4, #0]
 8003836:	2d00      	cmp	r5, #0
 8003838:	d102      	bne.n	8003840 <_printf_i+0xf0>
 800383a:	9e04      	ldr	r6, [sp, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00c      	beq.n	800385a <_printf_i+0x10a>
 8003840:	9e04      	ldr	r6, [sp, #16]
 8003842:	0028      	movs	r0, r5
 8003844:	0039      	movs	r1, r7
 8003846:	f7fc fcf7 	bl	8000238 <__aeabi_uidivmod>
 800384a:	9b03      	ldr	r3, [sp, #12]
 800384c:	3e01      	subs	r6, #1
 800384e:	5c5b      	ldrb	r3, [r3, r1]
 8003850:	7033      	strb	r3, [r6, #0]
 8003852:	002b      	movs	r3, r5
 8003854:	0005      	movs	r5, r0
 8003856:	429f      	cmp	r7, r3
 8003858:	d9f3      	bls.n	8003842 <_printf_i+0xf2>
 800385a:	2f08      	cmp	r7, #8
 800385c:	d109      	bne.n	8003872 <_printf_i+0x122>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	07db      	lsls	r3, r3, #31
 8003862:	d506      	bpl.n	8003872 <_printf_i+0x122>
 8003864:	6863      	ldr	r3, [r4, #4]
 8003866:	6922      	ldr	r2, [r4, #16]
 8003868:	4293      	cmp	r3, r2
 800386a:	dc02      	bgt.n	8003872 <_printf_i+0x122>
 800386c:	2330      	movs	r3, #48	; 0x30
 800386e:	3e01      	subs	r6, #1
 8003870:	7033      	strb	r3, [r6, #0]
 8003872:	9b04      	ldr	r3, [sp, #16]
 8003874:	1b9b      	subs	r3, r3, r6
 8003876:	6123      	str	r3, [r4, #16]
 8003878:	9b07      	ldr	r3, [sp, #28]
 800387a:	0021      	movs	r1, r4
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	9805      	ldr	r0, [sp, #20]
 8003880:	9b06      	ldr	r3, [sp, #24]
 8003882:	aa09      	add	r2, sp, #36	; 0x24
 8003884:	f7ff fef4 	bl	8003670 <_printf_common>
 8003888:	1c43      	adds	r3, r0, #1
 800388a:	d14c      	bne.n	8003926 <_printf_i+0x1d6>
 800388c:	2001      	movs	r0, #1
 800388e:	4240      	negs	r0, r0
 8003890:	b00b      	add	sp, #44	; 0x2c
 8003892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003894:	3145      	adds	r1, #69	; 0x45
 8003896:	700a      	strb	r2, [r1, #0]
 8003898:	4a34      	ldr	r2, [pc, #208]	; (800396c <_printf_i+0x21c>)
 800389a:	9203      	str	r2, [sp, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	6821      	ldr	r1, [r4, #0]
 80038a0:	ca20      	ldmia	r2!, {r5}
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	0608      	lsls	r0, r1, #24
 80038a6:	d516      	bpl.n	80038d6 <_printf_i+0x186>
 80038a8:	07cb      	lsls	r3, r1, #31
 80038aa:	d502      	bpl.n	80038b2 <_printf_i+0x162>
 80038ac:	2320      	movs	r3, #32
 80038ae:	4319      	orrs	r1, r3
 80038b0:	6021      	str	r1, [r4, #0]
 80038b2:	2710      	movs	r7, #16
 80038b4:	2d00      	cmp	r5, #0
 80038b6:	d1b2      	bne.n	800381e <_printf_i+0xce>
 80038b8:	2320      	movs	r3, #32
 80038ba:	6822      	ldr	r2, [r4, #0]
 80038bc:	439a      	bics	r2, r3
 80038be:	6022      	str	r2, [r4, #0]
 80038c0:	e7ad      	b.n	800381e <_printf_i+0xce>
 80038c2:	2220      	movs	r2, #32
 80038c4:	6809      	ldr	r1, [r1, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	6022      	str	r2, [r4, #0]
 80038ca:	0022      	movs	r2, r4
 80038cc:	2178      	movs	r1, #120	; 0x78
 80038ce:	3245      	adds	r2, #69	; 0x45
 80038d0:	7011      	strb	r1, [r2, #0]
 80038d2:	4a27      	ldr	r2, [pc, #156]	; (8003970 <_printf_i+0x220>)
 80038d4:	e7e1      	b.n	800389a <_printf_i+0x14a>
 80038d6:	0648      	lsls	r0, r1, #25
 80038d8:	d5e6      	bpl.n	80038a8 <_printf_i+0x158>
 80038da:	b2ad      	uxth	r5, r5
 80038dc:	e7e4      	b.n	80038a8 <_printf_i+0x158>
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	680d      	ldr	r5, [r1, #0]
 80038e2:	1d10      	adds	r0, r2, #4
 80038e4:	6949      	ldr	r1, [r1, #20]
 80038e6:	6018      	str	r0, [r3, #0]
 80038e8:	6813      	ldr	r3, [r2, #0]
 80038ea:	062e      	lsls	r6, r5, #24
 80038ec:	d501      	bpl.n	80038f2 <_printf_i+0x1a2>
 80038ee:	6019      	str	r1, [r3, #0]
 80038f0:	e002      	b.n	80038f8 <_printf_i+0x1a8>
 80038f2:	066d      	lsls	r5, r5, #25
 80038f4:	d5fb      	bpl.n	80038ee <_printf_i+0x19e>
 80038f6:	8019      	strh	r1, [r3, #0]
 80038f8:	2300      	movs	r3, #0
 80038fa:	9e04      	ldr	r6, [sp, #16]
 80038fc:	6123      	str	r3, [r4, #16]
 80038fe:	e7bb      	b.n	8003878 <_printf_i+0x128>
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	1d11      	adds	r1, r2, #4
 8003904:	6019      	str	r1, [r3, #0]
 8003906:	6816      	ldr	r6, [r2, #0]
 8003908:	2100      	movs	r1, #0
 800390a:	0030      	movs	r0, r6
 800390c:	6862      	ldr	r2, [r4, #4]
 800390e:	f000 f831 	bl	8003974 <memchr>
 8003912:	2800      	cmp	r0, #0
 8003914:	d001      	beq.n	800391a <_printf_i+0x1ca>
 8003916:	1b80      	subs	r0, r0, r6
 8003918:	6060      	str	r0, [r4, #4]
 800391a:	6863      	ldr	r3, [r4, #4]
 800391c:	6123      	str	r3, [r4, #16]
 800391e:	2300      	movs	r3, #0
 8003920:	9a04      	ldr	r2, [sp, #16]
 8003922:	7013      	strb	r3, [r2, #0]
 8003924:	e7a8      	b.n	8003878 <_printf_i+0x128>
 8003926:	6923      	ldr	r3, [r4, #16]
 8003928:	0032      	movs	r2, r6
 800392a:	9906      	ldr	r1, [sp, #24]
 800392c:	9805      	ldr	r0, [sp, #20]
 800392e:	9d07      	ldr	r5, [sp, #28]
 8003930:	47a8      	blx	r5
 8003932:	1c43      	adds	r3, r0, #1
 8003934:	d0aa      	beq.n	800388c <_printf_i+0x13c>
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	079b      	lsls	r3, r3, #30
 800393a:	d415      	bmi.n	8003968 <_printf_i+0x218>
 800393c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800393e:	68e0      	ldr	r0, [r4, #12]
 8003940:	4298      	cmp	r0, r3
 8003942:	daa5      	bge.n	8003890 <_printf_i+0x140>
 8003944:	0018      	movs	r0, r3
 8003946:	e7a3      	b.n	8003890 <_printf_i+0x140>
 8003948:	0022      	movs	r2, r4
 800394a:	2301      	movs	r3, #1
 800394c:	9906      	ldr	r1, [sp, #24]
 800394e:	9805      	ldr	r0, [sp, #20]
 8003950:	9e07      	ldr	r6, [sp, #28]
 8003952:	3219      	adds	r2, #25
 8003954:	47b0      	blx	r6
 8003956:	1c43      	adds	r3, r0, #1
 8003958:	d098      	beq.n	800388c <_printf_i+0x13c>
 800395a:	3501      	adds	r5, #1
 800395c:	68e3      	ldr	r3, [r4, #12]
 800395e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	42ab      	cmp	r3, r5
 8003964:	dcf0      	bgt.n	8003948 <_printf_i+0x1f8>
 8003966:	e7e9      	b.n	800393c <_printf_i+0x1ec>
 8003968:	2500      	movs	r5, #0
 800396a:	e7f7      	b.n	800395c <_printf_i+0x20c>
 800396c:	08003cb5 	.word	0x08003cb5
 8003970:	08003cc6 	.word	0x08003cc6

08003974 <memchr>:
 8003974:	b2c9      	uxtb	r1, r1
 8003976:	1882      	adds	r2, r0, r2
 8003978:	4290      	cmp	r0, r2
 800397a:	d101      	bne.n	8003980 <memchr+0xc>
 800397c:	2000      	movs	r0, #0
 800397e:	4770      	bx	lr
 8003980:	7803      	ldrb	r3, [r0, #0]
 8003982:	428b      	cmp	r3, r1
 8003984:	d0fb      	beq.n	800397e <memchr+0xa>
 8003986:	3001      	adds	r0, #1
 8003988:	e7f6      	b.n	8003978 <memchr+0x4>

0800398a <memcpy>:
 800398a:	2300      	movs	r3, #0
 800398c:	b510      	push	{r4, lr}
 800398e:	429a      	cmp	r2, r3
 8003990:	d100      	bne.n	8003994 <memcpy+0xa>
 8003992:	bd10      	pop	{r4, pc}
 8003994:	5ccc      	ldrb	r4, [r1, r3]
 8003996:	54c4      	strb	r4, [r0, r3]
 8003998:	3301      	adds	r3, #1
 800399a:	e7f8      	b.n	800398e <memcpy+0x4>

0800399c <memmove>:
 800399c:	b510      	push	{r4, lr}
 800399e:	4288      	cmp	r0, r1
 80039a0:	d902      	bls.n	80039a8 <memmove+0xc>
 80039a2:	188b      	adds	r3, r1, r2
 80039a4:	4298      	cmp	r0, r3
 80039a6:	d303      	bcc.n	80039b0 <memmove+0x14>
 80039a8:	2300      	movs	r3, #0
 80039aa:	e007      	b.n	80039bc <memmove+0x20>
 80039ac:	5c8b      	ldrb	r3, [r1, r2]
 80039ae:	5483      	strb	r3, [r0, r2]
 80039b0:	3a01      	subs	r2, #1
 80039b2:	d2fb      	bcs.n	80039ac <memmove+0x10>
 80039b4:	bd10      	pop	{r4, pc}
 80039b6:	5ccc      	ldrb	r4, [r1, r3]
 80039b8:	54c4      	strb	r4, [r0, r3]
 80039ba:	3301      	adds	r3, #1
 80039bc:	429a      	cmp	r2, r3
 80039be:	d1fa      	bne.n	80039b6 <memmove+0x1a>
 80039c0:	e7f8      	b.n	80039b4 <memmove+0x18>
	...

080039c4 <_free_r>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	0005      	movs	r5, r0
 80039c8:	2900      	cmp	r1, #0
 80039ca:	d010      	beq.n	80039ee <_free_r+0x2a>
 80039cc:	1f0c      	subs	r4, r1, #4
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da00      	bge.n	80039d6 <_free_r+0x12>
 80039d4:	18e4      	adds	r4, r4, r3
 80039d6:	0028      	movs	r0, r5
 80039d8:	f000 f918 	bl	8003c0c <__malloc_lock>
 80039dc:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <_free_r+0x90>)
 80039de:	6813      	ldr	r3, [r2, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d105      	bne.n	80039f0 <_free_r+0x2c>
 80039e4:	6063      	str	r3, [r4, #4]
 80039e6:	6014      	str	r4, [r2, #0]
 80039e8:	0028      	movs	r0, r5
 80039ea:	f000 f917 	bl	8003c1c <__malloc_unlock>
 80039ee:	bd70      	pop	{r4, r5, r6, pc}
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	d908      	bls.n	8003a06 <_free_r+0x42>
 80039f4:	6821      	ldr	r1, [r4, #0]
 80039f6:	1860      	adds	r0, r4, r1
 80039f8:	4283      	cmp	r3, r0
 80039fa:	d1f3      	bne.n	80039e4 <_free_r+0x20>
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	1841      	adds	r1, r0, r1
 8003a02:	6021      	str	r1, [r4, #0]
 8003a04:	e7ee      	b.n	80039e4 <_free_r+0x20>
 8003a06:	001a      	movs	r2, r3
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <_free_r+0x4e>
 8003a0e:	42a3      	cmp	r3, r4
 8003a10:	d9f9      	bls.n	8003a06 <_free_r+0x42>
 8003a12:	6811      	ldr	r1, [r2, #0]
 8003a14:	1850      	adds	r0, r2, r1
 8003a16:	42a0      	cmp	r0, r4
 8003a18:	d10b      	bne.n	8003a32 <_free_r+0x6e>
 8003a1a:	6820      	ldr	r0, [r4, #0]
 8003a1c:	1809      	adds	r1, r1, r0
 8003a1e:	1850      	adds	r0, r2, r1
 8003a20:	6011      	str	r1, [r2, #0]
 8003a22:	4283      	cmp	r3, r0
 8003a24:	d1e0      	bne.n	80039e8 <_free_r+0x24>
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	1841      	adds	r1, r0, r1
 8003a2c:	6011      	str	r1, [r2, #0]
 8003a2e:	6053      	str	r3, [r2, #4]
 8003a30:	e7da      	b.n	80039e8 <_free_r+0x24>
 8003a32:	42a0      	cmp	r0, r4
 8003a34:	d902      	bls.n	8003a3c <_free_r+0x78>
 8003a36:	230c      	movs	r3, #12
 8003a38:	602b      	str	r3, [r5, #0]
 8003a3a:	e7d5      	b.n	80039e8 <_free_r+0x24>
 8003a3c:	6821      	ldr	r1, [r4, #0]
 8003a3e:	1860      	adds	r0, r4, r1
 8003a40:	4283      	cmp	r3, r0
 8003a42:	d103      	bne.n	8003a4c <_free_r+0x88>
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	1841      	adds	r1, r0, r1
 8003a4a:	6021      	str	r1, [r4, #0]
 8003a4c:	6063      	str	r3, [r4, #4]
 8003a4e:	6054      	str	r4, [r2, #4]
 8003a50:	e7ca      	b.n	80039e8 <_free_r+0x24>
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	20000338 	.word	0x20000338

08003a58 <sbrk_aligned>:
 8003a58:	b570      	push	{r4, r5, r6, lr}
 8003a5a:	4e0f      	ldr	r6, [pc, #60]	; (8003a98 <sbrk_aligned+0x40>)
 8003a5c:	000d      	movs	r5, r1
 8003a5e:	6831      	ldr	r1, [r6, #0]
 8003a60:	0004      	movs	r4, r0
 8003a62:	2900      	cmp	r1, #0
 8003a64:	d102      	bne.n	8003a6c <sbrk_aligned+0x14>
 8003a66:	f000 f8bf 	bl	8003be8 <_sbrk_r>
 8003a6a:	6030      	str	r0, [r6, #0]
 8003a6c:	0029      	movs	r1, r5
 8003a6e:	0020      	movs	r0, r4
 8003a70:	f000 f8ba 	bl	8003be8 <_sbrk_r>
 8003a74:	1c43      	adds	r3, r0, #1
 8003a76:	d00a      	beq.n	8003a8e <sbrk_aligned+0x36>
 8003a78:	2303      	movs	r3, #3
 8003a7a:	1cc5      	adds	r5, r0, #3
 8003a7c:	439d      	bics	r5, r3
 8003a7e:	42a8      	cmp	r0, r5
 8003a80:	d007      	beq.n	8003a92 <sbrk_aligned+0x3a>
 8003a82:	1a29      	subs	r1, r5, r0
 8003a84:	0020      	movs	r0, r4
 8003a86:	f000 f8af 	bl	8003be8 <_sbrk_r>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	d101      	bne.n	8003a92 <sbrk_aligned+0x3a>
 8003a8e:	2501      	movs	r5, #1
 8003a90:	426d      	negs	r5, r5
 8003a92:	0028      	movs	r0, r5
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	2000033c 	.word	0x2000033c

08003a9c <_malloc_r>:
 8003a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	1ccb      	adds	r3, r1, #3
 8003aa2:	4393      	bics	r3, r2
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	0006      	movs	r6, r0
 8003aa8:	001f      	movs	r7, r3
 8003aaa:	2b0c      	cmp	r3, #12
 8003aac:	d232      	bcs.n	8003b14 <_malloc_r+0x78>
 8003aae:	270c      	movs	r7, #12
 8003ab0:	42b9      	cmp	r1, r7
 8003ab2:	d831      	bhi.n	8003b18 <_malloc_r+0x7c>
 8003ab4:	0030      	movs	r0, r6
 8003ab6:	f000 f8a9 	bl	8003c0c <__malloc_lock>
 8003aba:	4d32      	ldr	r5, [pc, #200]	; (8003b84 <_malloc_r+0xe8>)
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	001c      	movs	r4, r3
 8003ac0:	2c00      	cmp	r4, #0
 8003ac2:	d12e      	bne.n	8003b22 <_malloc_r+0x86>
 8003ac4:	0039      	movs	r1, r7
 8003ac6:	0030      	movs	r0, r6
 8003ac8:	f7ff ffc6 	bl	8003a58 <sbrk_aligned>
 8003acc:	0004      	movs	r4, r0
 8003ace:	1c43      	adds	r3, r0, #1
 8003ad0:	d11e      	bne.n	8003b10 <_malloc_r+0x74>
 8003ad2:	682c      	ldr	r4, [r5, #0]
 8003ad4:	0025      	movs	r5, r4
 8003ad6:	2d00      	cmp	r5, #0
 8003ad8:	d14a      	bne.n	8003b70 <_malloc_r+0xd4>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	0029      	movs	r1, r5
 8003ade:	18e3      	adds	r3, r4, r3
 8003ae0:	0030      	movs	r0, r6
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	f000 f880 	bl	8003be8 <_sbrk_r>
 8003ae8:	9b01      	ldr	r3, [sp, #4]
 8003aea:	4283      	cmp	r3, r0
 8003aec:	d143      	bne.n	8003b76 <_malloc_r+0xda>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	3703      	adds	r7, #3
 8003af2:	1aff      	subs	r7, r7, r3
 8003af4:	2303      	movs	r3, #3
 8003af6:	439f      	bics	r7, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	2f0c      	cmp	r7, #12
 8003afc:	d200      	bcs.n	8003b00 <_malloc_r+0x64>
 8003afe:	270c      	movs	r7, #12
 8003b00:	0039      	movs	r1, r7
 8003b02:	0030      	movs	r0, r6
 8003b04:	f7ff ffa8 	bl	8003a58 <sbrk_aligned>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d034      	beq.n	8003b76 <_malloc_r+0xda>
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	19df      	adds	r7, r3, r7
 8003b10:	6027      	str	r7, [r4, #0]
 8003b12:	e013      	b.n	8003b3c <_malloc_r+0xa0>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	dacb      	bge.n	8003ab0 <_malloc_r+0x14>
 8003b18:	230c      	movs	r3, #12
 8003b1a:	2500      	movs	r5, #0
 8003b1c:	6033      	str	r3, [r6, #0]
 8003b1e:	0028      	movs	r0, r5
 8003b20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	1bd1      	subs	r1, r2, r7
 8003b26:	d420      	bmi.n	8003b6a <_malloc_r+0xce>
 8003b28:	290b      	cmp	r1, #11
 8003b2a:	d917      	bls.n	8003b5c <_malloc_r+0xc0>
 8003b2c:	19e2      	adds	r2, r4, r7
 8003b2e:	6027      	str	r7, [r4, #0]
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	d111      	bne.n	8003b58 <_malloc_r+0xbc>
 8003b34:	602a      	str	r2, [r5, #0]
 8003b36:	6863      	ldr	r3, [r4, #4]
 8003b38:	6011      	str	r1, [r2, #0]
 8003b3a:	6053      	str	r3, [r2, #4]
 8003b3c:	0030      	movs	r0, r6
 8003b3e:	0025      	movs	r5, r4
 8003b40:	f000 f86c 	bl	8003c1c <__malloc_unlock>
 8003b44:	2207      	movs	r2, #7
 8003b46:	350b      	adds	r5, #11
 8003b48:	1d23      	adds	r3, r4, #4
 8003b4a:	4395      	bics	r5, r2
 8003b4c:	1aea      	subs	r2, r5, r3
 8003b4e:	429d      	cmp	r5, r3
 8003b50:	d0e5      	beq.n	8003b1e <_malloc_r+0x82>
 8003b52:	1b5b      	subs	r3, r3, r5
 8003b54:	50a3      	str	r3, [r4, r2]
 8003b56:	e7e2      	b.n	8003b1e <_malloc_r+0x82>
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	e7ec      	b.n	8003b36 <_malloc_r+0x9a>
 8003b5c:	6862      	ldr	r2, [r4, #4]
 8003b5e:	42a3      	cmp	r3, r4
 8003b60:	d101      	bne.n	8003b66 <_malloc_r+0xca>
 8003b62:	602a      	str	r2, [r5, #0]
 8003b64:	e7ea      	b.n	8003b3c <_malloc_r+0xa0>
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	e7e8      	b.n	8003b3c <_malloc_r+0xa0>
 8003b6a:	0023      	movs	r3, r4
 8003b6c:	6864      	ldr	r4, [r4, #4]
 8003b6e:	e7a7      	b.n	8003ac0 <_malloc_r+0x24>
 8003b70:	002c      	movs	r4, r5
 8003b72:	686d      	ldr	r5, [r5, #4]
 8003b74:	e7af      	b.n	8003ad6 <_malloc_r+0x3a>
 8003b76:	230c      	movs	r3, #12
 8003b78:	0030      	movs	r0, r6
 8003b7a:	6033      	str	r3, [r6, #0]
 8003b7c:	f000 f84e 	bl	8003c1c <__malloc_unlock>
 8003b80:	e7cd      	b.n	8003b1e <_malloc_r+0x82>
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	20000338 	.word	0x20000338

08003b88 <_realloc_r>:
 8003b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b8a:	0007      	movs	r7, r0
 8003b8c:	000e      	movs	r6, r1
 8003b8e:	0014      	movs	r4, r2
 8003b90:	2900      	cmp	r1, #0
 8003b92:	d105      	bne.n	8003ba0 <_realloc_r+0x18>
 8003b94:	0011      	movs	r1, r2
 8003b96:	f7ff ff81 	bl	8003a9c <_malloc_r>
 8003b9a:	0005      	movs	r5, r0
 8003b9c:	0028      	movs	r0, r5
 8003b9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ba0:	2a00      	cmp	r2, #0
 8003ba2:	d103      	bne.n	8003bac <_realloc_r+0x24>
 8003ba4:	f7ff ff0e 	bl	80039c4 <_free_r>
 8003ba8:	0025      	movs	r5, r4
 8003baa:	e7f7      	b.n	8003b9c <_realloc_r+0x14>
 8003bac:	f000 f83e 	bl	8003c2c <_malloc_usable_size_r>
 8003bb0:	9001      	str	r0, [sp, #4]
 8003bb2:	4284      	cmp	r4, r0
 8003bb4:	d803      	bhi.n	8003bbe <_realloc_r+0x36>
 8003bb6:	0035      	movs	r5, r6
 8003bb8:	0843      	lsrs	r3, r0, #1
 8003bba:	42a3      	cmp	r3, r4
 8003bbc:	d3ee      	bcc.n	8003b9c <_realloc_r+0x14>
 8003bbe:	0021      	movs	r1, r4
 8003bc0:	0038      	movs	r0, r7
 8003bc2:	f7ff ff6b 	bl	8003a9c <_malloc_r>
 8003bc6:	1e05      	subs	r5, r0, #0
 8003bc8:	d0e8      	beq.n	8003b9c <_realloc_r+0x14>
 8003bca:	9b01      	ldr	r3, [sp, #4]
 8003bcc:	0022      	movs	r2, r4
 8003bce:	429c      	cmp	r4, r3
 8003bd0:	d900      	bls.n	8003bd4 <_realloc_r+0x4c>
 8003bd2:	001a      	movs	r2, r3
 8003bd4:	0031      	movs	r1, r6
 8003bd6:	0028      	movs	r0, r5
 8003bd8:	f7ff fed7 	bl	800398a <memcpy>
 8003bdc:	0031      	movs	r1, r6
 8003bde:	0038      	movs	r0, r7
 8003be0:	f7ff fef0 	bl	80039c4 <_free_r>
 8003be4:	e7da      	b.n	8003b9c <_realloc_r+0x14>
	...

08003be8 <_sbrk_r>:
 8003be8:	2300      	movs	r3, #0
 8003bea:	b570      	push	{r4, r5, r6, lr}
 8003bec:	4d06      	ldr	r5, [pc, #24]	; (8003c08 <_sbrk_r+0x20>)
 8003bee:	0004      	movs	r4, r0
 8003bf0:	0008      	movs	r0, r1
 8003bf2:	602b      	str	r3, [r5, #0]
 8003bf4:	f7fc fee8 	bl	80009c8 <_sbrk>
 8003bf8:	1c43      	adds	r3, r0, #1
 8003bfa:	d103      	bne.n	8003c04 <_sbrk_r+0x1c>
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d000      	beq.n	8003c04 <_sbrk_r+0x1c>
 8003c02:	6023      	str	r3, [r4, #0]
 8003c04:	bd70      	pop	{r4, r5, r6, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	20000340 	.word	0x20000340

08003c0c <__malloc_lock>:
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	4802      	ldr	r0, [pc, #8]	; (8003c18 <__malloc_lock+0xc>)
 8003c10:	f000 f814 	bl	8003c3c <__retarget_lock_acquire_recursive>
 8003c14:	bd10      	pop	{r4, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	20000344 	.word	0x20000344

08003c1c <__malloc_unlock>:
 8003c1c:	b510      	push	{r4, lr}
 8003c1e:	4802      	ldr	r0, [pc, #8]	; (8003c28 <__malloc_unlock+0xc>)
 8003c20:	f000 f80d 	bl	8003c3e <__retarget_lock_release_recursive>
 8003c24:	bd10      	pop	{r4, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)
 8003c28:	20000344 	.word	0x20000344

08003c2c <_malloc_usable_size_r>:
 8003c2c:	1f0b      	subs	r3, r1, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	1f18      	subs	r0, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	da01      	bge.n	8003c3a <_malloc_usable_size_r+0xe>
 8003c36:	580b      	ldr	r3, [r1, r0]
 8003c38:	18c0      	adds	r0, r0, r3
 8003c3a:	4770      	bx	lr

08003c3c <__retarget_lock_acquire_recursive>:
 8003c3c:	4770      	bx	lr

08003c3e <__retarget_lock_release_recursive>:
 8003c3e:	4770      	bx	lr

08003c40 <_init>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr

08003c4c <_fini>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr
