
stm32_dma_stmcubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d10  08003d10  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003d10  08003d10  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d10  08003d10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d10  08003d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d14  08003d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000070  08003d88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08003d88  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b22  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177b  00000000  00000000  00028bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  0002a338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e8  00000000  00000000  0002a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbc3  00000000  00000000  0002afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092aa  00000000  00000000  0003ab63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d4c4  00000000  00000000  00043e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a12d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019a8  00000000  00000000  000a1324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c78 	.word	0x08003c78

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003c78 	.word	0x08003c78

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b0a4      	sub	sp, #144	; 0x90
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fc15 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f899 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f947 	bl	80004e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000256:	f000 f927 	bl	80004a8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800025a:	f000 f8f5 	bl	8000448 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Start continuous DMA reception into our circular buffer
  if (HAL_UART_Receive_DMA(&huart1, rx_buffer, RX_BUFFER_SIZE) != HAL_OK)
 800025e:	2380      	movs	r3, #128	; 0x80
 8000260:	005a      	lsls	r2, r3, #1
 8000262:	493d      	ldr	r1, [pc, #244]	; (8000358 <main+0x114>)
 8000264:	4b3d      	ldr	r3, [pc, #244]	; (800035c <main+0x118>)
 8000266:	0018      	movs	r0, r3
 8000268:	f001 ff16 	bl	8002098 <HAL_UART_Receive_DMA>
 800026c:	1e03      	subs	r3, r0, #0
 800026e:	d001      	beq.n	8000274 <main+0x30>
  {
      Error_Handler();
 8000270:	f000 fa36 	bl	80006e0 <Error_Handler>
  }
  // Enable the UART Idle Line detection interrupt
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000274:	4b39      	ldr	r3, [pc, #228]	; (800035c <main+0x118>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	4b38      	ldr	r3, [pc, #224]	; (800035c <main+0x118>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2110      	movs	r1, #16
 8000280:	430a      	orrs	r2, r1
 8000282:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  while (1)
  {
	    // Send "AT" every 10 seconds only if TX is idle
		  // In main loop:
		  if (HAL_GetTick() - last_cmd >= 10000 && !tx_busy)
 8000284:	f000 fc52 	bl	8000b2c <HAL_GetTick>
 8000288:	0002      	movs	r2, r0
 800028a:	4b35      	ldr	r3, [pc, #212]	; (8000360 <main+0x11c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	1ad3      	subs	r3, r2, r3
 8000290:	4a34      	ldr	r2, [pc, #208]	; (8000364 <main+0x120>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d920      	bls.n	80002d8 <main+0x94>
 8000296:	4b34      	ldr	r3, [pc, #208]	; (8000368 <main+0x124>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	b2db      	uxtb	r3, r3
 800029c:	2b00      	cmp	r3, #0
 800029e:	d11b      	bne.n	80002d8 <main+0x94>
		  {
			  strncpy((char*)last_sent_cmd, "AT\r\n", sizeof(last_sent_cmd));  // Save last command
 80002a0:	4932      	ldr	r1, [pc, #200]	; (800036c <main+0x128>)
 80002a2:	4b33      	ldr	r3, [pc, #204]	; (8000370 <main+0x12c>)
 80002a4:	2220      	movs	r2, #32
 80002a6:	0018      	movs	r0, r3
 80002a8:	f003 f872 	bl	8003390 <strncpy>
			  if (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)"AT\r\n", 4) == HAL_OK)
 80002ac:	492f      	ldr	r1, [pc, #188]	; (800036c <main+0x128>)
 80002ae:	4b2b      	ldr	r3, [pc, #172]	; (800035c <main+0x118>)
 80002b0:	2204      	movs	r2, #4
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fe60 	bl	8001f78 <HAL_UART_Transmit_DMA>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d10d      	bne.n	80002d8 <main+0x94>
			  {
				  tx_busy = 1;
 80002bc:	4b2a      	ldr	r3, [pc, #168]	; (8000368 <main+0x124>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
				  last_cmd = HAL_GetTick();
 80002c2:	f000 fc33 	bl	8000b2c <HAL_GetTick>
 80002c6:	0002      	movs	r2, r0
 80002c8:	4b25      	ldr	r3, [pc, #148]	; (8000360 <main+0x11c>)
 80002ca:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002cc:	2390      	movs	r3, #144	; 0x90
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	2120      	movs	r1, #32
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 f8b5 	bl	8001442 <HAL_GPIO_TogglePin>
			  }
		  }

	    // Echo received message if ready
		  // In main loop:
		  if (response_ready && !tx_busy)
 80002d8:	4b26      	ldr	r3, [pc, #152]	; (8000374 <main+0x130>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0d0      	beq.n	8000284 <main+0x40>
 80002e2:	4b21      	ldr	r3, [pc, #132]	; (8000368 <main+0x124>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1cb      	bne.n	8000284 <main+0x40>
		  {
		      if (strlen(response_buffer) > 0)
 80002ec:	4b22      	ldr	r3, [pc, #136]	; (8000378 <main+0x134>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d024      	beq.n	800033e <main+0xfa>
		      {
		          // Check if the response matches the last sent command
		          if (strstr(response_buffer, last_sent_cmd) == NULL)  // Only echo external data
 80002f4:	4a1e      	ldr	r2, [pc, #120]	; (8000370 <main+0x12c>)
 80002f6:	4b20      	ldr	r3, [pc, #128]	; (8000378 <main+0x134>)
 80002f8:	0011      	movs	r1, r2
 80002fa:	0018      	movs	r0, r3
 80002fc:	f003 f85c 	bl	80033b8 <strstr>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d116      	bne.n	8000332 <main+0xee>
		          {
		              char echo_msg[MAX_RESPONSE_LEN + 16];
		              snprintf(echo_msg, sizeof(echo_msg), "\r\n[RX] %s\r\n", response_buffer);
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <main+0x134>)
 8000306:	4a1d      	ldr	r2, [pc, #116]	; (800037c <main+0x138>)
 8000308:	0038      	movs	r0, r7
 800030a:	2190      	movs	r1, #144	; 0x90
 800030c:	f003 f80c 	bl	8003328 <sniprintf>
		              if (HAL_UART_Transmit_DMA(&huart1, (uint8_t*)echo_msg, strlen(echo_msg)) == HAL_OK)
 8000310:	003b      	movs	r3, r7
 8000312:	0018      	movs	r0, r3
 8000314:	f7ff fef8 	bl	8000108 <strlen>
 8000318:	0003      	movs	r3, r0
 800031a:	b29a      	uxth	r2, r3
 800031c:	0039      	movs	r1, r7
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <main+0x118>)
 8000320:	0018      	movs	r0, r3
 8000322:	f001 fe29 	bl	8001f78 <HAL_UART_Transmit_DMA>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d109      	bne.n	800033e <main+0xfa>
		              {
		                  tx_busy = 1;
 800032a:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <main+0x124>)
 800032c:	2201      	movs	r2, #1
 800032e:	701a      	strb	r2, [r3, #0]
 8000330:	e005      	b.n	800033e <main+0xfa>
		              }
		          }
		          else
		          {
		              // Clear the last_sent_cmd after handling
		              memset((void*)last_sent_cmd, 0, sizeof(last_sent_cmd));
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <main+0x12c>)
 8000334:	2220      	movs	r2, #32
 8000336:	2100      	movs	r1, #0
 8000338:	0018      	movs	r0, r3
 800033a:	f002 ffed 	bl	8003318 <memset>
		          }
		      }
		      response_ready = 0;
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <main+0x130>)
 8000340:	2200      	movs	r2, #0
 8000342:	701a      	strb	r2, [r3, #0]
		      response_index = 0;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <main+0x13c>)
 8000346:	2200      	movs	r2, #0
 8000348:	801a      	strh	r2, [r3, #0]
		      memset(response_buffer, 0, MAX_RESPONSE_LEN);
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <main+0x134>)
 800034c:	2280      	movs	r2, #128	; 0x80
 800034e:	2100      	movs	r1, #0
 8000350:	0018      	movs	r0, r3
 8000352:	f002 ffe1 	bl	8003318 <memset>
		  if (HAL_GetTick() - last_cmd >= 10000 && !tx_busy)
 8000356:	e795      	b.n	8000284 <main+0x40>
 8000358:	2000019c 	.word	0x2000019c
 800035c:	2000008c 	.word	0x2000008c
 8000360:	20000328 	.word	0x20000328
 8000364:	0000270f 	.word	0x0000270f
 8000368:	20000324 	.word	0x20000324
 800036c:	08003c90 	.word	0x08003c90
 8000370:	20000330 	.word	0x20000330
 8000374:	200002a0 	.word	0x200002a0
 8000378:	200002a4 	.word	0x200002a4
 800037c:	08003c98 	.word	0x08003c98
 8000380:	2000032c 	.word	0x2000032c

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b095      	sub	sp, #84	; 0x54
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	2420      	movs	r4, #32
 800038c:	193b      	adds	r3, r7, r4
 800038e:	0018      	movs	r0, r3
 8000390:	2330      	movs	r3, #48	; 0x30
 8000392:	001a      	movs	r2, r3
 8000394:	2100      	movs	r1, #0
 8000396:	f002 ffbf 	bl	8003318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039a:	2310      	movs	r3, #16
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	0018      	movs	r0, r3
 80003a0:	2310      	movs	r3, #16
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f002 ffb7 	bl	8003318 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003aa:	003b      	movs	r3, r7
 80003ac:	0018      	movs	r0, r3
 80003ae:	2310      	movs	r3, #16
 80003b0:	001a      	movs	r2, r3
 80003b2:	2100      	movs	r1, #0
 80003b4:	f002 ffb0 	bl	8003318 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b8:	0021      	movs	r1, r4
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2202      	movs	r2, #2
 80003be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2201      	movs	r2, #1
 80003c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2210      	movs	r2, #16
 80003ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2202      	movs	r2, #2
 80003d0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2200      	movs	r2, #0
 80003d6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	22a0      	movs	r2, #160	; 0xa0
 80003dc:	0392      	lsls	r2, r2, #14
 80003de:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	2200      	movs	r2, #0
 80003e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e6:	187b      	adds	r3, r7, r1
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 f845 	bl	8001478 <HAL_RCC_OscConfig>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003f2:	f000 f975 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f6:	2110      	movs	r1, #16
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2207      	movs	r2, #7
 80003fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2202      	movs	r2, #2
 8000402:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2101      	movs	r1, #1
 8000414:	0018      	movs	r0, r3
 8000416:	f001 fb49 	bl	8001aac <HAL_RCC_ClockConfig>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800041e:	f000 f95f 	bl	80006e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000422:	003b      	movs	r3, r7
 8000424:	2201      	movs	r2, #1
 8000426:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000428:	003b      	movs	r3, r7
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042e:	003b      	movs	r3, r7
 8000430:	0018      	movs	r0, r3
 8000432:	f001 fc7f 	bl	8001d34 <HAL_RCCEx_PeriphCLKConfig>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800043a:	f000 f951 	bl	80006e0 <Error_Handler>
  }
}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b015      	add	sp, #84	; 0x54
 8000444:	bd90      	pop	{r4, r7, pc}
	...

08000448 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 800044e:	4a15      	ldr	r2, [pc, #84]	; (80004a4 <MX_USART1_UART_Init+0x5c>)
 8000450:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 8000454:	22e1      	movs	r2, #225	; 0xe1
 8000456:	0252      	lsls	r2, r2, #9
 8000458:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 800046e:	220c      	movs	r2, #12
 8000470:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 8000486:	2200      	movs	r2, #0
 8000488:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <MX_USART1_UART_Init+0x58>)
 800048c:	0018      	movs	r0, r3
 800048e:	f001 fd1f 	bl	8001ed0 <HAL_UART_Init>
 8000492:	1e03      	subs	r3, r0, #0
 8000494:	d001      	beq.n	800049a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000496:	f000 f923 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	2000008c 	.word	0x2000008c
 80004a4:	40013800 	.word	0x40013800

080004a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_DMA_Init+0x38>)
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_DMA_Init+0x38>)
 80004b4:	2101      	movs	r1, #1
 80004b6:	430a      	orrs	r2, r1
 80004b8:	615a      	str	r2, [r3, #20]
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_DMA_Init+0x38>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	2201      	movs	r2, #1
 80004c0:	4013      	ands	r3, r2
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	200a      	movs	r0, #10
 80004cc:	f000 fbe4 	bl	8000c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80004d0:	200a      	movs	r0, #10
 80004d2:	f000 fbf6 	bl	8000cc2 <HAL_NVIC_EnableIRQ>

}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b002      	add	sp, #8
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	40021000 	.word	0x40021000

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b089      	sub	sp, #36	; 0x24
 80004e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	240c      	movs	r4, #12
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	2314      	movs	r3, #20
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f002 ff0f 	bl	8003318 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <MX_GPIO_Init+0xcc>)
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	4b2c      	ldr	r3, [pc, #176]	; (80005b0 <MX_GPIO_Init+0xcc>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	0309      	lsls	r1, r1, #12
 8000504:	430a      	orrs	r2, r1
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <MX_GPIO_Init+0xcc>)
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	031b      	lsls	r3, r3, #12
 8000510:	4013      	ands	r3, r2
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <MX_GPIO_Init+0xcc>)
 8000518:	695a      	ldr	r2, [r3, #20]
 800051a:	4b25      	ldr	r3, [pc, #148]	; (80005b0 <MX_GPIO_Init+0xcc>)
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	03c9      	lsls	r1, r1, #15
 8000520:	430a      	orrs	r2, r1
 8000522:	615a      	str	r2, [r3, #20]
 8000524:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <MX_GPIO_Init+0xcc>)
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	03db      	lsls	r3, r3, #15
 800052c:	4013      	ands	r3, r2
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <MX_GPIO_Init+0xcc>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <MX_GPIO_Init+0xcc>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0289      	lsls	r1, r1, #10
 800053c:	430a      	orrs	r2, r1
 800053e:	615a      	str	r2, [r3, #20]
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_GPIO_Init+0xcc>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	029b      	lsls	r3, r3, #10
 8000548:	4013      	ands	r3, r2
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, GPIO_PIN_RESET);
 800054e:	2390      	movs	r3, #144	; 0x90
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	2200      	movs	r2, #0
 8000554:	2120      	movs	r1, #32
 8000556:	0018      	movs	r0, r3
 8000558:	f000 ff56 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	0192      	lsls	r2, r2, #6
 8000562:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2284      	movs	r2, #132	; 0x84
 8000568:	0392      	lsls	r2, r2, #14
 800056a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000572:	193b      	adds	r3, r7, r4
 8000574:	4a0f      	ldr	r2, [pc, #60]	; (80005b4 <MX_GPIO_Init+0xd0>)
 8000576:	0019      	movs	r1, r3
 8000578:	0010      	movs	r0, r2
 800057a:	f000 fdd5 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800057e:	0021      	movs	r1, r4
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2220      	movs	r2, #32
 8000584:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2201      	movs	r2, #1
 800058a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000598:	187a      	adds	r2, r7, r1
 800059a:	2390      	movs	r3, #144	; 0x90
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fdc1 	bl	8001128 <HAL_GPIO_Init>

}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b009      	add	sp, #36	; 0x24
 80005ac:	bd90      	pop	{r4, r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000800 	.word	0x48000800

080005b8 <process_data_chunk>:
  * @param start_pos: The starting index in rx_buffer.
  * @param length: The number of bytes to process.
  * @retval None
  */
void process_data_chunk(uint16_t start_pos, uint16_t length)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	0002      	movs	r2, r0
 80005c0:	1dbb      	adds	r3, r7, #6
 80005c2:	801a      	strh	r2, [r3, #0]
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	1c0a      	adds	r2, r1, #0
 80005c8:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < length; i++)
 80005ca:	230e      	movs	r3, #14
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
 80005d2:	e05c      	b.n	800068e <process_data_chunk+0xd6>
    {
        uint16_t pos = (start_pos + i) % RX_BUFFER_SIZE;
 80005d4:	1dba      	adds	r2, r7, #6
 80005d6:	230e      	movs	r3, #14
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	8812      	ldrh	r2, [r2, #0]
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	18d3      	adds	r3, r2, r3
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	200c      	movs	r0, #12
 80005e4:	183b      	adds	r3, r7, r0
 80005e6:	21ff      	movs	r1, #255	; 0xff
 80005e8:	400a      	ands	r2, r1
 80005ea:	801a      	strh	r2, [r3, #0]
        char c = rx_buffer[pos];
 80005ec:	183b      	adds	r3, r7, r0
 80005ee:	881a      	ldrh	r2, [r3, #0]
 80005f0:	230b      	movs	r3, #11
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	492c      	ldr	r1, [pc, #176]	; (80006a8 <process_data_chunk+0xf0>)
 80005f6:	5c8a      	ldrb	r2, [r1, r2]
 80005f8:	701a      	strb	r2, [r3, #0]

        // Check for buffer overflow
        if (response_index >= MAX_RESPONSE_LEN - 1)
 80005fa:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <process_data_chunk+0xf4>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	b29b      	uxth	r3, r3
 8000600:	2b7e      	cmp	r3, #126	; 0x7e
 8000602:	d90b      	bls.n	800061c <process_data_chunk+0x64>
        {
            response_index = 0; // Reset to avoid overflow
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <process_data_chunk+0xf4>)
 8000606:	2200      	movs	r2, #0
 8000608:	801a      	strh	r2, [r3, #0]
            memset(response_buffer, 0, MAX_RESPONSE_LEN);
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <process_data_chunk+0xf8>)
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	2100      	movs	r1, #0
 8000610:	0018      	movs	r0, r3
 8000612:	f002 fe81 	bl	8003318 <memset>
            response_ready = 0;
 8000616:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <process_data_chunk+0xfc>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
        }

        // Store character
        response_buffer[response_index] = c;
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <process_data_chunk+0xf4>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	b29b      	uxth	r3, r3
 8000622:	0019      	movs	r1, r3
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <process_data_chunk+0xf8>)
 8000626:	220b      	movs	r2, #11
 8000628:	18ba      	adds	r2, r7, r2
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	545a      	strb	r2, [r3, r1]
        response_index++;
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <process_data_chunk+0xf4>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	b29b      	uxth	r3, r3
 8000634:	3301      	adds	r3, #1
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <process_data_chunk+0xf4>)
 800063a:	801a      	strh	r2, [r3, #0]

        // Check for "\r\n" in the last two bytes
        if (response_index >= 2 &&
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <process_data_chunk+0xf4>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b29b      	uxth	r3, r3
 8000642:	2b01      	cmp	r3, #1
 8000644:	d91d      	bls.n	8000682 <process_data_chunk+0xca>
            response_buffer[response_index - 2] == '\r' &&
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <process_data_chunk+0xf4>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	b29b      	uxth	r3, r3
 800064c:	3b02      	subs	r3, #2
 800064e:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <process_data_chunk+0xf8>)
 8000650:	5cd3      	ldrb	r3, [r2, r3]
        if (response_index >= 2 &&
 8000652:	2b0d      	cmp	r3, #13
 8000654:	d115      	bne.n	8000682 <process_data_chunk+0xca>
            response_buffer[response_index - 1] == '\n')
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <process_data_chunk+0xf4>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	b29b      	uxth	r3, r3
 800065c:	3b01      	subs	r3, #1
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <process_data_chunk+0xf8>)
 8000660:	5cd3      	ldrb	r3, [r2, r3]
            response_buffer[response_index - 2] == '\r' &&
 8000662:	2b0a      	cmp	r3, #10
 8000664:	d10d      	bne.n	8000682 <process_data_chunk+0xca>
        {
            response_buffer[response_index - 2] = '\0'; // Terminate at "\r"
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <process_data_chunk+0xf4>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	b29b      	uxth	r3, r3
 800066c:	3b02      	subs	r3, #2
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <process_data_chunk+0xf8>)
 8000670:	2100      	movs	r1, #0
 8000672:	54d1      	strb	r1, [r2, r3]
            response_ready = 1;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <process_data_chunk+0xfc>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
            response_index = 0; // Reset for next message
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <process_data_chunk+0xf4>)
 800067c:	2200      	movs	r2, #0
 800067e:	801a      	strh	r2, [r3, #0]
            break; // Exit to avoid processing remnants
 8000680:	e00d      	b.n	800069e <process_data_chunk+0xe6>
    for (uint16_t i = 0; i < length; i++)
 8000682:	210e      	movs	r1, #14
 8000684:	187b      	adds	r3, r7, r1
 8000686:	881a      	ldrh	r2, [r3, #0]
 8000688:	187b      	adds	r3, r7, r1
 800068a:	3201      	adds	r2, #1
 800068c:	801a      	strh	r2, [r3, #0]
 800068e:	230e      	movs	r3, #14
 8000690:	18fa      	adds	r2, r7, r3
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	8812      	ldrh	r2, [r2, #0]
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	d39b      	bcc.n	80005d4 <process_data_chunk+0x1c>
        }
    }
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b004      	add	sp, #16
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	2000019c 	.word	0x2000019c
 80006ac:	2000032c 	.word	0x2000032c
 80006b0:	200002a4 	.word	0x200002a4
 80006b4:	200002a0 	.word	0x200002a0

080006b8 <HAL_UART_TxCpltCallback>:
  * @brief  This function is called when a TX DMA transfer is complete.
  * @param  huart: Pointer to the UART handle.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_UART_TxCpltCallback+0x20>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d102      	bne.n	80006d0 <HAL_UART_TxCpltCallback+0x18>
  {
    tx_busy = 0;
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <HAL_UART_TxCpltCallback+0x24>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
  }
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40013800 	.word	0x40013800
 80006dc:	20000324 	.word	0x20000324

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <Error_Handler+0x8>
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_MspInit+0x44>)
 80006f4:	699a      	ldr	r2, [r3, #24]
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <HAL_MspInit+0x44>)
 80006f8:	2101      	movs	r1, #1
 80006fa:	430a      	orrs	r2, r1
 80006fc:	619a      	str	r2, [r3, #24]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_MspInit+0x44>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	2201      	movs	r2, #1
 8000704:	4013      	ands	r3, r2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_MspInit+0x44>)
 800070c:	69da      	ldr	r2, [r3, #28]
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_MspInit+0x44>)
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	0549      	lsls	r1, r1, #21
 8000714:	430a      	orrs	r2, r1
 8000716:	61da      	str	r2, [r3, #28]
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_MspInit+0x44>)
 800071a:	69da      	ldr	r2, [r3, #28]
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	055b      	lsls	r3, r3, #21
 8000720:	4013      	ands	r3, r2
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b002      	add	sp, #8
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b08b      	sub	sp, #44	; 0x2c
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	2414      	movs	r4, #20
 800073e:	193b      	adds	r3, r7, r4
 8000740:	0018      	movs	r0, r3
 8000742:	2314      	movs	r3, #20
 8000744:	001a      	movs	r2, r3
 8000746:	2100      	movs	r1, #0
 8000748:	f002 fde6 	bl	8003318 <memset>
  if(huart->Instance==USART1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a47      	ldr	r2, [pc, #284]	; (8000870 <HAL_UART_MspInit+0x13c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d000      	beq.n	8000758 <HAL_UART_MspInit+0x24>
 8000756:	e087      	b.n	8000868 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000758:	4b46      	ldr	r3, [pc, #280]	; (8000874 <HAL_UART_MspInit+0x140>)
 800075a:	699a      	ldr	r2, [r3, #24]
 800075c:	4b45      	ldr	r3, [pc, #276]	; (8000874 <HAL_UART_MspInit+0x140>)
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	01c9      	lsls	r1, r1, #7
 8000762:	430a      	orrs	r2, r1
 8000764:	619a      	str	r2, [r3, #24]
 8000766:	4b43      	ldr	r3, [pc, #268]	; (8000874 <HAL_UART_MspInit+0x140>)
 8000768:	699a      	ldr	r2, [r3, #24]
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	01db      	lsls	r3, r3, #7
 800076e:	4013      	ands	r3, r2
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <HAL_UART_MspInit+0x140>)
 8000776:	695a      	ldr	r2, [r3, #20]
 8000778:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <HAL_UART_MspInit+0x140>)
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	0289      	lsls	r1, r1, #10
 800077e:	430a      	orrs	r2, r1
 8000780:	615a      	str	r2, [r3, #20]
 8000782:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <HAL_UART_MspInit+0x140>)
 8000784:	695a      	ldr	r2, [r3, #20]
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	029b      	lsls	r3, r3, #10
 800078a:	4013      	ands	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	00d2      	lsls	r2, r2, #3
 8000796:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	0021      	movs	r1, r4
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2202      	movs	r2, #2
 800079e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2203      	movs	r2, #3
 80007aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2201      	movs	r2, #1
 80007b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	187a      	adds	r2, r7, r1
 80007b4:	2390      	movs	r3, #144	; 0x90
 80007b6:	05db      	lsls	r3, r3, #23
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 fcb4 	bl	8001128 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <HAL_UART_MspInit+0x144>)
 80007c2:	4a2e      	ldr	r2, [pc, #184]	; (800087c <HAL_UART_MspInit+0x148>)
 80007c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <HAL_UART_MspInit+0x144>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007cc:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <HAL_UART_MspInit+0x144>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <HAL_UART_MspInit+0x144>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007d8:	4b27      	ldr	r3, [pc, #156]	; (8000878 <HAL_UART_MspInit+0x144>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <HAL_UART_MspInit+0x144>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80007e4:	4b24      	ldr	r3, [pc, #144]	; (8000878 <HAL_UART_MspInit+0x144>)
 80007e6:	2220      	movs	r2, #32
 80007e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <HAL_UART_MspInit+0x144>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80007f0:	4b21      	ldr	r3, [pc, #132]	; (8000878 <HAL_UART_MspInit+0x144>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fa82 	bl	8000cfc <HAL_DMA_Init>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80007fc:	f7ff ff70 	bl	80006e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a1d      	ldr	r2, [pc, #116]	; (8000878 <HAL_UART_MspInit+0x144>)
 8000804:	675a      	str	r2, [r3, #116]	; 0x74
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <HAL_UART_MspInit+0x144>)
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <HAL_UART_MspInit+0x14c>)
 800080e:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <HAL_UART_MspInit+0x150>)
 8000810:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_UART_MspInit+0x14c>)
 8000814:	2210      	movs	r2, #16
 8000816:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <HAL_UART_MspInit+0x14c>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <HAL_UART_MspInit+0x14c>)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <HAL_UART_MspInit+0x14c>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_UART_MspInit+0x14c>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <HAL_UART_MspInit+0x14c>)
 8000832:	2220      	movs	r2, #32
 8000834:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_UART_MspInit+0x14c>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_UART_MspInit+0x14c>)
 800083e:	0018      	movs	r0, r3
 8000840:	f000 fa5c 	bl	8000cfc <HAL_DMA_Init>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8000848:	f7ff ff4a 	bl	80006e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <HAL_UART_MspInit+0x14c>)
 8000850:	671a      	str	r2, [r3, #112]	; 0x70
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_UART_MspInit+0x14c>)
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	201b      	movs	r0, #27
 800085e:	f000 fa1b 	bl	8000c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000862:	201b      	movs	r0, #27
 8000864:	f000 fa2d 	bl	8000cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b00b      	add	sp, #44	; 0x2c
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	40013800 	.word	0x40013800
 8000874:	40021000 	.word	0x40021000
 8000878:	20000114 	.word	0x20000114
 800087c:	40020030 	.word	0x40020030
 8000880:	20000158 	.word	0x20000158
 8000884:	4002001c 	.word	0x4002001c

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 f92c 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 fb47 	bl	8000f52 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <DMA1_Channel2_3_IRQHandler+0x20>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fb43 	bl	8000f52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	20000158 	.word	0x20000158
 80008d8:	20000114 	.word	0x20000114

080008dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <USART1_IRQHandler+0xc0>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	69db      	ldr	r3, [r3, #28]
 80008e8:	2210      	movs	r2, #16
 80008ea:	4013      	ands	r3, r2
 80008ec:	2b10      	cmp	r3, #16
 80008ee:	d14d      	bne.n	800098c <USART1_IRQHandler+0xb0>
	  {
	    __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80008f0:	4b2a      	ldr	r3, [pc, #168]	; (800099c <USART1_IRQHandler+0xc0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2210      	movs	r2, #16
 80008f6:	621a      	str	r2, [r3, #32]
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008f8:	2390      	movs	r3, #144	; 0x90
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2120      	movs	r1, #32
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fd9f 	bl	8001442 <HAL_GPIO_TogglePin>

	    // Correctly calculate rx_head with modulo to handle wrap-around
	    rx_head = (RX_BUFFER_SIZE - hdma_usart1_rx.Instance->CNDTR) % RX_BUFFER_SIZE;
 8000904:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <USART1_IRQHandler+0xc4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	b29b      	uxth	r3, r3
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	0052      	lsls	r2, r2, #1
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	b29b      	uxth	r3, r3
 8000914:	22ff      	movs	r2, #255	; 0xff
 8000916:	4013      	ands	r3, r2
 8000918:	b29a      	uxth	r2, r3
 800091a:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <USART1_IRQHandler+0xc8>)
 800091c:	801a      	strh	r2, [r3, #0]

	    // Calculate bytes received since last idle event
	    uint16_t bytes_available = (rx_head >= rx_tail) ?
 800091e:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <USART1_IRQHandler+0xc8>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	b29a      	uxth	r2, r3
 8000924:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <USART1_IRQHandler+0xcc>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	b29b      	uxth	r3, r3
 800092a:	429a      	cmp	r2, r3
 800092c:	d308      	bcc.n	8000940 <USART1_IRQHandler+0x64>
	                               (rx_head - rx_tail) :
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <USART1_IRQHandler+0xc8>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	b29a      	uxth	r2, r3
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <USART1_IRQHandler+0xcc>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	b29b      	uxth	r3, r3
	    uint16_t bytes_available = (rx_head >= rx_tail) ?
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	b29b      	uxth	r3, r3
 800093e:	e00a      	b.n	8000956 <USART1_IRQHandler+0x7a>
	                               (RX_BUFFER_SIZE - rx_tail + rx_head);
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <USART1_IRQHandler+0xc8>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <USART1_IRQHandler+0xcc>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	b29b      	uxth	r3, r3
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	b29b      	uxth	r3, r3
	    uint16_t bytes_available = (rx_head >= rx_tail) ?
 8000950:	3301      	adds	r3, #1
 8000952:	33ff      	adds	r3, #255	; 0xff
 8000954:	b29b      	uxth	r3, r3
 8000956:	1dba      	adds	r2, r7, #6
 8000958:	8013      	strh	r3, [r2, #0]

	    if (bytes_available > 0)
 800095a:	1dbb      	adds	r3, r7, #6
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d014      	beq.n	800098c <USART1_IRQHandler+0xb0>
	    {
	        process_data_chunk(rx_tail, bytes_available);
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <USART1_IRQHandler+0xcc>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	b29a      	uxth	r2, r3
 8000968:	1dbb      	adds	r3, r7, #6
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	0019      	movs	r1, r3
 800096e:	0010      	movs	r0, r2
 8000970:	f7ff fe22 	bl	80005b8 <process_data_chunk>
	        rx_tail = (rx_tail + bytes_available) % RX_BUFFER_SIZE; // Update tail after processing
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <USART1_IRQHandler+0xcc>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	b29a      	uxth	r2, r3
 800097a:	1dbb      	adds	r3, r7, #6
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	18d3      	adds	r3, r2, r3
 8000980:	b29b      	uxth	r3, r3
 8000982:	22ff      	movs	r2, #255	; 0xff
 8000984:	4013      	ands	r3, r2
 8000986:	b29a      	uxth	r2, r3
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <USART1_IRQHandler+0xcc>)
 800098a:	801a      	strh	r2, [r3, #0]
	    }
	  }


  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <USART1_IRQHandler+0xc0>)
 800098e:	0018      	movs	r0, r3
 8000990:	f001 fbda 	bl	8002148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000008c 	.word	0x2000008c
 80009a0:	20000114 	.word	0x20000114
 80009a4:	2000029c 	.word	0x2000029c
 80009a8:	2000029e 	.word	0x2000029e

080009ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <_sbrk+0x5c>)
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <_sbrk+0x60>)
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d102      	bne.n	80009ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <_sbrk+0x64>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <_sbrk+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	18d3      	adds	r3, r2, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d207      	bcs.n	80009ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009dc:	f002 fc72 	bl	80032c4 <__errno>
 80009e0:	0003      	movs	r3, r0
 80009e2:	220c      	movs	r2, #12
 80009e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	425b      	negs	r3, r3
 80009ea:	e009      	b.n	8000a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	18d2      	adds	r2, r2, r3
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <_sbrk+0x64>)
 80009fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	0018      	movs	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b006      	add	sp, #24
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20002000 	.word	0x20002000
 8000a0c:	00000400 	.word	0x00000400
 8000a10:	20000350 	.word	0x20000350
 8000a14:	20000368 	.word	0x20000368

08000a18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a28:	f7ff fff6 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a52:	f002 fc3d 	bl	80032d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a56:	f7ff fbf5 	bl	8000244 <main>

08000a5a <LoopForever>:

LoopForever:
    b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   r0, =_estack
 8000a5c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a68:	08003d18 	.word	0x08003d18
  ldr r2, =_sbss
 8000a6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a70:	20000368 	.word	0x20000368

08000a74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_IRQHandler>
	...

08000a78 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <HAL_Init+0x24>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_Init+0x24>)
 8000a82:	2110      	movs	r1, #16
 8000a84:	430a      	orrs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f000 f809 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8e:	f7ff fe2d 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_InitTick+0x5c>)
 8000aaa:	681c      	ldr	r4, [r3, #0]
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_InitTick+0x60>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	23fa      	movs	r3, #250	; 0xfa
 8000ab4:	0098      	lsls	r0, r3, #2
 8000ab6:	f7ff fb39 	bl	800012c <__udivsi3>
 8000aba:	0003      	movs	r3, r0
 8000abc:	0019      	movs	r1, r3
 8000abe:	0020      	movs	r0, r4
 8000ac0:	f7ff fb34 	bl	800012c <__udivsi3>
 8000ac4:	0003      	movs	r3, r0
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 f90b 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e00f      	b.n	8000af4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d80b      	bhi.n	8000af2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	2301      	movs	r3, #1
 8000ade:	425b      	negs	r3, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f8d8 	bl	8000c98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_InitTick+0x64>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b003      	add	sp, #12
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000004 	.word	0x20000004

08000b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x1c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	001a      	movs	r2, r3
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_IncTick+0x20>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	18d2      	adds	r2, r2, r3
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_IncTick+0x20>)
 8000b1a:	601a      	str	r2, [r3, #0]
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000354 	.word	0x20000354

08000b2c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <HAL_GetTick+0x10>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000354 	.word	0x20000354

08000b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	0002      	movs	r2, r0
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b7f      	cmp	r3, #127	; 0x7f
 8000b52:	d809      	bhi.n	8000b68 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	001a      	movs	r2, r3
 8000b5a:	231f      	movs	r3, #31
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <__NVIC_EnableIRQ+0x30>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	4091      	lsls	r1, r2
 8000b64:	000a      	movs	r2, r1
 8000b66:	601a      	str	r2, [r3, #0]
  }
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b7f      	cmp	r3, #127	; 0x7f
 8000b88:	d828      	bhi.n	8000bdc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8a:	4a2f      	ldr	r2, [pc, #188]	; (8000c48 <__NVIC_SetPriority+0xd4>)
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	33c0      	adds	r3, #192	; 0xc0
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	589b      	ldr	r3, [r3, r2]
 8000b9a:	1dfa      	adds	r2, r7, #7
 8000b9c:	7812      	ldrb	r2, [r2, #0]
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	400a      	ands	r2, r1
 8000ba4:	00d2      	lsls	r2, r2, #3
 8000ba6:	21ff      	movs	r1, #255	; 0xff
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	000a      	movs	r2, r1
 8000bac:	43d2      	mvns	r2, r2
 8000bae:	401a      	ands	r2, r3
 8000bb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	019b      	lsls	r3, r3, #6
 8000bb6:	22ff      	movs	r2, #255	; 0xff
 8000bb8:	401a      	ands	r2, r3
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	4003      	ands	r3, r0
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc8:	481f      	ldr	r0, [pc, #124]	; (8000c48 <__NVIC_SetPriority+0xd4>)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	33c0      	adds	r3, #192	; 0xc0
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bda:	e031      	b.n	8000c40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <__NVIC_SetPriority+0xd8>)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	0019      	movs	r1, r3
 8000be4:	230f      	movs	r3, #15
 8000be6:	400b      	ands	r3, r1
 8000be8:	3b08      	subs	r3, #8
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	3306      	adds	r3, #6
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	18d3      	adds	r3, r2, r3
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	1dfa      	adds	r2, r7, #7
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	400a      	ands	r2, r1
 8000c00:	00d2      	lsls	r2, r2, #3
 8000c02:	21ff      	movs	r1, #255	; 0xff
 8000c04:	4091      	lsls	r1, r2
 8000c06:	000a      	movs	r2, r1
 8000c08:	43d2      	mvns	r2, r2
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	019b      	lsls	r3, r3, #6
 8000c12:	22ff      	movs	r2, #255	; 0xff
 8000c14:	401a      	ands	r2, r3
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	4003      	ands	r3, r0
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <__NVIC_SetPriority+0xd8>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	001c      	movs	r4, r3
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	4023      	ands	r3, r4
 8000c30:	3b08      	subs	r3, #8
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	430a      	orrs	r2, r1
 8000c36:	3306      	adds	r3, #6
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	18c3      	adds	r3, r0, r3
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b003      	add	sp, #12
 8000c46:	bd90      	pop	{r4, r7, pc}
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	1e5a      	subs	r2, r3, #1
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	045b      	lsls	r3, r3, #17
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d301      	bcc.n	8000c68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c64:	2301      	movs	r3, #1
 8000c66:	e010      	b.n	8000c8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <SysTick_Config+0x44>)
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c70:	2301      	movs	r3, #1
 8000c72:	425b      	negs	r3, r3
 8000c74:	2103      	movs	r1, #3
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff ff7c 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x44>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x44>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	1c02      	adds	r2, r0, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ff5d 	bl	8000b74 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	0002      	movs	r2, r0
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b25b      	sxtb	r3, r3
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ff33 	bl	8000b40 <__NVIC_EnableIRQ>
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff ffaf 	bl	8000c50 <SysTick_Config>
 8000cf2:	0003      	movs	r3, r0
}
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e036      	b.n	8000d80 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2221      	movs	r2, #33	; 0x21
 8000d16:	2102      	movs	r1, #2
 8000d18:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <HAL_DMA_Init+0x8c>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 f9c4 	bl	80010f0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2221      	movs	r2, #33	; 0x21
 8000d72:	2101      	movs	r1, #1
 8000d74:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2220      	movs	r2, #32
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	0018      	movs	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b004      	add	sp, #16
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	ffffc00f 	.word	0xffffc00f

08000d8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d9a:	2317      	movs	r3, #23
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2220      	movs	r2, #32
 8000da6:	5c9b      	ldrb	r3, [r3, r2]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d101      	bne.n	8000db0 <HAL_DMA_Start_IT+0x24>
 8000dac:	2302      	movs	r3, #2
 8000dae:	e04f      	b.n	8000e50 <HAL_DMA_Start_IT+0xc4>
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2220      	movs	r2, #32
 8000db4:	2101      	movs	r1, #1
 8000db6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2221      	movs	r2, #33	; 0x21
 8000dbc:	5c9b      	ldrb	r3, [r3, r2]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d13a      	bne.n	8000e3a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2221      	movs	r2, #33	; 0x21
 8000dc8:	2102      	movs	r1, #2
 8000dca:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2101      	movs	r1, #1
 8000dde:	438a      	bics	r2, r1
 8000de0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	68b9      	ldr	r1, [r7, #8]
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f000 f954 	bl	8001096 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d008      	beq.n	8000e08 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	210e      	movs	r1, #14
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e00f      	b.n	8000e28 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	210a      	movs	r1, #10
 8000e14:	430a      	orrs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2104      	movs	r1, #4
 8000e24:	438a      	bics	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2101      	movs	r1, #1
 8000e34:	430a      	orrs	r2, r1
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	e007      	b.n	8000e4a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	2100      	movs	r1, #0
 8000e40:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e42:	2317      	movs	r3, #23
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	2202      	movs	r2, #2
 8000e48:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000e4a:	2317      	movs	r3, #23
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	781b      	ldrb	r3, [r3, #0]
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b006      	add	sp, #24
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2221      	movs	r2, #33	; 0x21
 8000e64:	5c9b      	ldrb	r3, [r3, r2]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d008      	beq.n	8000e7e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2204      	movs	r2, #4
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2220      	movs	r2, #32
 8000e76:	2100      	movs	r1, #0
 8000e78:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e020      	b.n	8000ec0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	210e      	movs	r1, #14
 8000e8a:	438a      	bics	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	438a      	bics	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4091      	lsls	r1, r2
 8000eaa:	000a      	movs	r2, r1
 8000eac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2221      	movs	r2, #33	; 0x21
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2220      	movs	r2, #32
 8000eba:	2100      	movs	r1, #0
 8000ebc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2221      	movs	r2, #33	; 0x21
 8000edc:	5c9b      	ldrb	r3, [r3, r2]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d006      	beq.n	8000ef2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e028      	b.n	8000f44 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	210e      	movs	r1, #14
 8000efe:	438a      	bics	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	438a      	bics	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4091      	lsls	r1, r2
 8000f1e:	000a      	movs	r2, r1
 8000f20:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2221      	movs	r2, #33	; 0x21
 8000f26:	2101      	movs	r1, #1
 8000f28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	2100      	movs	r1, #0
 8000f30:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d004      	beq.n	8000f44 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	0010      	movs	r0, r2
 8000f42:	4798      	blx	r3
    }
  }
  return status;
 8000f44:	230f      	movs	r3, #15
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	781b      	ldrb	r3, [r3, #0]
}
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	2204      	movs	r2, #4
 8000f70:	409a      	lsls	r2, r3
 8000f72:	0013      	movs	r3, r2
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	4013      	ands	r3, r2
 8000f78:	d024      	beq.n	8000fc4 <HAL_DMA_IRQHandler+0x72>
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d020      	beq.n	8000fc4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2220      	movs	r2, #32
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d107      	bne.n	8000f9e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2104      	movs	r1, #4
 8000f9a:	438a      	bics	r2, r1
 8000f9c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	4091      	lsls	r1, r2
 8000faa:	000a      	movs	r2, r1
 8000fac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d100      	bne.n	8000fb8 <HAL_DMA_IRQHandler+0x66>
 8000fb6:	e06a      	b.n	800108e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000fc2:	e064      	b.n	800108e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	2202      	movs	r2, #2
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d02b      	beq.n	800102c <HAL_DMA_IRQHandler+0xda>
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d027      	beq.n	800102c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d10b      	bne.n	8001000 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	210a      	movs	r1, #10
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2221      	movs	r2, #33	; 0x21
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001008:	2102      	movs	r1, #2
 800100a:	4091      	lsls	r1, r2
 800100c:	000a      	movs	r2, r1
 800100e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2220      	movs	r2, #32
 8001014:	2100      	movs	r1, #0
 8001016:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	2b00      	cmp	r3, #0
 800101e:	d036      	beq.n	800108e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	0010      	movs	r0, r2
 8001028:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800102a:	e030      	b.n	800108e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	2208      	movs	r2, #8
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4013      	ands	r3, r2
 800103a:	d028      	beq.n	800108e <HAL_DMA_IRQHandler+0x13c>
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	2208      	movs	r2, #8
 8001040:	4013      	ands	r3, r2
 8001042:	d024      	beq.n	800108e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	210e      	movs	r1, #14
 8001050:	438a      	bics	r2, r1
 8001052:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800105c:	2101      	movs	r1, #1
 800105e:	4091      	lsls	r1, r2
 8001060:	000a      	movs	r2, r1
 8001062:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2221      	movs	r2, #33	; 0x21
 800106e:	2101      	movs	r1, #1
 8001070:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2220      	movs	r2, #32
 8001076:	2100      	movs	r1, #0
 8001078:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	0010      	movs	r0, r2
 800108a:	4798      	blx	r3
    }
  }
}
 800108c:	e7ff      	b.n	800108e <HAL_DMA_IRQHandler+0x13c>
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b004      	add	sp, #16
 8001094:	bd80      	pop	{r7, pc}

08001096 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ac:	2101      	movs	r1, #1
 80010ae:	4091      	lsls	r1, r2
 80010b0:	000a      	movs	r2, r1
 80010b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b10      	cmp	r3, #16
 80010c2:	d108      	bne.n	80010d6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010d4:	e007      	b.n	80010e6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	60da      	str	r2, [r3, #12]
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b004      	add	sp, #16
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a08      	ldr	r2, [pc, #32]	; (8001120 <DMA_CalcBaseAndBitshift+0x30>)
 80010fe:	4694      	mov	ip, r2
 8001100:	4463      	add	r3, ip
 8001102:	2114      	movs	r1, #20
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff f811 	bl	800012c <__udivsi3>
 800110a:	0003      	movs	r3, r0
 800110c:	009a      	lsls	r2, r3, #2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a03      	ldr	r2, [pc, #12]	; (8001124 <DMA_CalcBaseAndBitshift+0x34>)
 8001116:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}
 8001120:	bffdfff8 	.word	0xbffdfff8
 8001124:	40020000 	.word	0x40020000

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	e14f      	b.n	80013d8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2101      	movs	r1, #1
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4091      	lsls	r1, r2
 8001142:	000a      	movs	r2, r1
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d100      	bne.n	8001150 <HAL_GPIO_Init+0x28>
 800114e:	e140      	b.n	80013d2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2203      	movs	r2, #3
 8001156:	4013      	ands	r3, r2
 8001158:	2b01      	cmp	r3, #1
 800115a:	d005      	beq.n	8001168 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2203      	movs	r2, #3
 8001162:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001164:	2b02      	cmp	r3, #2
 8001166:	d130      	bne.n	80011ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	409a      	lsls	r2, r3
 8001176:	0013      	movs	r3, r2
 8001178:	43da      	mvns	r2, r3
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	409a      	lsls	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800119e:	2201      	movs	r2, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	2201      	movs	r2, #1
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2203      	movs	r2, #3
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d017      	beq.n	8001206 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	43da      	mvns	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2203      	movs	r2, #3
 800120c:	4013      	ands	r3, r2
 800120e:	2b02      	cmp	r3, #2
 8001210:	d123      	bne.n	800125a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	58d3      	ldr	r3, [r2, r3]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2207      	movs	r2, #7
 8001224:	4013      	ands	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	220f      	movs	r2, #15
 800122a:	409a      	lsls	r2, r3
 800122c:	0013      	movs	r3, r2
 800122e:	43da      	mvns	r2, r3
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	691a      	ldr	r2, [r3, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2107      	movs	r1, #7
 800123e:	400b      	ands	r3, r1
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	409a      	lsls	r2, r3
 8001244:	0013      	movs	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	08da      	lsrs	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3208      	adds	r2, #8
 8001254:	0092      	lsls	r2, r2, #2
 8001256:	6939      	ldr	r1, [r7, #16]
 8001258:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	43da      	mvns	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2203      	movs	r2, #3
 8001278:	401a      	ands	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	409a      	lsls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	23c0      	movs	r3, #192	; 0xc0
 8001294:	029b      	lsls	r3, r3, #10
 8001296:	4013      	ands	r3, r2
 8001298:	d100      	bne.n	800129c <HAL_GPIO_Init+0x174>
 800129a:	e09a      	b.n	80013d2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129c:	4b54      	ldr	r3, [pc, #336]	; (80013f0 <HAL_GPIO_Init+0x2c8>)
 800129e:	699a      	ldr	r2, [r3, #24]
 80012a0:	4b53      	ldr	r3, [pc, #332]	; (80013f0 <HAL_GPIO_Init+0x2c8>)
 80012a2:	2101      	movs	r1, #1
 80012a4:	430a      	orrs	r2, r1
 80012a6:	619a      	str	r2, [r3, #24]
 80012a8:	4b51      	ldr	r3, [pc, #324]	; (80013f0 <HAL_GPIO_Init+0x2c8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	2201      	movs	r2, #1
 80012ae:	4013      	ands	r3, r2
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b4:	4a4f      	ldr	r2, [pc, #316]	; (80013f4 <HAL_GPIO_Init+0x2cc>)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	589b      	ldr	r3, [r3, r2]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	2203      	movs	r2, #3
 80012c6:	4013      	ands	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	409a      	lsls	r2, r3
 80012ce:	0013      	movs	r3, r2
 80012d0:	43da      	mvns	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	2390      	movs	r3, #144	; 0x90
 80012dc:	05db      	lsls	r3, r3, #23
 80012de:	429a      	cmp	r2, r3
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x1e2>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a44      	ldr	r2, [pc, #272]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x1de>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a43      	ldr	r2, [pc, #268]	; (80013fc <HAL_GPIO_Init+0x2d4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x1da>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a42      	ldr	r2, [pc, #264]	; (8001400 <HAL_GPIO_Init+0x2d8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x1d6>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x1e4>
 80012fe:	2305      	movs	r3, #5
 8001300:	e004      	b.n	800130c <HAL_GPIO_Init+0x1e4>
 8001302:	2302      	movs	r3, #2
 8001304:	e002      	b.n	800130c <HAL_GPIO_Init+0x1e4>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_GPIO_Init+0x1e4>
 800130a:	2300      	movs	r3, #0
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	2103      	movs	r1, #3
 8001310:	400a      	ands	r2, r1
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4093      	lsls	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800131c:	4935      	ldr	r1, [pc, #212]	; (80013f4 <HAL_GPIO_Init+0x2cc>)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <HAL_GPIO_Init+0x2dc>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43da      	mvns	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	035b      	lsls	r3, r3, #13
 8001342:	4013      	ands	r3, r2
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_GPIO_Init+0x2dc>)
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_GPIO_Init+0x2dc>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43da      	mvns	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	039b      	lsls	r3, r3, #14
 800136c:	4013      	ands	r3, r2
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_GPIO_Init+0x2dc>)
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <HAL_GPIO_Init+0x2dc>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	43da      	mvns	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	029b      	lsls	r3, r3, #10
 8001396:	4013      	ands	r3, r2
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_GPIO_Init+0x2dc>)
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_GPIO_Init+0x2dc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43da      	mvns	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	025b      	lsls	r3, r3, #9
 80013c0:	4013      	ands	r3, r2
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_GPIO_Init+0x2dc>)
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1e13      	subs	r3, r2, #0
 80013e2:	d000      	beq.n	80013e6 <HAL_GPIO_Init+0x2be>
 80013e4:	e6a8      	b.n	8001138 <HAL_GPIO_Init+0x10>
  } 
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b006      	add	sp, #24
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	48000800 	.word	0x48000800
 8001400:	48000c00 	.word	0x48000c00
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	0008      	movs	r0, r1
 8001412:	0011      	movs	r1, r2
 8001414:	1cbb      	adds	r3, r7, #2
 8001416:	1c02      	adds	r2, r0, #0
 8001418:	801a      	strh	r2, [r3, #0]
 800141a:	1c7b      	adds	r3, r7, #1
 800141c:	1c0a      	adds	r2, r1, #0
 800141e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001420:	1c7b      	adds	r3, r7, #1
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d004      	beq.n	8001432 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001428:	1cbb      	adds	r3, r7, #2
 800142a:	881a      	ldrh	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001430:	e003      	b.n	800143a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001432:	1cbb      	adds	r3, r7, #2
 8001434:	881a      	ldrh	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	000a      	movs	r2, r1
 800144c:	1cbb      	adds	r3, r7, #2
 800144e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001456:	1cbb      	adds	r3, r7, #2
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	041a      	lsls	r2, r3, #16
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	1cb9      	adds	r1, r7, #2
 8001466:	8809      	ldrh	r1, [r1, #0]
 8001468:	400b      	ands	r3, r1
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b004      	add	sp, #16
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e301      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2201      	movs	r2, #1
 8001490:	4013      	ands	r3, r2
 8001492:	d100      	bne.n	8001496 <HAL_RCC_OscConfig+0x1e>
 8001494:	e08d      	b.n	80015b2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001496:	4bc3      	ldr	r3, [pc, #780]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	220c      	movs	r2, #12
 800149c:	4013      	ands	r3, r2
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d00e      	beq.n	80014c0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014a2:	4bc0      	ldr	r3, [pc, #768]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	220c      	movs	r2, #12
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d116      	bne.n	80014dc <HAL_RCC_OscConfig+0x64>
 80014ae:	4bbd      	ldr	r3, [pc, #756]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	401a      	ands	r2, r3
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	025b      	lsls	r3, r3, #9
 80014bc:	429a      	cmp	r2, r3
 80014be:	d10d      	bne.n	80014dc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	4bb8      	ldr	r3, [pc, #736]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	029b      	lsls	r3, r3, #10
 80014c8:	4013      	ands	r3, r2
 80014ca:	d100      	bne.n	80014ce <HAL_RCC_OscConfig+0x56>
 80014cc:	e070      	b.n	80015b0 <HAL_RCC_OscConfig+0x138>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d000      	beq.n	80014d8 <HAL_RCC_OscConfig+0x60>
 80014d6:	e06b      	b.n	80015b0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e2d8      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d107      	bne.n	80014f4 <HAL_RCC_OscConfig+0x7c>
 80014e4:	4baf      	ldr	r3, [pc, #700]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4bae      	ldr	r3, [pc, #696]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	0249      	lsls	r1, r1, #9
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e02f      	b.n	8001554 <HAL_RCC_OscConfig+0xdc>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10c      	bne.n	8001516 <HAL_RCC_OscConfig+0x9e>
 80014fc:	4ba9      	ldr	r3, [pc, #676]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4ba8      	ldr	r3, [pc, #672]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001502:	49a9      	ldr	r1, [pc, #676]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 8001504:	400a      	ands	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	4ba6      	ldr	r3, [pc, #664]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4ba5      	ldr	r3, [pc, #660]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800150e:	49a7      	ldr	r1, [pc, #668]	; (80017ac <HAL_RCC_OscConfig+0x334>)
 8001510:	400a      	ands	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e01e      	b.n	8001554 <HAL_RCC_OscConfig+0xdc>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b05      	cmp	r3, #5
 800151c:	d10e      	bne.n	800153c <HAL_RCC_OscConfig+0xc4>
 800151e:	4ba1      	ldr	r3, [pc, #644]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4ba0      	ldr	r3, [pc, #640]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	02c9      	lsls	r1, r1, #11
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	4b9d      	ldr	r3, [pc, #628]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b9c      	ldr	r3, [pc, #624]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001532:	2180      	movs	r1, #128	; 0x80
 8001534:	0249      	lsls	r1, r1, #9
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0xdc>
 800153c:	4b99      	ldr	r3, [pc, #612]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b98      	ldr	r3, [pc, #608]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001542:	4999      	ldr	r1, [pc, #612]	; (80017a8 <HAL_RCC_OscConfig+0x330>)
 8001544:	400a      	ands	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	4b96      	ldr	r3, [pc, #600]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b95      	ldr	r3, [pc, #596]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800154e:	4997      	ldr	r1, [pc, #604]	; (80017ac <HAL_RCC_OscConfig+0x334>)
 8001550:	400a      	ands	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d014      	beq.n	8001586 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fae6 	bl	8000b2c <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001566:	f7ff fae1 	bl	8000b2c <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b64      	cmp	r3, #100	; 0x64
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e28a      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001578:	4b8a      	ldr	r3, [pc, #552]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	029b      	lsls	r3, r3, #10
 8001580:	4013      	ands	r3, r2
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0xee>
 8001584:	e015      	b.n	80015b2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fad1 	bl	8000b2c <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff facc 	bl	8000b2c <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e275      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a2:	4b80      	ldr	r3, [pc, #512]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	029b      	lsls	r3, r3, #10
 80015aa:	4013      	ands	r3, r2
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x118>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2202      	movs	r2, #2
 80015b8:	4013      	ands	r3, r2
 80015ba:	d100      	bne.n	80015be <HAL_RCC_OscConfig+0x146>
 80015bc:	e069      	b.n	8001692 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015be:	4b79      	ldr	r3, [pc, #484]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	220c      	movs	r2, #12
 80015c4:	4013      	ands	r3, r2
 80015c6:	d00b      	beq.n	80015e0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015c8:	4b76      	ldr	r3, [pc, #472]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	220c      	movs	r2, #12
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d11c      	bne.n	800160e <HAL_RCC_OscConfig+0x196>
 80015d4:	4b73      	ldr	r3, [pc, #460]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	4013      	ands	r3, r2
 80015de:	d116      	bne.n	800160e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e0:	4b70      	ldr	r3, [pc, #448]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2202      	movs	r2, #2
 80015e6:	4013      	ands	r3, r2
 80015e8:	d005      	beq.n	80015f6 <HAL_RCC_OscConfig+0x17e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e24b      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	4b6b      	ldr	r3, [pc, #428]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	22f8      	movs	r2, #248	; 0xf8
 80015fc:	4393      	bics	r3, r2
 80015fe:	0019      	movs	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	00da      	lsls	r2, r3, #3
 8001606:	4b67      	ldr	r3, [pc, #412]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160c:	e041      	b.n	8001692 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d024      	beq.n	8001660 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800161c:	2101      	movs	r1, #1
 800161e:	430a      	orrs	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001622:	f7ff fa83 	bl	8000b2c <HAL_GetTick>
 8001626:	0003      	movs	r3, r0
 8001628:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162c:	f7ff fa7e 	bl	8000b2c <HAL_GetTick>
 8001630:	0002      	movs	r2, r0
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e227      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163e:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2202      	movs	r2, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d0f1      	beq.n	800162c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	4b56      	ldr	r3, [pc, #344]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	22f8      	movs	r2, #248	; 0xf8
 800164e:	4393      	bics	r3, r2
 8001650:	0019      	movs	r1, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	00da      	lsls	r2, r3, #3
 8001658:	4b52      	ldr	r3, [pc, #328]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e018      	b.n	8001692 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001660:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b4f      	ldr	r3, [pc, #316]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001666:	2101      	movs	r1, #1
 8001668:	438a      	bics	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fa5e 	bl	8000b2c <HAL_GetTick>
 8001670:	0003      	movs	r3, r0
 8001672:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff fa59 	bl	8000b2c <HAL_GetTick>
 800167a:	0002      	movs	r2, r0
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e202      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001688:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2202      	movs	r2, #2
 800168e:	4013      	ands	r3, r2
 8001690:	d1f1      	bne.n	8001676 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2208      	movs	r2, #8
 8001698:	4013      	ands	r3, r2
 800169a:	d036      	beq.n	800170a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d019      	beq.n	80016d8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a4:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a8:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	2101      	movs	r1, #1
 80016ac:	430a      	orrs	r2, r1
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fa3c 	bl	8000b2c <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ba:	f7ff fa37 	bl	8000b2c <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e1e0      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016cc:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	2202      	movs	r2, #2
 80016d2:	4013      	ands	r3, r2
 80016d4:	d0f1      	beq.n	80016ba <HAL_RCC_OscConfig+0x242>
 80016d6:	e018      	b.n	800170a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80016da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 80016de:	2101      	movs	r1, #1
 80016e0:	438a      	bics	r2, r1
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff fa22 	bl	8000b2c <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ee:	f7ff fa1d 	bl	8000b2c <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e1c6      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	2202      	movs	r2, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d1f1      	bne.n	80016ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2204      	movs	r2, #4
 8001710:	4013      	ands	r3, r2
 8001712:	d100      	bne.n	8001716 <HAL_RCC_OscConfig+0x29e>
 8001714:	e0b4      	b.n	8001880 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001716:	201f      	movs	r0, #31
 8001718:	183b      	adds	r3, r7, r0
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001720:	69da      	ldr	r2, [r3, #28]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	055b      	lsls	r3, r3, #21
 8001726:	4013      	ands	r3, r2
 8001728:	d110      	bne.n	800174c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800172c:	69da      	ldr	r2, [r3, #28]
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	0549      	lsls	r1, r1, #21
 8001734:	430a      	orrs	r2, r1
 8001736:	61da      	str	r2, [r3, #28]
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	055b      	lsls	r3, r3, #21
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001746:	183b      	adds	r3, r7, r0
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_RCC_OscConfig+0x338>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4013      	ands	r3, r2
 8001756:	d11a      	bne.n	800178e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_RCC_OscConfig+0x338>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_RCC_OscConfig+0x338>)
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	0049      	lsls	r1, r1, #1
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff f9e1 	bl	8000b2c <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001770:	f7ff f9dc 	bl	8000b2c <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e185      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_OscConfig+0x338>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4013      	ands	r3, r2
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d10e      	bne.n	80017b4 <HAL_RCC_OscConfig+0x33c>
 8001796:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 8001798:	6a1a      	ldr	r2, [r3, #32]
 800179a:	4b02      	ldr	r3, [pc, #8]	; (80017a4 <HAL_RCC_OscConfig+0x32c>)
 800179c:	2101      	movs	r1, #1
 800179e:	430a      	orrs	r2, r1
 80017a0:	621a      	str	r2, [r3, #32]
 80017a2:	e035      	b.n	8001810 <HAL_RCC_OscConfig+0x398>
 80017a4:	40021000 	.word	0x40021000
 80017a8:	fffeffff 	.word	0xfffeffff
 80017ac:	fffbffff 	.word	0xfffbffff
 80017b0:	40007000 	.word	0x40007000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10c      	bne.n	80017d6 <HAL_RCC_OscConfig+0x35e>
 80017bc:	4bb6      	ldr	r3, [pc, #728]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017be:	6a1a      	ldr	r2, [r3, #32]
 80017c0:	4bb5      	ldr	r3, [pc, #724]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017c2:	2101      	movs	r1, #1
 80017c4:	438a      	bics	r2, r1
 80017c6:	621a      	str	r2, [r3, #32]
 80017c8:	4bb3      	ldr	r3, [pc, #716]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017ca:	6a1a      	ldr	r2, [r3, #32]
 80017cc:	4bb2      	ldr	r3, [pc, #712]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017ce:	2104      	movs	r1, #4
 80017d0:	438a      	bics	r2, r1
 80017d2:	621a      	str	r2, [r3, #32]
 80017d4:	e01c      	b.n	8001810 <HAL_RCC_OscConfig+0x398>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x380>
 80017de:	4bae      	ldr	r3, [pc, #696]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017e0:	6a1a      	ldr	r2, [r3, #32]
 80017e2:	4bad      	ldr	r3, [pc, #692]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017e4:	2104      	movs	r1, #4
 80017e6:	430a      	orrs	r2, r1
 80017e8:	621a      	str	r2, [r3, #32]
 80017ea:	4bab      	ldr	r3, [pc, #684]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	4baa      	ldr	r3, [pc, #680]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	430a      	orrs	r2, r1
 80017f4:	621a      	str	r2, [r3, #32]
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0x398>
 80017f8:	4ba7      	ldr	r3, [pc, #668]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017fa:	6a1a      	ldr	r2, [r3, #32]
 80017fc:	4ba6      	ldr	r3, [pc, #664]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80017fe:	2101      	movs	r1, #1
 8001800:	438a      	bics	r2, r1
 8001802:	621a      	str	r2, [r3, #32]
 8001804:	4ba4      	ldr	r3, [pc, #656]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001806:	6a1a      	ldr	r2, [r3, #32]
 8001808:	4ba3      	ldr	r3, [pc, #652]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800180a:	2104      	movs	r1, #4
 800180c:	438a      	bics	r2, r1
 800180e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d014      	beq.n	8001842 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff f988 	bl	8000b2c <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001820:	e009      	b.n	8001836 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff f983 	bl	8000b2c <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	4a9b      	ldr	r2, [pc, #620]	; (8001a9c <HAL_RCC_OscConfig+0x624>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e12b      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001836:	4b98      	ldr	r3, [pc, #608]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	2202      	movs	r2, #2
 800183c:	4013      	ands	r3, r2
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x3aa>
 8001840:	e013      	b.n	800186a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001842:	f7ff f973 	bl	8000b2c <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184a:	e009      	b.n	8001860 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff f96e 	bl	8000b2c <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	4a91      	ldr	r2, [pc, #580]	; (8001a9c <HAL_RCC_OscConfig+0x624>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e116      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001860:	4b8d      	ldr	r3, [pc, #564]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	2202      	movs	r2, #2
 8001866:	4013      	ands	r3, r2
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800186a:	231f      	movs	r3, #31
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001874:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	4b87      	ldr	r3, [pc, #540]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800187a:	4989      	ldr	r1, [pc, #548]	; (8001aa0 <HAL_RCC_OscConfig+0x628>)
 800187c:	400a      	ands	r2, r1
 800187e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2210      	movs	r2, #16
 8001886:	4013      	ands	r3, r2
 8001888:	d063      	beq.n	8001952 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d12a      	bne.n	80018e8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001892:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001896:	4b80      	ldr	r3, [pc, #512]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001898:	2104      	movs	r1, #4
 800189a:	430a      	orrs	r2, r1
 800189c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800189e:	4b7e      	ldr	r3, [pc, #504]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a2:	4b7d      	ldr	r3, [pc, #500]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018a4:	2101      	movs	r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff f93f 	bl	8000b2c <HAL_GetTick>
 80018ae:	0003      	movs	r3, r0
 80018b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018b4:	f7ff f93a 	bl	8000b2c <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e0e3      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018c6:	4b74      	ldr	r3, [pc, #464]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ca:	2202      	movs	r2, #2
 80018cc:	4013      	ands	r3, r2
 80018ce:	d0f1      	beq.n	80018b4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018d0:	4b71      	ldr	r3, [pc, #452]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d4:	22f8      	movs	r2, #248	; 0xf8
 80018d6:	4393      	bics	r3, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	00da      	lsls	r2, r3, #3
 80018e0:	4b6d      	ldr	r3, [pc, #436]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	635a      	str	r2, [r3, #52]	; 0x34
 80018e6:	e034      	b.n	8001952 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	3305      	adds	r3, #5
 80018ee:	d111      	bne.n	8001914 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018f0:	4b69      	ldr	r3, [pc, #420]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f4:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018f6:	2104      	movs	r1, #4
 80018f8:	438a      	bics	r2, r1
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018fc:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001900:	22f8      	movs	r2, #248	; 0xf8
 8001902:	4393      	bics	r3, r2
 8001904:	0019      	movs	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	00da      	lsls	r2, r3, #3
 800190c:	4b62      	ldr	r3, [pc, #392]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800190e:	430a      	orrs	r2, r1
 8001910:	635a      	str	r2, [r3, #52]	; 0x34
 8001912:	e01e      	b.n	8001952 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001914:	4b60      	ldr	r3, [pc, #384]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001918:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800191a:	2104      	movs	r1, #4
 800191c:	430a      	orrs	r2, r1
 800191e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001920:	4b5d      	ldr	r3, [pc, #372]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001924:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001926:	2101      	movs	r1, #1
 8001928:	438a      	bics	r2, r1
 800192a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff f8fe 	bl	8000b2c <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001936:	f7ff f8f9 	bl	8000b2c <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e0a2      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001948:	4b53      	ldr	r3, [pc, #332]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800194a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d1f1      	bne.n	8001936 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d100      	bne.n	800195c <HAL_RCC_OscConfig+0x4e4>
 800195a:	e097      	b.n	8001a8c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195c:	4b4e      	ldr	r3, [pc, #312]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	220c      	movs	r2, #12
 8001962:	4013      	ands	r3, r2
 8001964:	2b08      	cmp	r3, #8
 8001966:	d100      	bne.n	800196a <HAL_RCC_OscConfig+0x4f2>
 8001968:	e06b      	b.n	8001a42 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d14c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4b48      	ldr	r3, [pc, #288]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001978:	494a      	ldr	r1, [pc, #296]	; (8001aa4 <HAL_RCC_OscConfig+0x62c>)
 800197a:	400a      	ands	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff f8d5 	bl	8000b2c <HAL_GetTick>
 8001982:	0003      	movs	r3, r0
 8001984:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f8d0 	bl	8000b2c <HAL_GetTick>
 800198c:	0002      	movs	r2, r0
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e079      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199a:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	049b      	lsls	r3, r3, #18
 80019a2:	4013      	ands	r3, r2
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a6:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	220f      	movs	r2, #15
 80019ac:	4393      	bics	r3, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b4:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80019b6:	430a      	orrs	r2, r1
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4a3a      	ldr	r2, [pc, #232]	; (8001aa8 <HAL_RCC_OscConfig+0x630>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	0019      	movs	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	431a      	orrs	r2, r3
 80019ce:	4b32      	ldr	r3, [pc, #200]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d4:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	0449      	lsls	r1, r1, #17
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff f8a3 	bl	8000b2c <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f89e 	bl	8000b2c <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e047      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	049b      	lsls	r3, r3, #18
 8001a06:	4013      	ands	r3, r2
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x574>
 8001a0a:	e03f      	b.n	8001a8c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001a12:	4924      	ldr	r1, [pc, #144]	; (8001aa4 <HAL_RCC_OscConfig+0x62c>)
 8001a14:	400a      	ands	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff f888 	bl	8000b2c <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff f883 	bl	8000b2c <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e02c      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	049b      	lsls	r3, r3, #18
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x5aa>
 8001a40:	e024      	b.n	8001a8c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e01f      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_RCC_OscConfig+0x620>)
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	025b      	lsls	r3, r3, #9
 8001a60:	401a      	ands	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d10e      	bne.n	8001a88 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	401a      	ands	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	23f0      	movs	r3, #240	; 0xf0
 8001a7c:	039b      	lsls	r3, r3, #14
 8001a7e:	401a      	ands	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b008      	add	sp, #32
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	00001388 	.word	0x00001388
 8001aa0:	efffffff 	.word	0xefffffff
 8001aa4:	feffffff 	.word	0xfeffffff
 8001aa8:	ffc2ffff 	.word	0xffc2ffff

08001aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0b3      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d911      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4393      	bics	r3, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	4b55      	ldr	r3, [pc, #340]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae0:	4b53      	ldr	r3, [pc, #332]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e09a      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2202      	movs	r2, #2
 8001af8:	4013      	ands	r3, r2
 8001afa:	d015      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2204      	movs	r2, #4
 8001b02:	4013      	ands	r3, r2
 8001b04:	d006      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b06:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b0c:	21e0      	movs	r1, #224	; 0xe0
 8001b0e:	00c9      	lsls	r1, r1, #3
 8001b10:	430a      	orrs	r2, r1
 8001b12:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	22f0      	movs	r2, #240	; 0xf0
 8001b1a:	4393      	bics	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	4b44      	ldr	r3, [pc, #272]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b24:	430a      	orrs	r2, r1
 8001b26:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d040      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	029b      	lsls	r3, r3, #10
 8001b42:	4013      	ands	r3, r2
 8001b44:	d114      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e06e      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	049b      	lsls	r3, r3, #18
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d108      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e062      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2202      	movs	r2, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e05b      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b70:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2203      	movs	r2, #3
 8001b76:	4393      	bics	r3, r2
 8001b78:	0019      	movs	r1, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001b80:	430a      	orrs	r2, r1
 8001b82:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b84:	f7fe ffd2 	bl	8000b2c <HAL_GetTick>
 8001b88:	0003      	movs	r3, r0
 8001b8a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8c:	e009      	b.n	8001ba2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8e:	f7fe ffcd 	bl	8000b2c <HAL_GetTick>
 8001b92:	0002      	movs	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	4a27      	ldr	r2, [pc, #156]	; (8001c38 <HAL_RCC_ClockConfig+0x18c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e042      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	401a      	ands	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1ec      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d211      	bcs.n	8001be6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4393      	bics	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <HAL_RCC_ClockConfig+0x184>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e020      	b.n	8001c28 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2204      	movs	r2, #4
 8001bec:	4013      	ands	r3, r2
 8001bee:	d009      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf0:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a11      	ldr	r2, [pc, #68]	; (8001c3c <HAL_RCC_ClockConfig+0x190>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001c00:	430a      	orrs	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c04:	f000 f820 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001c08:	0001      	movs	r1, r0
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_RCC_ClockConfig+0x188>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	220f      	movs	r2, #15
 8001c12:	4013      	ands	r3, r2
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x194>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	000a      	movs	r2, r1
 8001c1a:	40da      	lsrs	r2, r3
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x198>)
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7fe ff3d 	bl	8000aa0 <HAL_InitTick>
  
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b004      	add	sp, #16
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	00001388 	.word	0x00001388
 8001c3c:	fffff8ff 	.word	0xfffff8ff
 8001c40:	08003ca4 	.word	0x08003ca4
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x30>
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x36>
 8001c76:	e02c      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c7a:	613b      	str	r3, [r7, #16]
      break;
 8001c7c:	e02c      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	0c9b      	lsrs	r3, r3, #18
 8001c82:	220f      	movs	r2, #15
 8001c84:	4013      	ands	r3, r2
 8001c86:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c88:	5cd3      	ldrb	r3, [r2, r3]
 8001c8a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	220f      	movs	r2, #15
 8001c92:	4013      	ands	r3, r2
 8001c94:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	025b      	lsls	r3, r3, #9
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	4810      	ldr	r0, [pc, #64]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ca8:	f7fe fa40 	bl	800012c <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	001a      	movs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4353      	muls	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e009      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	000a      	movs	r2, r1
 8001cbc:	0152      	lsls	r2, r2, #5
 8001cbe:	1a52      	subs	r2, r2, r1
 8001cc0:	0193      	lsls	r3, r2, #6
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	185b      	adds	r3, r3, r1
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
      break;
 8001cd0:	e002      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cd4:	613b      	str	r3, [r7, #16]
      break;
 8001cd6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cd8:	693b      	ldr	r3, [r7, #16]
}
 8001cda:	0018      	movs	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b006      	add	sp, #24
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	007a1200 	.word	0x007a1200
 8001cec:	08003cbc 	.word	0x08003cbc
 8001cf0:	08003ccc 	.word	0x08003ccc

08001cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf8:	4b02      	ldr	r3, [pc, #8]	; (8001d04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	20000000 	.word	0x20000000

08001d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d0c:	f7ff fff2 	bl	8001cf4 <HAL_RCC_GetHCLKFreq>
 8001d10:	0001      	movs	r1, r0
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	2207      	movs	r2, #7
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
 8001d20:	40d9      	lsrs	r1, r3
 8001d22:	000b      	movs	r3, r1
}    
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	08003cb4 	.word	0x08003cb4

08001d34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	025b      	lsls	r3, r3, #9
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d100      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d50:	e08e      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2017      	movs	r0, #23
 8001d54:	183b      	adds	r3, r7, r0
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5a:	4b57      	ldr	r3, [pc, #348]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d5c:	69da      	ldr	r2, [r3, #28]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	055b      	lsls	r3, r3, #21
 8001d62:	4013      	ands	r3, r2
 8001d64:	d110      	bne.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	4b54      	ldr	r3, [pc, #336]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	0549      	lsls	r1, r1, #21
 8001d70:	430a      	orrs	r2, r1
 8001d72:	61da      	str	r2, [r3, #28]
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	055b      	lsls	r3, r3, #21
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d82:	183b      	adds	r3, r7, r0
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4013      	ands	r3, r2
 8001d92:	d11a      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d94:	4b49      	ldr	r3, [pc, #292]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	0049      	lsls	r1, r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da2:	f7fe fec3 	bl	8000b2c <HAL_GetTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	e008      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dac:	f7fe febe 	bl	8000b2c <HAL_GetTick>
 8001db0:	0002      	movs	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e077      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dca:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dcc:	6a1a      	ldr	r2, [r3, #32]
 8001dce:	23c0      	movs	r3, #192	; 0xc0
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d034      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	23c0      	movs	r3, #192	; 0xc0
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4013      	ands	r3, r2
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d02c      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dec:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a33      	ldr	r2, [pc, #204]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001df6:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001df8:	6a1a      	ldr	r2, [r3, #32]
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	0249      	lsls	r1, r1, #9
 8001e00:	430a      	orrs	r2, r1
 8001e02:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e04:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e06:	6a1a      	ldr	r2, [r3, #32]
 8001e08:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e0a:	492e      	ldr	r1, [pc, #184]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e10:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7fe fe85 	bl	8000b2c <HAL_GetTick>
 8001e22:	0003      	movs	r3, r0
 8001e24:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e26:	e009      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7fe fe80 	bl	8000b2c <HAL_GetTick>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	4a25      	ldr	r2, [pc, #148]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e038      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	2202      	movs	r2, #2
 8001e42:	4013      	ands	r3, r2
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e5a:	2317      	movs	r3, #23
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e66:	69da      	ldr	r2, [r3, #28]
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e6a:	4918      	ldr	r1, [pc, #96]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2201      	movs	r2, #1
 8001e76:	4013      	ands	r3, r2
 8001e78:	d009      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	2203      	movs	r2, #3
 8001e80:	4393      	bics	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2220      	movs	r2, #32
 8001e94:	4013      	ands	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	4393      	bics	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b006      	add	sp, #24
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	fffffcff 	.word	0xfffffcff
 8001ec4:	fffeffff 	.word	0xfffeffff
 8001ec8:	00001388 	.word	0x00001388
 8001ecc:	efffffff 	.word	0xefffffff

08001ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e044      	b.n	8001f6c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d107      	bne.n	8001efa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2278      	movs	r2, #120	; 0x78
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7fe fc1d 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2224      	movs	r2, #36	; 0x24
 8001efe:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	438a      	bics	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 fd48 	bl	80029b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 fc04 	bl	8002730 <UART_SetConfig>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e01c      	b.n	8001f6c <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	490d      	ldr	r1, [pc, #52]	; (8001f74 <HAL_UART_Init+0xa4>)
 8001f3e:	400a      	ands	r2, r1
 8001f40:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2108      	movs	r1, #8
 8001f4e:	438a      	bics	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 fdd7 	bl	8002b18 <UART_CheckIdleState>
 8001f6a:	0003      	movs	r3, r0
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b002      	add	sp, #8
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	fffff7ff 	.word	0xfffff7ff

08001f78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	1dbb      	adds	r3, r7, #6
 8001f84:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	d000      	beq.n	8001f90 <HAL_UART_Transmit_DMA+0x18>
 8001f8e:	e077      	b.n	8002080 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_UART_Transmit_DMA+0x26>
 8001f96:	1dbb      	adds	r3, r7, #6
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e06f      	b.n	8002082 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	015b      	lsls	r3, r3, #5
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d109      	bne.n	8001fc2 <HAL_UART_Transmit_DMA+0x4a>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d001      	beq.n	8001fc2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e05f      	b.n	8002082 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1dba      	adds	r2, r7, #6
 8001fcc:	2150      	movs	r1, #80	; 0x50
 8001fce:	8812      	ldrh	r2, [r2, #0]
 8001fd0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1dba      	adds	r2, r7, #6
 8001fd6:	2152      	movs	r1, #82	; 0x52
 8001fd8:	8812      	ldrh	r2, [r2, #0]
 8001fda:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2284      	movs	r2, #132	; 0x84
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2221      	movs	r2, #33	; 0x21
 8001fe8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d027      	beq.n	8002042 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a25      	ldr	r2, [pc, #148]	; (800208c <HAL_UART_Transmit_DMA+0x114>)
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	4a24      	ldr	r2, [pc, #144]	; (8002090 <HAL_UART_Transmit_DMA+0x118>)
 8002000:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a23      	ldr	r2, [pc, #140]	; (8002094 <HAL_UART_Transmit_DMA+0x11c>)
 8002008:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200e:	2200      	movs	r2, #0
 8002010:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	0019      	movs	r1, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3328      	adds	r3, #40	; 0x28
 8002022:	001a      	movs	r2, r3
 8002024:	1dbb      	adds	r3, r7, #6
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	f7fe feb0 	bl	8000d8c <HAL_DMA_Start_IT>
 800202c:	1e03      	subs	r3, r0, #0
 800202e:	d008      	beq.n	8002042 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2284      	movs	r2, #132	; 0x84
 8002034:	2110      	movs	r1, #16
 8002036:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2220      	movs	r2, #32
 800203c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e01f      	b.n	8002082 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2240      	movs	r2, #64	; 0x40
 8002048:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800204a:	f3ef 8310 	mrs	r3, PRIMASK
 800204e:	613b      	str	r3, [r7, #16]
  return(result);
 8002050:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	2301      	movs	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f383 8810 	msr	PRIMASK, r3
}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2180      	movs	r1, #128	; 0x80
 800206c:	430a      	orrs	r2, r1
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	f383 8810 	msr	PRIMASK, r3
}
 800207a:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b008      	add	sp, #32
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	08002f99 	.word	0x08002f99
 8002090:	0800302d 	.word	0x0800302d
 8002094:	080031bb 	.word	0x080031bb

08002098 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	1dbb      	adds	r3, r7, #6
 80020a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2280      	movs	r2, #128	; 0x80
 80020aa:	589b      	ldr	r3, [r3, r2]
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d145      	bne.n	800213c <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_UART_Receive_DMA+0x26>
 80020b6:	1dbb      	adds	r3, r7, #6
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e03d      	b.n	800213e <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	015b      	lsls	r3, r3, #5
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d109      	bne.n	80020e2 <HAL_UART_Receive_DMA+0x4a>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2201      	movs	r2, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	d001      	beq.n	80020e2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e02d      	b.n	800213e <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	041b      	lsls	r3, r3, #16
 80020f2:	4013      	ands	r3, r2
 80020f4:	d019      	beq.n	800212a <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020f6:	f3ef 8310 	mrs	r3, PRIMASK
 80020fa:	613b      	str	r3, [r7, #16]
  return(result);
 80020fc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	2301      	movs	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f383 8810 	msr	PRIMASK, r3
}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2180      	movs	r1, #128	; 0x80
 8002118:	04c9      	lsls	r1, r1, #19
 800211a:	430a      	orrs	r2, r1
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f383 8810 	msr	PRIMASK, r3
}
 8002128:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800212a:	1dbb      	adds	r3, r7, #6
 800212c:	881a      	ldrh	r2, [r3, #0]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	0018      	movs	r0, r3
 8002134:	f000 fe08 	bl	8002d48 <UART_Start_Receive_DMA>
 8002138:	0003      	movs	r3, r0
 800213a:	e000      	b.n	800213e <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b008      	add	sp, #32
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b0ab      	sub	sp, #172	; 0xac
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	22a4      	movs	r2, #164	; 0xa4
 8002158:	18b9      	adds	r1, r7, r2
 800215a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	20a0      	movs	r0, #160	; 0xa0
 8002164:	1839      	adds	r1, r7, r0
 8002166:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	219c      	movs	r1, #156	; 0x9c
 8002170:	1879      	adds	r1, r7, r1
 8002172:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002174:	0011      	movs	r1, r2
 8002176:	18bb      	adds	r3, r7, r2
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a99      	ldr	r2, [pc, #612]	; (80023e0 <HAL_UART_IRQHandler+0x298>)
 800217c:	4013      	ands	r3, r2
 800217e:	2298      	movs	r2, #152	; 0x98
 8002180:	18bc      	adds	r4, r7, r2
 8002182:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002184:	18bb      	adds	r3, r7, r2
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d114      	bne.n	80021b6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800218c:	187b      	adds	r3, r7, r1
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2220      	movs	r2, #32
 8002192:	4013      	ands	r3, r2
 8002194:	d00f      	beq.n	80021b6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002196:	183b      	adds	r3, r7, r0
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2220      	movs	r2, #32
 800219c:	4013      	ands	r3, r2
 800219e:	d00a      	beq.n	80021b6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d100      	bne.n	80021aa <HAL_UART_IRQHandler+0x62>
 80021a8:	e286      	b.n	80026b8 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	0010      	movs	r0, r2
 80021b2:	4798      	blx	r3
      }
      return;
 80021b4:	e280      	b.n	80026b8 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80021b6:	2398      	movs	r3, #152	; 0x98
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d100      	bne.n	80021c2 <HAL_UART_IRQHandler+0x7a>
 80021c0:	e114      	b.n	80023ec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80021c2:	239c      	movs	r3, #156	; 0x9c
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	d106      	bne.n	80021dc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80021ce:	23a0      	movs	r3, #160	; 0xa0
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a83      	ldr	r2, [pc, #524]	; (80023e4 <HAL_UART_IRQHandler+0x29c>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	d100      	bne.n	80021dc <HAL_UART_IRQHandler+0x94>
 80021da:	e107      	b.n	80023ec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80021dc:	23a4      	movs	r3, #164	; 0xa4
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2201      	movs	r2, #1
 80021e4:	4013      	ands	r3, r2
 80021e6:	d012      	beq.n	800220e <HAL_UART_IRQHandler+0xc6>
 80021e8:	23a0      	movs	r3, #160	; 0xa0
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4013      	ands	r3, r2
 80021f4:	d00b      	beq.n	800220e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2201      	movs	r2, #1
 80021fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2284      	movs	r2, #132	; 0x84
 8002202:	589b      	ldr	r3, [r3, r2]
 8002204:	2201      	movs	r2, #1
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2184      	movs	r1, #132	; 0x84
 800220c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800220e:	23a4      	movs	r3, #164	; 0xa4
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2202      	movs	r2, #2
 8002216:	4013      	ands	r3, r2
 8002218:	d011      	beq.n	800223e <HAL_UART_IRQHandler+0xf6>
 800221a:	239c      	movs	r3, #156	; 0x9c
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2201      	movs	r2, #1
 8002222:	4013      	ands	r3, r2
 8002224:	d00b      	beq.n	800223e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2202      	movs	r2, #2
 800222c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2284      	movs	r2, #132	; 0x84
 8002232:	589b      	ldr	r3, [r3, r2]
 8002234:	2204      	movs	r2, #4
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2184      	movs	r1, #132	; 0x84
 800223c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800223e:	23a4      	movs	r3, #164	; 0xa4
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2204      	movs	r2, #4
 8002246:	4013      	ands	r3, r2
 8002248:	d011      	beq.n	800226e <HAL_UART_IRQHandler+0x126>
 800224a:	239c      	movs	r3, #156	; 0x9c
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2201      	movs	r2, #1
 8002252:	4013      	ands	r3, r2
 8002254:	d00b      	beq.n	800226e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2204      	movs	r2, #4
 800225c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2284      	movs	r2, #132	; 0x84
 8002262:	589b      	ldr	r3, [r3, r2]
 8002264:	2202      	movs	r2, #2
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2184      	movs	r1, #132	; 0x84
 800226c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800226e:	23a4      	movs	r3, #164	; 0xa4
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2208      	movs	r2, #8
 8002276:	4013      	ands	r3, r2
 8002278:	d017      	beq.n	80022aa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800227a:	23a0      	movs	r3, #160	; 0xa0
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2220      	movs	r2, #32
 8002282:	4013      	ands	r3, r2
 8002284:	d105      	bne.n	8002292 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002286:	239c      	movs	r3, #156	; 0x9c
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2201      	movs	r2, #1
 800228e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002290:	d00b      	beq.n	80022aa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2208      	movs	r2, #8
 8002298:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2284      	movs	r2, #132	; 0x84
 800229e:	589b      	ldr	r3, [r3, r2]
 80022a0:	2208      	movs	r2, #8
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2184      	movs	r1, #132	; 0x84
 80022a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80022aa:	23a4      	movs	r3, #164	; 0xa4
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4013      	ands	r3, r2
 80022b6:	d013      	beq.n	80022e0 <HAL_UART_IRQHandler+0x198>
 80022b8:	23a0      	movs	r3, #160	; 0xa0
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	04db      	lsls	r3, r3, #19
 80022c2:	4013      	ands	r3, r2
 80022c4:	d00c      	beq.n	80022e0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2280      	movs	r2, #128	; 0x80
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2284      	movs	r2, #132	; 0x84
 80022d4:	589b      	ldr	r3, [r3, r2]
 80022d6:	2220      	movs	r2, #32
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2184      	movs	r1, #132	; 0x84
 80022de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2284      	movs	r2, #132	; 0x84
 80022e4:	589b      	ldr	r3, [r3, r2]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d100      	bne.n	80022ec <HAL_UART_IRQHandler+0x1a4>
 80022ea:	e1e7      	b.n	80026bc <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80022ec:	23a4      	movs	r3, #164	; 0xa4
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2220      	movs	r2, #32
 80022f4:	4013      	ands	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80022f8:	23a0      	movs	r3, #160	; 0xa0
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2220      	movs	r2, #32
 8002300:	4013      	ands	r3, r2
 8002302:	d008      	beq.n	8002316 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002308:	2b00      	cmp	r3, #0
 800230a:	d004      	beq.n	8002316 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	0010      	movs	r0, r2
 8002314:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2284      	movs	r2, #132	; 0x84
 800231a:	589b      	ldr	r3, [r3, r2]
 800231c:	2194      	movs	r1, #148	; 0x94
 800231e:	187a      	adds	r2, r7, r1
 8002320:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2240      	movs	r2, #64	; 0x40
 800232a:	4013      	ands	r3, r2
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d004      	beq.n	800233a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002330:	187b      	adds	r3, r7, r1
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2228      	movs	r2, #40	; 0x28
 8002336:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002338:	d047      	beq.n	80023ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	0018      	movs	r0, r3
 800233e:	f000 fdc7 	bl	8002ed0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2240      	movs	r2, #64	; 0x40
 800234a:	4013      	ands	r3, r2
 800234c:	2b40      	cmp	r3, #64	; 0x40
 800234e:	d137      	bne.n	80023c0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002350:	f3ef 8310 	mrs	r3, PRIMASK
 8002354:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002358:	2090      	movs	r0, #144	; 0x90
 800235a:	183a      	adds	r2, r7, r0
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	2301      	movs	r3, #1
 8002360:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002364:	f383 8810 	msr	PRIMASK, r3
}
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2140      	movs	r1, #64	; 0x40
 8002376:	438a      	bics	r2, r1
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	183b      	adds	r3, r7, r0
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002380:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002382:	f383 8810 	msr	PRIMASK, r3
}
 8002386:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238c:	2b00      	cmp	r3, #0
 800238e:	d012      	beq.n	80023b6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <HAL_UART_IRQHandler+0x2a0>)
 8002396:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239c:	0018      	movs	r0, r3
 800239e:	f7fe fd93 	bl	8000ec8 <HAL_DMA_Abort_IT>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d01a      	beq.n	80023dc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b0:	0018      	movs	r0, r3
 80023b2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b4:	e012      	b.n	80023dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 f9a5 	bl	8002708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023be:	e00d      	b.n	80023dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 f9a0 	bl	8002708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c8:	e008      	b.n	80023dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 f99b 	bl	8002708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2284      	movs	r2, #132	; 0x84
 80023d6:	2100      	movs	r1, #0
 80023d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80023da:	e16f      	b.n	80026bc <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023dc:	46c0      	nop			; (mov r8, r8)
    return;
 80023de:	e16d      	b.n	80026bc <HAL_UART_IRQHandler+0x574>
 80023e0:	0000080f 	.word	0x0000080f
 80023e4:	04000120 	.word	0x04000120
 80023e8:	0800323f 	.word	0x0800323f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d000      	beq.n	80023f6 <HAL_UART_IRQHandler+0x2ae>
 80023f4:	e139      	b.n	800266a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80023f6:	23a4      	movs	r3, #164	; 0xa4
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2210      	movs	r2, #16
 80023fe:	4013      	ands	r3, r2
 8002400:	d100      	bne.n	8002404 <HAL_UART_IRQHandler+0x2bc>
 8002402:	e132      	b.n	800266a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002404:	23a0      	movs	r3, #160	; 0xa0
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2210      	movs	r2, #16
 800240c:	4013      	ands	r3, r2
 800240e:	d100      	bne.n	8002412 <HAL_UART_IRQHandler+0x2ca>
 8002410:	e12b      	b.n	800266a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2210      	movs	r2, #16
 8002418:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2240      	movs	r2, #64	; 0x40
 8002422:	4013      	ands	r3, r2
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d000      	beq.n	800242a <HAL_UART_IRQHandler+0x2e2>
 8002428:	e09f      	b.n	800256a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	217e      	movs	r1, #126	; 0x7e
 8002434:	187b      	adds	r3, r7, r1
 8002436:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002438:	187b      	adds	r3, r7, r1
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d100      	bne.n	8002442 <HAL_UART_IRQHandler+0x2fa>
 8002440:	e13e      	b.n	80026c0 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2258      	movs	r2, #88	; 0x58
 8002446:	5a9b      	ldrh	r3, [r3, r2]
 8002448:	187a      	adds	r2, r7, r1
 800244a:	8812      	ldrh	r2, [r2, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d300      	bcc.n	8002452 <HAL_UART_IRQHandler+0x30a>
 8002450:	e136      	b.n	80026c0 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	187a      	adds	r2, r7, r1
 8002456:	215a      	movs	r1, #90	; 0x5a
 8002458:	8812      	ldrh	r2, [r2, #0]
 800245a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b20      	cmp	r3, #32
 8002464:	d06f      	beq.n	8002546 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002466:	f3ef 8310 	mrs	r3, PRIMASK
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800246e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002470:	2301      	movs	r3, #1
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002476:	f383 8810 	msr	PRIMASK, r3
}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4992      	ldr	r1, [pc, #584]	; (80026d0 <HAL_UART_IRQHandler+0x588>)
 8002488:	400a      	ands	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800248e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002492:	f383 8810 	msr	PRIMASK, r3
}
 8002496:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002498:	f3ef 8310 	mrs	r3, PRIMASK
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800249e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a0:	677b      	str	r3, [r7, #116]	; 0x74
 80024a2:	2301      	movs	r3, #1
 80024a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a8:	f383 8810 	msr	PRIMASK, r3
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	438a      	bics	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c4:	f383 8810 	msr	PRIMASK, r3
}
 80024c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ca:	f3ef 8310 	mrs	r3, PRIMASK
 80024ce:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80024d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024d2:	673b      	str	r3, [r7, #112]	; 0x70
 80024d4:	2301      	movs	r3, #1
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024da:	f383 8810 	msr	PRIMASK, r3
}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2140      	movs	r1, #64	; 0x40
 80024ec:	438a      	bics	r2, r1
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024f6:	f383 8810 	msr	PRIMASK, r3
}
 80024fa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	2120      	movs	r1, #32
 8002502:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800250a:	f3ef 8310 	mrs	r3, PRIMASK
 800250e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002510:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002514:	2301      	movs	r3, #1
 8002516:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800251a:	f383 8810 	msr	PRIMASK, r3
}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2110      	movs	r1, #16
 800252c:	438a      	bics	r2, r1
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002532:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002536:	f383 8810 	msr	PRIMASK, r3
}
 800253a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002540:	0018      	movs	r0, r3
 8002542:	f7fe fc89 	bl	8000e58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2202      	movs	r2, #2
 800254a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2258      	movs	r2, #88	; 0x58
 8002550:	5a9a      	ldrh	r2, [r3, r2]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	215a      	movs	r1, #90	; 0x5a
 8002556:	5a5b      	ldrh	r3, [r3, r1]
 8002558:	b29b      	uxth	r3, r3
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0011      	movs	r1, r2
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f8d8 	bl	8002718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002568:	e0aa      	b.n	80026c0 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2258      	movs	r2, #88	; 0x58
 800256e:	5a99      	ldrh	r1, [r3, r2]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	225a      	movs	r2, #90	; 0x5a
 8002574:	5a9b      	ldrh	r3, [r3, r2]
 8002576:	b29a      	uxth	r2, r3
 8002578:	208e      	movs	r0, #142	; 0x8e
 800257a:	183b      	adds	r3, r7, r0
 800257c:	1a8a      	subs	r2, r1, r2
 800257e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	225a      	movs	r2, #90	; 0x5a
 8002584:	5a9b      	ldrh	r3, [r3, r2]
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d100      	bne.n	800258e <HAL_UART_IRQHandler+0x446>
 800258c:	e09a      	b.n	80026c4 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800258e:	183b      	adds	r3, r7, r0
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d100      	bne.n	8002598 <HAL_UART_IRQHandler+0x450>
 8002596:	e095      	b.n	80026c4 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002598:	f3ef 8310 	mrs	r3, PRIMASK
 800259c:	60fb      	str	r3, [r7, #12]
  return(result);
 800259e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a0:	2488      	movs	r4, #136	; 0x88
 80025a2:	193a      	adds	r2, r7, r4
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	2301      	movs	r3, #1
 80025a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f383 8810 	msr	PRIMASK, r3
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4945      	ldr	r1, [pc, #276]	; (80026d4 <HAL_UART_IRQHandler+0x58c>)
 80025be:	400a      	ands	r2, r1
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	193b      	adds	r3, r7, r4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f383 8810 	msr	PRIMASK, r3
}
 80025ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d0:	f3ef 8310 	mrs	r3, PRIMASK
 80025d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80025d6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d8:	2484      	movs	r4, #132	; 0x84
 80025da:	193a      	adds	r2, r7, r4
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	2301      	movs	r3, #1
 80025e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f383 8810 	msr	PRIMASK, r3
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2101      	movs	r1, #1
 80025f6:	438a      	bics	r2, r1
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	193b      	adds	r3, r7, r4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	f383 8810 	msr	PRIMASK, r3
}
 8002606:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	2120      	movs	r1, #32
 800260e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261c:	f3ef 8310 	mrs	r3, PRIMASK
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002624:	2480      	movs	r4, #128	; 0x80
 8002626:	193a      	adds	r2, r7, r4
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	2301      	movs	r3, #1
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	f383 8810 	msr	PRIMASK, r3
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2110      	movs	r1, #16
 8002642:	438a      	bics	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	193b      	adds	r3, r7, r4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	f383 8810 	msr	PRIMASK, r3
}
 8002652:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800265a:	183b      	adds	r3, r7, r0
 800265c:	881a      	ldrh	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	0011      	movs	r1, r2
 8002662:	0018      	movs	r0, r3
 8002664:	f000 f858 	bl	8002718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002668:	e02c      	b.n	80026c4 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800266a:	23a4      	movs	r3, #164	; 0xa4
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2280      	movs	r2, #128	; 0x80
 8002672:	4013      	ands	r3, r2
 8002674:	d00f      	beq.n	8002696 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002676:	23a0      	movs	r3, #160	; 0xa0
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	4013      	ands	r3, r2
 8002680:	d009      	beq.n	8002696 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01e      	beq.n	80026c8 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	0010      	movs	r0, r2
 8002692:	4798      	blx	r3
    }
    return;
 8002694:	e018      	b.n	80026c8 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002696:	23a4      	movs	r3, #164	; 0xa4
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2240      	movs	r2, #64	; 0x40
 800269e:	4013      	ands	r3, r2
 80026a0:	d013      	beq.n	80026ca <HAL_UART_IRQHandler+0x582>
 80026a2:	23a0      	movs	r3, #160	; 0xa0
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2240      	movs	r2, #64	; 0x40
 80026aa:	4013      	ands	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fddb 	bl	800326c <UART_EndTransmit_IT>
    return;
 80026b6:	e008      	b.n	80026ca <HAL_UART_IRQHandler+0x582>
      return;
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	e006      	b.n	80026ca <HAL_UART_IRQHandler+0x582>
    return;
 80026bc:	46c0      	nop			; (mov r8, r8)
 80026be:	e004      	b.n	80026ca <HAL_UART_IRQHandler+0x582>
      return;
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	e002      	b.n	80026ca <HAL_UART_IRQHandler+0x582>
      return;
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	e000      	b.n	80026ca <HAL_UART_IRQHandler+0x582>
    return;
 80026c8:	46c0      	nop			; (mov r8, r8)
  }

}
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b02b      	add	sp, #172	; 0xac
 80026ce:	bd90      	pop	{r4, r7, pc}
 80026d0:	fffffeff 	.word	0xfffffeff
 80026d4:	fffffedf 	.word	0xfffffedf

080026d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b002      	add	sp, #8
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	000a      	movs	r2, r1
 8002722:	1cbb      	adds	r3, r7, #2
 8002724:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	b002      	add	sp, #8
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002738:	231e      	movs	r3, #30
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a8d      	ldr	r2, [pc, #564]	; (8002994 <UART_SetConfig+0x264>)
 8002760:	4013      	ands	r3, r2
 8002762:	0019      	movs	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a88      	ldr	r2, [pc, #544]	; (8002998 <UART_SetConfig+0x268>)
 8002776:	4013      	ands	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a7f      	ldr	r2, [pc, #508]	; (800299c <UART_SetConfig+0x26c>)
 800279e:	4013      	ands	r3, r2
 80027a0:	0019      	movs	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a7b      	ldr	r2, [pc, #492]	; (80029a0 <UART_SetConfig+0x270>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d127      	bne.n	8002806 <UART_SetConfig+0xd6>
 80027b6:	4b7b      	ldr	r3, [pc, #492]	; (80029a4 <UART_SetConfig+0x274>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	2203      	movs	r2, #3
 80027bc:	4013      	ands	r3, r2
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d00d      	beq.n	80027de <UART_SetConfig+0xae>
 80027c2:	d81b      	bhi.n	80027fc <UART_SetConfig+0xcc>
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d014      	beq.n	80027f2 <UART_SetConfig+0xc2>
 80027c8:	d818      	bhi.n	80027fc <UART_SetConfig+0xcc>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <UART_SetConfig+0xa4>
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d00a      	beq.n	80027e8 <UART_SetConfig+0xb8>
 80027d2:	e013      	b.n	80027fc <UART_SetConfig+0xcc>
 80027d4:	231f      	movs	r3, #31
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	e021      	b.n	8002822 <UART_SetConfig+0xf2>
 80027de:	231f      	movs	r3, #31
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	2202      	movs	r2, #2
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e01c      	b.n	8002822 <UART_SetConfig+0xf2>
 80027e8:	231f      	movs	r3, #31
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	2204      	movs	r2, #4
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e017      	b.n	8002822 <UART_SetConfig+0xf2>
 80027f2:	231f      	movs	r3, #31
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	2208      	movs	r2, #8
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e012      	b.n	8002822 <UART_SetConfig+0xf2>
 80027fc:	231f      	movs	r3, #31
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	2210      	movs	r2, #16
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e00d      	b.n	8002822 <UART_SetConfig+0xf2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a67      	ldr	r2, [pc, #412]	; (80029a8 <UART_SetConfig+0x278>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d104      	bne.n	800281a <UART_SetConfig+0xea>
 8002810:	231f      	movs	r3, #31
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
 8002818:	e003      	b.n	8002822 <UART_SetConfig+0xf2>
 800281a:	231f      	movs	r3, #31
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2210      	movs	r2, #16
 8002820:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69da      	ldr	r2, [r3, #28]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	429a      	cmp	r2, r3
 800282c:	d15c      	bne.n	80028e8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800282e:	231f      	movs	r3, #31
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d015      	beq.n	8002864 <UART_SetConfig+0x134>
 8002838:	dc18      	bgt.n	800286c <UART_SetConfig+0x13c>
 800283a:	2b04      	cmp	r3, #4
 800283c:	d00d      	beq.n	800285a <UART_SetConfig+0x12a>
 800283e:	dc15      	bgt.n	800286c <UART_SetConfig+0x13c>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <UART_SetConfig+0x11a>
 8002844:	2b02      	cmp	r3, #2
 8002846:	d005      	beq.n	8002854 <UART_SetConfig+0x124>
 8002848:	e010      	b.n	800286c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800284a:	f7ff fa5d 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 800284e:	0003      	movs	r3, r0
 8002850:	61bb      	str	r3, [r7, #24]
        break;
 8002852:	e012      	b.n	800287a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002854:	4b55      	ldr	r3, [pc, #340]	; (80029ac <UART_SetConfig+0x27c>)
 8002856:	61bb      	str	r3, [r7, #24]
        break;
 8002858:	e00f      	b.n	800287a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800285a:	f7ff f9f5 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 800285e:	0003      	movs	r3, r0
 8002860:	61bb      	str	r3, [r7, #24]
        break;
 8002862:	e00a      	b.n	800287a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	61bb      	str	r3, [r7, #24]
        break;
 800286a:	e006      	b.n	800287a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002870:	231e      	movs	r3, #30
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	2201      	movs	r2, #1
 8002876:	701a      	strb	r2, [r3, #0]
        break;
 8002878:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d100      	bne.n	8002882 <UART_SetConfig+0x152>
 8002880:	e07a      	b.n	8002978 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	005a      	lsls	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	18d2      	adds	r2, r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	0019      	movs	r1, r3
 8002894:	0010      	movs	r0, r2
 8002896:	f7fd fc49 	bl	800012c <__udivsi3>
 800289a:	0003      	movs	r3, r0
 800289c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b0f      	cmp	r3, #15
 80028a2:	d91c      	bls.n	80028de <UART_SetConfig+0x1ae>
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	025b      	lsls	r3, r3, #9
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d217      	bcs.n	80028de <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	200e      	movs	r0, #14
 80028b4:	183b      	adds	r3, r7, r0
 80028b6:	210f      	movs	r1, #15
 80028b8:	438a      	bics	r2, r1
 80028ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	085b      	lsrs	r3, r3, #1
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2207      	movs	r2, #7
 80028c4:	4013      	ands	r3, r2
 80028c6:	b299      	uxth	r1, r3
 80028c8:	183b      	adds	r3, r7, r0
 80028ca:	183a      	adds	r2, r7, r0
 80028cc:	8812      	ldrh	r2, [r2, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	183a      	adds	r2, r7, r0
 80028d8:	8812      	ldrh	r2, [r2, #0]
 80028da:	60da      	str	r2, [r3, #12]
 80028dc:	e04c      	b.n	8002978 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80028de:	231e      	movs	r3, #30
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e047      	b.n	8002978 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028e8:	231f      	movs	r3, #31
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d015      	beq.n	800291e <UART_SetConfig+0x1ee>
 80028f2:	dc18      	bgt.n	8002926 <UART_SetConfig+0x1f6>
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d00d      	beq.n	8002914 <UART_SetConfig+0x1e4>
 80028f8:	dc15      	bgt.n	8002926 <UART_SetConfig+0x1f6>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <UART_SetConfig+0x1d4>
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d005      	beq.n	800290e <UART_SetConfig+0x1de>
 8002902:	e010      	b.n	8002926 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002904:	f7ff fa00 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8002908:	0003      	movs	r3, r0
 800290a:	61bb      	str	r3, [r7, #24]
        break;
 800290c:	e012      	b.n	8002934 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800290e:	4b27      	ldr	r3, [pc, #156]	; (80029ac <UART_SetConfig+0x27c>)
 8002910:	61bb      	str	r3, [r7, #24]
        break;
 8002912:	e00f      	b.n	8002934 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002914:	f7ff f998 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8002918:	0003      	movs	r3, r0
 800291a:	61bb      	str	r3, [r7, #24]
        break;
 800291c:	e00a      	b.n	8002934 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	61bb      	str	r3, [r7, #24]
        break;
 8002924:	e006      	b.n	8002934 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800292a:	231e      	movs	r3, #30
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
        break;
 8002932:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d01e      	beq.n	8002978 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	085a      	lsrs	r2, r3, #1
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	18d2      	adds	r2, r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0019      	movs	r1, r3
 800294a:	0010      	movs	r0, r2
 800294c:	f7fd fbee 	bl	800012c <__udivsi3>
 8002950:	0003      	movs	r3, r0
 8002952:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	d90a      	bls.n	8002970 <UART_SetConfig+0x240>
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	025b      	lsls	r3, r3, #9
 8002960:	429a      	cmp	r2, r3
 8002962:	d205      	bcs.n	8002970 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	e003      	b.n	8002978 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8002970:	231e      	movs	r3, #30
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002984:	231e      	movs	r3, #30
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	781b      	ldrb	r3, [r3, #0]
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b008      	add	sp, #32
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	ffff69f3 	.word	0xffff69f3
 8002998:	ffffcfff 	.word	0xffffcfff
 800299c:	fffff4ff 	.word	0xfffff4ff
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40004400 	.word	0x40004400
 80029ac:	007a1200 	.word	0x007a1200

080029b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2208      	movs	r2, #8
 80029be:	4013      	ands	r3, r2
 80029c0:	d00b      	beq.n	80029da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a4a      	ldr	r2, [pc, #296]	; (8002af4 <UART_AdvFeatureConfig+0x144>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	2201      	movs	r2, #1
 80029e0:	4013      	ands	r3, r2
 80029e2:	d00b      	beq.n	80029fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a43      	ldr	r2, [pc, #268]	; (8002af8 <UART_AdvFeatureConfig+0x148>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	2202      	movs	r2, #2
 8002a02:	4013      	ands	r3, r2
 8002a04:	d00b      	beq.n	8002a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a3b      	ldr	r2, [pc, #236]	; (8002afc <UART_AdvFeatureConfig+0x14c>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	2204      	movs	r2, #4
 8002a24:	4013      	ands	r3, r2
 8002a26:	d00b      	beq.n	8002a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <UART_AdvFeatureConfig+0x150>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	0019      	movs	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2210      	movs	r2, #16
 8002a46:	4013      	ands	r3, r2
 8002a48:	d00b      	beq.n	8002a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a2c      	ldr	r2, [pc, #176]	; (8002b04 <UART_AdvFeatureConfig+0x154>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	2220      	movs	r2, #32
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d00b      	beq.n	8002a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	4a25      	ldr	r2, [pc, #148]	; (8002b08 <UART_AdvFeatureConfig+0x158>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	0019      	movs	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	2240      	movs	r2, #64	; 0x40
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d01d      	beq.n	8002aca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <UART_AdvFeatureConfig+0x15c>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	035b      	lsls	r3, r3, #13
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d10b      	bne.n	8002aca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <UART_AdvFeatureConfig+0x160>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	0019      	movs	r1, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d00b      	beq.n	8002aec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <UART_AdvFeatureConfig+0x164>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	0019      	movs	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	605a      	str	r2, [r3, #4]
  }
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	ffff7fff 	.word	0xffff7fff
 8002af8:	fffdffff 	.word	0xfffdffff
 8002afc:	fffeffff 	.word	0xfffeffff
 8002b00:	fffbffff 	.word	0xfffbffff
 8002b04:	ffffefff 	.word	0xffffefff
 8002b08:	ffffdfff 	.word	0xffffdfff
 8002b0c:	ffefffff 	.word	0xffefffff
 8002b10:	ff9fffff 	.word	0xff9fffff
 8002b14:	fff7ffff 	.word	0xfff7ffff

08002b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b092      	sub	sp, #72	; 0x48
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2284      	movs	r2, #132	; 0x84
 8002b24:	2100      	movs	r1, #0
 8002b26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b28:	f7fe f800 	bl	8000b2c <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2208      	movs	r2, #8
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d12c      	bne.n	8002b98 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b40:	2280      	movs	r2, #128	; 0x80
 8002b42:	0391      	lsls	r1, r2, #14
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4a46      	ldr	r2, [pc, #280]	; (8002c60 <UART_CheckIdleState+0x148>)
 8002b48:	9200      	str	r2, [sp, #0]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f000 f88c 	bl	8002c68 <UART_WaitOnFlagUntilTimeout>
 8002b50:	1e03      	subs	r3, r0, #0
 8002b52:	d021      	beq.n	8002b98 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b54:	f3ef 8310 	mrs	r3, PRIMASK
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b5e:	2301      	movs	r3, #1
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	438a      	bics	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2278      	movs	r2, #120	; 0x78
 8002b90:	2100      	movs	r1, #0
 8002b92:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e05f      	b.n	8002c58 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d146      	bne.n	8002c34 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	03d1      	lsls	r1, r2, #15
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4a2c      	ldr	r2, [pc, #176]	; (8002c60 <UART_CheckIdleState+0x148>)
 8002bb0:	9200      	str	r2, [sp, #0]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f000 f858 	bl	8002c68 <UART_WaitOnFlagUntilTimeout>
 8002bb8:	1e03      	subs	r3, r0, #0
 8002bba:	d03b      	beq.n	8002c34 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f383 8810 	msr	PRIMASK, r3
}
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4921      	ldr	r1, [pc, #132]	; (8002c64 <UART_CheckIdleState+0x14c>)
 8002bde:	400a      	ands	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f383 8810 	msr	PRIMASK, r3
}
 8002bec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bee:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf2:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bf4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f383 8810 	msr	PRIMASK, r3
}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2101      	movs	r1, #1
 8002c10:	438a      	bics	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	f383 8810 	msr	PRIMASK, r3
}
 8002c1e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	2120      	movs	r1, #32
 8002c26:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2278      	movs	r2, #120	; 0x78
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e011      	b.n	8002c58 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2280      	movs	r2, #128	; 0x80
 8002c3e:	2120      	movs	r1, #32
 8002c40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2278      	movs	r2, #120	; 0x78
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b010      	add	sp, #64	; 0x40
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	01ffffff 	.word	0x01ffffff
 8002c64:	fffffedf 	.word	0xfffffedf

08002c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	1dfb      	adds	r3, r7, #7
 8002c76:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c78:	e051      	b.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	d04e      	beq.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c80:	f7fd ff54 	bl	8000b2c <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d302      	bcc.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e051      	b.n	8002d3e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d03b      	beq.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d038      	beq.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b40      	cmp	r3, #64	; 0x40
 8002cb0:	d035      	beq.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	2208      	movs	r2, #8
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d111      	bne.n	8002ce4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 f900 	bl	8002ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2284      	movs	r2, #132	; 0x84
 8002cd4:	2108      	movs	r1, #8
 8002cd6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2278      	movs	r2, #120	; 0x78
 8002cdc:	2100      	movs	r1, #0
 8002cde:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e02c      	b.n	8002d3e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	401a      	ands	r2, r3
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d112      	bne.n	8002d1e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2280      	movs	r2, #128	; 0x80
 8002cfe:	0112      	lsls	r2, r2, #4
 8002d00:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f8e3 	bl	8002ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2284      	movs	r2, #132	; 0x84
 8002d0e:	2120      	movs	r1, #32
 8002d10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2278      	movs	r2, #120	; 0x78
 8002d16:	2100      	movs	r1, #0
 8002d18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e00f      	b.n	8002d3e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	4013      	ands	r3, r2
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	425a      	negs	r2, r3
 8002d2e:	4153      	adcs	r3, r2
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	001a      	movs	r2, r3
 8002d34:	1dfb      	adds	r3, r7, #7
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d09e      	beq.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b004      	add	sp, #16
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b090      	sub	sp, #64	; 0x40
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	1dbb      	adds	r3, r7, #6
 8002d54:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1dba      	adds	r2, r7, #6
 8002d60:	2158      	movs	r1, #88	; 0x58
 8002d62:	8812      	ldrh	r2, [r2, #0]
 8002d64:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2284      	movs	r2, #132	; 0x84
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	2122      	movs	r1, #34	; 0x22
 8002d74:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d028      	beq.n	8002dd0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d82:	4a3e      	ldr	r2, [pc, #248]	; (8002e7c <UART_Start_Receive_DMA+0x134>)
 8002d84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8a:	4a3d      	ldr	r2, [pc, #244]	; (8002e80 <UART_Start_Receive_DMA+0x138>)
 8002d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	4a3c      	ldr	r2, [pc, #240]	; (8002e84 <UART_Start_Receive_DMA+0x13c>)
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3324      	adds	r3, #36	; 0x24
 8002da8:	0019      	movs	r1, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dae:	001a      	movs	r2, r3
 8002db0:	1dbb      	adds	r3, r7, #6
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	f7fd ffea 	bl	8000d8c <HAL_DMA_Start_IT>
 8002db8:	1e03      	subs	r3, r0, #0
 8002dba:	d009      	beq.n	8002dd0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2284      	movs	r2, #132	; 0x84
 8002dc0:	2110      	movs	r1, #16
 8002dc2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	2120      	movs	r1, #32
 8002dca:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e050      	b.n	8002e72 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d019      	beq.n	8002e0c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de2:	2301      	movs	r3, #1
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	f383 8810 	msr	PRIMASK, r3
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	0049      	lsls	r1, r1, #1
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	f383 8810 	msr	PRIMASK, r3
}
 8002e0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e10:	613b      	str	r3, [r7, #16]
  return(result);
 8002e12:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e14:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e16:	2301      	movs	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f383 8810 	msr	PRIMASK, r3
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f383 8810 	msr	PRIMASK, r3
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e42:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e44:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
 8002e48:	2301      	movs	r3, #1
 8002e4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	f383 8810 	msr	PRIMASK, r3
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2140      	movs	r1, #64	; 0x40
 8002e60:	430a      	orrs	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	f383 8810 	msr	PRIMASK, r3
}
 8002e6e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b010      	add	sp, #64	; 0x40
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	0800304d 	.word	0x0800304d
 8002e80:	08003179 	.word	0x08003179
 8002e84:	080031bb 	.word	0x080031bb

08002e88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e90:	f3ef 8310 	mrs	r3, PRIMASK
 8002e94:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e96:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f383 8810 	msr	PRIMASK, r3
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	21c0      	movs	r1, #192	; 0xc0
 8002eb2:	438a      	bics	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f383 8810 	msr	PRIMASK, r3
}
 8002ec0:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b006      	add	sp, #24
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08e      	sub	sp, #56	; 0x38
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8002edc:	617b      	str	r3, [r7, #20]
  return(result);
 8002ede:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f383 8810 	msr	PRIMASK, r3
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4926      	ldr	r1, [pc, #152]	; (8002f94 <UART_EndRxTransfer+0xc4>)
 8002efa:	400a      	ands	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0e:	623b      	str	r3, [r7, #32]
  return(result);
 8002f10:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
 8002f14:	2301      	movs	r3, #1
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f383 8810 	msr	PRIMASK, r3
}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	f383 8810 	msr	PRIMASK, r3
}
 8002f3a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d118      	bne.n	8002f76 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f44:	f3ef 8310 	mrs	r3, PRIMASK
 8002f48:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f4e:	2301      	movs	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f383 8810 	msr	PRIMASK, r3
}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2110      	movs	r1, #16
 8002f66:	438a      	bics	r2, r1
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f383 8810 	msr	PRIMASK, r3
}
 8002f74:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2280      	movs	r2, #128	; 0x80
 8002f7a:	2120      	movs	r1, #32
 8002f7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b00e      	add	sp, #56	; 0x38
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	fffffedf 	.word	0xfffffedf

08002f98 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	; 0x30
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d035      	beq.n	800301a <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	2252      	movs	r2, #82	; 0x52
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fba:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fbc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f383 8810 	msr	PRIMASK, r3
}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	438a      	bics	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f383 8810 	msr	PRIMASK, r3
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fec:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fee:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f383 8810 	msr	PRIMASK, r3
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2140      	movs	r1, #64	; 0x40
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	f383 8810 	msr	PRIMASK, r3
}
 8003018:	e004      	b.n	8003024 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	0018      	movs	r0, r3
 800301e:	f7fd fb4b 	bl	80006b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46c0      	nop			; (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b00c      	add	sp, #48	; 0x30
 800302a:	bd80      	pop	{r7, pc}

0800302c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff fb4b 	bl	80026d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b004      	add	sp, #16
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b094      	sub	sp, #80	; 0x50
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b20      	cmp	r3, #32
 8003060:	d06f      	beq.n	8003142 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003064:	225a      	movs	r2, #90	; 0x5a
 8003066:	2100      	movs	r1, #0
 8003068:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800306a:	f3ef 8310 	mrs	r3, PRIMASK
 800306e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003070:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003072:	64bb      	str	r3, [r7, #72]	; 0x48
 8003074:	2301      	movs	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f383 8810 	msr	PRIMASK, r3
}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	493a      	ldr	r1, [pc, #232]	; (8003174 <UART_DMAReceiveCplt+0x128>)
 800308c:	400a      	ands	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003092:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	f383 8810 	msr	PRIMASK, r3
}
 800309a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309c:	f3ef 8310 	mrs	r3, PRIMASK
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a4:	647b      	str	r3, [r7, #68]	; 0x44
 80030a6:	2301      	movs	r3, #1
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	f383 8810 	msr	PRIMASK, r3
}
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2101      	movs	r1, #1
 80030be:	438a      	bics	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	f383 8810 	msr	PRIMASK, r3
}
 80030cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ce:	f3ef 8310 	mrs	r3, PRIMASK
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030d6:	643b      	str	r3, [r7, #64]	; 0x40
 80030d8:	2301      	movs	r3, #1
 80030da:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030de:	f383 8810 	msr	PRIMASK, r3
}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	438a      	bics	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	f383 8810 	msr	PRIMASK, r3
}
 80030fe:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003102:	2280      	movs	r2, #128	; 0x80
 8003104:	2120      	movs	r1, #32
 8003106:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310c:	2b01      	cmp	r3, #1
 800310e:	d118      	bne.n	8003142 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003110:	f3ef 8310 	mrs	r3, PRIMASK
 8003114:	60fb      	str	r3, [r7, #12]
  return(result);
 8003116:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800311a:	2301      	movs	r3, #1
 800311c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f383 8810 	msr	PRIMASK, r3
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2110      	movs	r1, #16
 8003132:	438a      	bics	r2, r1
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003138:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f383 8810 	msr	PRIMASK, r3
}
 8003140:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003144:	2200      	movs	r2, #0
 8003146:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314c:	2b01      	cmp	r3, #1
 800314e:	d108      	bne.n	8003162 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003152:	2258      	movs	r2, #88	; 0x58
 8003154:	5a9a      	ldrh	r2, [r3, r2]
 8003156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003158:	0011      	movs	r1, r2
 800315a:	0018      	movs	r0, r3
 800315c:	f7ff fadc 	bl	8002718 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003160:	e003      	b.n	800316a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003164:	0018      	movs	r0, r3
 8003166:	f7ff fabf 	bl	80026e8 <HAL_UART_RxCpltCallback>
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	b014      	add	sp, #80	; 0x50
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	fffffeff 	.word	0xfffffeff

08003178 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10a      	bne.n	80031aa <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2258      	movs	r2, #88	; 0x58
 8003198:	5a9b      	ldrh	r3, [r3, r2]
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	0011      	movs	r1, r2
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7ff fab8 	bl	8002718 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031a8:	e003      	b.n	80031b2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7ff faa3 	bl	80026f8 <HAL_UART_RxHalfCpltCallback>
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b004      	add	sp, #16
 80031b8:	bd80      	pop	{r7, pc}

080031ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b086      	sub	sp, #24
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031cc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	589b      	ldr	r3, [r3, r2]
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	4013      	ands	r3, r2
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d10a      	bne.n	80031fa <UART_DMAError+0x40>
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b21      	cmp	r3, #33	; 0x21
 80031e8:	d107      	bne.n	80031fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2252      	movs	r2, #82	; 0x52
 80031ee:	2100      	movs	r1, #0
 80031f0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7ff fe47 	bl	8002e88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2240      	movs	r2, #64	; 0x40
 8003202:	4013      	ands	r3, r2
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d10a      	bne.n	800321e <UART_DMAError+0x64>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b22      	cmp	r3, #34	; 0x22
 800320c:	d107      	bne.n	800321e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	225a      	movs	r2, #90	; 0x5a
 8003212:	2100      	movs	r1, #0
 8003214:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff fe59 	bl	8002ed0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2284      	movs	r2, #132	; 0x84
 8003222:	589b      	ldr	r3, [r3, r2]
 8003224:	2210      	movs	r2, #16
 8003226:	431a      	orrs	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2184      	movs	r1, #132	; 0x84
 800322c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff fa69 	bl	8002708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b006      	add	sp, #24
 800323c:	bd80      	pop	{r7, pc}

0800323e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	225a      	movs	r2, #90	; 0x5a
 8003250:	2100      	movs	r1, #0
 8003252:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2252      	movs	r2, #82	; 0x52
 8003258:	2100      	movs	r1, #0
 800325a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	0018      	movs	r0, r3
 8003260:	f7ff fa52 	bl	8002708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b004      	add	sp, #16
 800326a:	bd80      	pop	{r7, pc}

0800326c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003274:	f3ef 8310 	mrs	r3, PRIMASK
 8003278:	60bb      	str	r3, [r7, #8]
  return(result);
 800327a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	2301      	movs	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f383 8810 	msr	PRIMASK, r3
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2140      	movs	r1, #64	; 0x40
 8003296:	438a      	bics	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f383 8810 	msr	PRIMASK, r3
}
 80032a4:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7fd f9ff 	bl	80006b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b006      	add	sp, #24
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <__errno>:
 80032c4:	4b01      	ldr	r3, [pc, #4]	; (80032cc <__errno+0x8>)
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	4770      	bx	lr
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	2000000c 	.word	0x2000000c

080032d0 <__libc_init_array>:
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	2600      	movs	r6, #0
 80032d4:	4d0c      	ldr	r5, [pc, #48]	; (8003308 <__libc_init_array+0x38>)
 80032d6:	4c0d      	ldr	r4, [pc, #52]	; (800330c <__libc_init_array+0x3c>)
 80032d8:	1b64      	subs	r4, r4, r5
 80032da:	10a4      	asrs	r4, r4, #2
 80032dc:	42a6      	cmp	r6, r4
 80032de:	d109      	bne.n	80032f4 <__libc_init_array+0x24>
 80032e0:	2600      	movs	r6, #0
 80032e2:	f000 fcc9 	bl	8003c78 <_init>
 80032e6:	4d0a      	ldr	r5, [pc, #40]	; (8003310 <__libc_init_array+0x40>)
 80032e8:	4c0a      	ldr	r4, [pc, #40]	; (8003314 <__libc_init_array+0x44>)
 80032ea:	1b64      	subs	r4, r4, r5
 80032ec:	10a4      	asrs	r4, r4, #2
 80032ee:	42a6      	cmp	r6, r4
 80032f0:	d105      	bne.n	80032fe <__libc_init_array+0x2e>
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	00b3      	lsls	r3, r6, #2
 80032f6:	58eb      	ldr	r3, [r5, r3]
 80032f8:	4798      	blx	r3
 80032fa:	3601      	adds	r6, #1
 80032fc:	e7ee      	b.n	80032dc <__libc_init_array+0xc>
 80032fe:	00b3      	lsls	r3, r6, #2
 8003300:	58eb      	ldr	r3, [r5, r3]
 8003302:	4798      	blx	r3
 8003304:	3601      	adds	r6, #1
 8003306:	e7f2      	b.n	80032ee <__libc_init_array+0x1e>
 8003308:	08003d10 	.word	0x08003d10
 800330c:	08003d10 	.word	0x08003d10
 8003310:	08003d10 	.word	0x08003d10
 8003314:	08003d14 	.word	0x08003d14

08003318 <memset>:
 8003318:	0003      	movs	r3, r0
 800331a:	1882      	adds	r2, r0, r2
 800331c:	4293      	cmp	r3, r2
 800331e:	d100      	bne.n	8003322 <memset+0xa>
 8003320:	4770      	bx	lr
 8003322:	7019      	strb	r1, [r3, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	e7f9      	b.n	800331c <memset+0x4>

08003328 <sniprintf>:
 8003328:	b40c      	push	{r2, r3}
 800332a:	b530      	push	{r4, r5, lr}
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <sniprintf+0x64>)
 800332e:	000c      	movs	r4, r1
 8003330:	681d      	ldr	r5, [r3, #0]
 8003332:	b09d      	sub	sp, #116	; 0x74
 8003334:	2900      	cmp	r1, #0
 8003336:	da08      	bge.n	800334a <sniprintf+0x22>
 8003338:	238b      	movs	r3, #139	; 0x8b
 800333a:	2001      	movs	r0, #1
 800333c:	602b      	str	r3, [r5, #0]
 800333e:	4240      	negs	r0, r0
 8003340:	b01d      	add	sp, #116	; 0x74
 8003342:	bc30      	pop	{r4, r5}
 8003344:	bc08      	pop	{r3}
 8003346:	b002      	add	sp, #8
 8003348:	4718      	bx	r3
 800334a:	2382      	movs	r3, #130	; 0x82
 800334c:	466a      	mov	r2, sp
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	8293      	strh	r3, [r2, #20]
 8003352:	2300      	movs	r3, #0
 8003354:	9002      	str	r0, [sp, #8]
 8003356:	9006      	str	r0, [sp, #24]
 8003358:	4299      	cmp	r1, r3
 800335a:	d000      	beq.n	800335e <sniprintf+0x36>
 800335c:	1e4b      	subs	r3, r1, #1
 800335e:	9304      	str	r3, [sp, #16]
 8003360:	9307      	str	r3, [sp, #28]
 8003362:	2301      	movs	r3, #1
 8003364:	466a      	mov	r2, sp
 8003366:	425b      	negs	r3, r3
 8003368:	82d3      	strh	r3, [r2, #22]
 800336a:	0028      	movs	r0, r5
 800336c:	ab21      	add	r3, sp, #132	; 0x84
 800336e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003370:	a902      	add	r1, sp, #8
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	f000 f898 	bl	80034a8 <_svfiprintf_r>
 8003378:	1c43      	adds	r3, r0, #1
 800337a:	da01      	bge.n	8003380 <sniprintf+0x58>
 800337c:	238b      	movs	r3, #139	; 0x8b
 800337e:	602b      	str	r3, [r5, #0]
 8003380:	2c00      	cmp	r4, #0
 8003382:	d0dd      	beq.n	8003340 <sniprintf+0x18>
 8003384:	2300      	movs	r3, #0
 8003386:	9a02      	ldr	r2, [sp, #8]
 8003388:	7013      	strb	r3, [r2, #0]
 800338a:	e7d9      	b.n	8003340 <sniprintf+0x18>
 800338c:	2000000c 	.word	0x2000000c

08003390 <strncpy>:
 8003390:	0003      	movs	r3, r0
 8003392:	b530      	push	{r4, r5, lr}
 8003394:	001d      	movs	r5, r3
 8003396:	2a00      	cmp	r2, #0
 8003398:	d006      	beq.n	80033a8 <strncpy+0x18>
 800339a:	780c      	ldrb	r4, [r1, #0]
 800339c:	3a01      	subs	r2, #1
 800339e:	3301      	adds	r3, #1
 80033a0:	702c      	strb	r4, [r5, #0]
 80033a2:	3101      	adds	r1, #1
 80033a4:	2c00      	cmp	r4, #0
 80033a6:	d1f5      	bne.n	8003394 <strncpy+0x4>
 80033a8:	2100      	movs	r1, #0
 80033aa:	189a      	adds	r2, r3, r2
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d100      	bne.n	80033b2 <strncpy+0x22>
 80033b0:	bd30      	pop	{r4, r5, pc}
 80033b2:	7019      	strb	r1, [r3, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	e7f9      	b.n	80033ac <strncpy+0x1c>

080033b8 <strstr>:
 80033b8:	780a      	ldrb	r2, [r1, #0]
 80033ba:	b530      	push	{r4, r5, lr}
 80033bc:	2a00      	cmp	r2, #0
 80033be:	d10c      	bne.n	80033da <strstr+0x22>
 80033c0:	bd30      	pop	{r4, r5, pc}
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d108      	bne.n	80033d8 <strstr+0x20>
 80033c6:	2301      	movs	r3, #1
 80033c8:	5ccc      	ldrb	r4, [r1, r3]
 80033ca:	2c00      	cmp	r4, #0
 80033cc:	d0f8      	beq.n	80033c0 <strstr+0x8>
 80033ce:	5cc5      	ldrb	r5, [r0, r3]
 80033d0:	42a5      	cmp	r5, r4
 80033d2:	d101      	bne.n	80033d8 <strstr+0x20>
 80033d4:	3301      	adds	r3, #1
 80033d6:	e7f7      	b.n	80033c8 <strstr+0x10>
 80033d8:	3001      	adds	r0, #1
 80033da:	7803      	ldrb	r3, [r0, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f0      	bne.n	80033c2 <strstr+0xa>
 80033e0:	0018      	movs	r0, r3
 80033e2:	e7ed      	b.n	80033c0 <strstr+0x8>

080033e4 <__ssputs_r>:
 80033e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e6:	688e      	ldr	r6, [r1, #8]
 80033e8:	b085      	sub	sp, #20
 80033ea:	0007      	movs	r7, r0
 80033ec:	000c      	movs	r4, r1
 80033ee:	9203      	str	r2, [sp, #12]
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	429e      	cmp	r6, r3
 80033f4:	d83c      	bhi.n	8003470 <__ssputs_r+0x8c>
 80033f6:	2390      	movs	r3, #144	; 0x90
 80033f8:	898a      	ldrh	r2, [r1, #12]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	421a      	tst	r2, r3
 80033fe:	d034      	beq.n	800346a <__ssputs_r+0x86>
 8003400:	6909      	ldr	r1, [r1, #16]
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	6960      	ldr	r0, [r4, #20]
 8003406:	1a5b      	subs	r3, r3, r1
 8003408:	9302      	str	r3, [sp, #8]
 800340a:	2303      	movs	r3, #3
 800340c:	4343      	muls	r3, r0
 800340e:	0fdd      	lsrs	r5, r3, #31
 8003410:	18ed      	adds	r5, r5, r3
 8003412:	9b01      	ldr	r3, [sp, #4]
 8003414:	9802      	ldr	r0, [sp, #8]
 8003416:	3301      	adds	r3, #1
 8003418:	181b      	adds	r3, r3, r0
 800341a:	106d      	asrs	r5, r5, #1
 800341c:	42ab      	cmp	r3, r5
 800341e:	d900      	bls.n	8003422 <__ssputs_r+0x3e>
 8003420:	001d      	movs	r5, r3
 8003422:	0553      	lsls	r3, r2, #21
 8003424:	d532      	bpl.n	800348c <__ssputs_r+0xa8>
 8003426:	0029      	movs	r1, r5
 8003428:	0038      	movs	r0, r7
 800342a:	f000 fb53 	bl	8003ad4 <_malloc_r>
 800342e:	1e06      	subs	r6, r0, #0
 8003430:	d109      	bne.n	8003446 <__ssputs_r+0x62>
 8003432:	230c      	movs	r3, #12
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	2340      	movs	r3, #64	; 0x40
 8003438:	2001      	movs	r0, #1
 800343a:	89a2      	ldrh	r2, [r4, #12]
 800343c:	4240      	negs	r0, r0
 800343e:	4313      	orrs	r3, r2
 8003440:	81a3      	strh	r3, [r4, #12]
 8003442:	b005      	add	sp, #20
 8003444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003446:	9a02      	ldr	r2, [sp, #8]
 8003448:	6921      	ldr	r1, [r4, #16]
 800344a:	f000 faba 	bl	80039c2 <memcpy>
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <__ssputs_r+0xc0>)
 8003452:	401a      	ands	r2, r3
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	4313      	orrs	r3, r2
 8003458:	81a3      	strh	r3, [r4, #12]
 800345a:	9b02      	ldr	r3, [sp, #8]
 800345c:	6126      	str	r6, [r4, #16]
 800345e:	18f6      	adds	r6, r6, r3
 8003460:	6026      	str	r6, [r4, #0]
 8003462:	6165      	str	r5, [r4, #20]
 8003464:	9e01      	ldr	r6, [sp, #4]
 8003466:	1aed      	subs	r5, r5, r3
 8003468:	60a5      	str	r5, [r4, #8]
 800346a:	9b01      	ldr	r3, [sp, #4]
 800346c:	429e      	cmp	r6, r3
 800346e:	d900      	bls.n	8003472 <__ssputs_r+0x8e>
 8003470:	9e01      	ldr	r6, [sp, #4]
 8003472:	0032      	movs	r2, r6
 8003474:	9903      	ldr	r1, [sp, #12]
 8003476:	6820      	ldr	r0, [r4, #0]
 8003478:	f000 faac 	bl	80039d4 <memmove>
 800347c:	68a3      	ldr	r3, [r4, #8]
 800347e:	2000      	movs	r0, #0
 8003480:	1b9b      	subs	r3, r3, r6
 8003482:	60a3      	str	r3, [r4, #8]
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	199e      	adds	r6, r3, r6
 8003488:	6026      	str	r6, [r4, #0]
 800348a:	e7da      	b.n	8003442 <__ssputs_r+0x5e>
 800348c:	002a      	movs	r2, r5
 800348e:	0038      	movs	r0, r7
 8003490:	f000 fb96 	bl	8003bc0 <_realloc_r>
 8003494:	1e06      	subs	r6, r0, #0
 8003496:	d1e0      	bne.n	800345a <__ssputs_r+0x76>
 8003498:	0038      	movs	r0, r7
 800349a:	6921      	ldr	r1, [r4, #16]
 800349c:	f000 faae 	bl	80039fc <_free_r>
 80034a0:	e7c7      	b.n	8003432 <__ssputs_r+0x4e>
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	fffffb7f 	.word	0xfffffb7f

080034a8 <_svfiprintf_r>:
 80034a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034aa:	b0a1      	sub	sp, #132	; 0x84
 80034ac:	9003      	str	r0, [sp, #12]
 80034ae:	001d      	movs	r5, r3
 80034b0:	898b      	ldrh	r3, [r1, #12]
 80034b2:	000f      	movs	r7, r1
 80034b4:	0016      	movs	r6, r2
 80034b6:	061b      	lsls	r3, r3, #24
 80034b8:	d511      	bpl.n	80034de <_svfiprintf_r+0x36>
 80034ba:	690b      	ldr	r3, [r1, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10e      	bne.n	80034de <_svfiprintf_r+0x36>
 80034c0:	2140      	movs	r1, #64	; 0x40
 80034c2:	f000 fb07 	bl	8003ad4 <_malloc_r>
 80034c6:	6038      	str	r0, [r7, #0]
 80034c8:	6138      	str	r0, [r7, #16]
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d105      	bne.n	80034da <_svfiprintf_r+0x32>
 80034ce:	230c      	movs	r3, #12
 80034d0:	9a03      	ldr	r2, [sp, #12]
 80034d2:	3801      	subs	r0, #1
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	b021      	add	sp, #132	; 0x84
 80034d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034da:	2340      	movs	r3, #64	; 0x40
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	2300      	movs	r3, #0
 80034e0:	ac08      	add	r4, sp, #32
 80034e2:	6163      	str	r3, [r4, #20]
 80034e4:	3320      	adds	r3, #32
 80034e6:	7663      	strb	r3, [r4, #25]
 80034e8:	3310      	adds	r3, #16
 80034ea:	76a3      	strb	r3, [r4, #26]
 80034ec:	9507      	str	r5, [sp, #28]
 80034ee:	0035      	movs	r5, r6
 80034f0:	782b      	ldrb	r3, [r5, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <_svfiprintf_r+0x52>
 80034f6:	2b25      	cmp	r3, #37	; 0x25
 80034f8:	d147      	bne.n	800358a <_svfiprintf_r+0xe2>
 80034fa:	1bab      	subs	r3, r5, r6
 80034fc:	9305      	str	r3, [sp, #20]
 80034fe:	42b5      	cmp	r5, r6
 8003500:	d00c      	beq.n	800351c <_svfiprintf_r+0x74>
 8003502:	0032      	movs	r2, r6
 8003504:	0039      	movs	r1, r7
 8003506:	9803      	ldr	r0, [sp, #12]
 8003508:	f7ff ff6c 	bl	80033e4 <__ssputs_r>
 800350c:	1c43      	adds	r3, r0, #1
 800350e:	d100      	bne.n	8003512 <_svfiprintf_r+0x6a>
 8003510:	e0ae      	b.n	8003670 <_svfiprintf_r+0x1c8>
 8003512:	6962      	ldr	r2, [r4, #20]
 8003514:	9b05      	ldr	r3, [sp, #20]
 8003516:	4694      	mov	ip, r2
 8003518:	4463      	add	r3, ip
 800351a:	6163      	str	r3, [r4, #20]
 800351c:	782b      	ldrb	r3, [r5, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d100      	bne.n	8003524 <_svfiprintf_r+0x7c>
 8003522:	e0a5      	b.n	8003670 <_svfiprintf_r+0x1c8>
 8003524:	2201      	movs	r2, #1
 8003526:	2300      	movs	r3, #0
 8003528:	4252      	negs	r2, r2
 800352a:	6062      	str	r2, [r4, #4]
 800352c:	a904      	add	r1, sp, #16
 800352e:	3254      	adds	r2, #84	; 0x54
 8003530:	1852      	adds	r2, r2, r1
 8003532:	1c6e      	adds	r6, r5, #1
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	60e3      	str	r3, [r4, #12]
 8003538:	60a3      	str	r3, [r4, #8]
 800353a:	7013      	strb	r3, [r2, #0]
 800353c:	65a3      	str	r3, [r4, #88]	; 0x58
 800353e:	2205      	movs	r2, #5
 8003540:	7831      	ldrb	r1, [r6, #0]
 8003542:	4854      	ldr	r0, [pc, #336]	; (8003694 <_svfiprintf_r+0x1ec>)
 8003544:	f000 fa32 	bl	80039ac <memchr>
 8003548:	1c75      	adds	r5, r6, #1
 800354a:	2800      	cmp	r0, #0
 800354c:	d11f      	bne.n	800358e <_svfiprintf_r+0xe6>
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	06d3      	lsls	r3, r2, #27
 8003552:	d504      	bpl.n	800355e <_svfiprintf_r+0xb6>
 8003554:	2353      	movs	r3, #83	; 0x53
 8003556:	a904      	add	r1, sp, #16
 8003558:	185b      	adds	r3, r3, r1
 800355a:	2120      	movs	r1, #32
 800355c:	7019      	strb	r1, [r3, #0]
 800355e:	0713      	lsls	r3, r2, #28
 8003560:	d504      	bpl.n	800356c <_svfiprintf_r+0xc4>
 8003562:	2353      	movs	r3, #83	; 0x53
 8003564:	a904      	add	r1, sp, #16
 8003566:	185b      	adds	r3, r3, r1
 8003568:	212b      	movs	r1, #43	; 0x2b
 800356a:	7019      	strb	r1, [r3, #0]
 800356c:	7833      	ldrb	r3, [r6, #0]
 800356e:	2b2a      	cmp	r3, #42	; 0x2a
 8003570:	d016      	beq.n	80035a0 <_svfiprintf_r+0xf8>
 8003572:	0035      	movs	r5, r6
 8003574:	2100      	movs	r1, #0
 8003576:	200a      	movs	r0, #10
 8003578:	68e3      	ldr	r3, [r4, #12]
 800357a:	782a      	ldrb	r2, [r5, #0]
 800357c:	1c6e      	adds	r6, r5, #1
 800357e:	3a30      	subs	r2, #48	; 0x30
 8003580:	2a09      	cmp	r2, #9
 8003582:	d94e      	bls.n	8003622 <_svfiprintf_r+0x17a>
 8003584:	2900      	cmp	r1, #0
 8003586:	d111      	bne.n	80035ac <_svfiprintf_r+0x104>
 8003588:	e017      	b.n	80035ba <_svfiprintf_r+0x112>
 800358a:	3501      	adds	r5, #1
 800358c:	e7b0      	b.n	80034f0 <_svfiprintf_r+0x48>
 800358e:	4b41      	ldr	r3, [pc, #260]	; (8003694 <_svfiprintf_r+0x1ec>)
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	1ac0      	subs	r0, r0, r3
 8003594:	2301      	movs	r3, #1
 8003596:	4083      	lsls	r3, r0
 8003598:	4313      	orrs	r3, r2
 800359a:	002e      	movs	r6, r5
 800359c:	6023      	str	r3, [r4, #0]
 800359e:	e7ce      	b.n	800353e <_svfiprintf_r+0x96>
 80035a0:	9b07      	ldr	r3, [sp, #28]
 80035a2:	1d19      	adds	r1, r3, #4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	9107      	str	r1, [sp, #28]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	db01      	blt.n	80035b0 <_svfiprintf_r+0x108>
 80035ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80035ae:	e004      	b.n	80035ba <_svfiprintf_r+0x112>
 80035b0:	425b      	negs	r3, r3
 80035b2:	60e3      	str	r3, [r4, #12]
 80035b4:	2302      	movs	r3, #2
 80035b6:	4313      	orrs	r3, r2
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	782b      	ldrb	r3, [r5, #0]
 80035bc:	2b2e      	cmp	r3, #46	; 0x2e
 80035be:	d10a      	bne.n	80035d6 <_svfiprintf_r+0x12e>
 80035c0:	786b      	ldrb	r3, [r5, #1]
 80035c2:	2b2a      	cmp	r3, #42	; 0x2a
 80035c4:	d135      	bne.n	8003632 <_svfiprintf_r+0x18a>
 80035c6:	9b07      	ldr	r3, [sp, #28]
 80035c8:	3502      	adds	r5, #2
 80035ca:	1d1a      	adds	r2, r3, #4
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	9207      	str	r2, [sp, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	db2b      	blt.n	800362c <_svfiprintf_r+0x184>
 80035d4:	9309      	str	r3, [sp, #36]	; 0x24
 80035d6:	4e30      	ldr	r6, [pc, #192]	; (8003698 <_svfiprintf_r+0x1f0>)
 80035d8:	2203      	movs	r2, #3
 80035da:	0030      	movs	r0, r6
 80035dc:	7829      	ldrb	r1, [r5, #0]
 80035de:	f000 f9e5 	bl	80039ac <memchr>
 80035e2:	2800      	cmp	r0, #0
 80035e4:	d006      	beq.n	80035f4 <_svfiprintf_r+0x14c>
 80035e6:	2340      	movs	r3, #64	; 0x40
 80035e8:	1b80      	subs	r0, r0, r6
 80035ea:	4083      	lsls	r3, r0
 80035ec:	6822      	ldr	r2, [r4, #0]
 80035ee:	3501      	adds	r5, #1
 80035f0:	4313      	orrs	r3, r2
 80035f2:	6023      	str	r3, [r4, #0]
 80035f4:	7829      	ldrb	r1, [r5, #0]
 80035f6:	2206      	movs	r2, #6
 80035f8:	4828      	ldr	r0, [pc, #160]	; (800369c <_svfiprintf_r+0x1f4>)
 80035fa:	1c6e      	adds	r6, r5, #1
 80035fc:	7621      	strb	r1, [r4, #24]
 80035fe:	f000 f9d5 	bl	80039ac <memchr>
 8003602:	2800      	cmp	r0, #0
 8003604:	d03c      	beq.n	8003680 <_svfiprintf_r+0x1d8>
 8003606:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <_svfiprintf_r+0x1f8>)
 8003608:	2b00      	cmp	r3, #0
 800360a:	d125      	bne.n	8003658 <_svfiprintf_r+0x1b0>
 800360c:	2207      	movs	r2, #7
 800360e:	9b07      	ldr	r3, [sp, #28]
 8003610:	3307      	adds	r3, #7
 8003612:	4393      	bics	r3, r2
 8003614:	3308      	adds	r3, #8
 8003616:	9307      	str	r3, [sp, #28]
 8003618:	6963      	ldr	r3, [r4, #20]
 800361a:	9a04      	ldr	r2, [sp, #16]
 800361c:	189b      	adds	r3, r3, r2
 800361e:	6163      	str	r3, [r4, #20]
 8003620:	e765      	b.n	80034ee <_svfiprintf_r+0x46>
 8003622:	4343      	muls	r3, r0
 8003624:	0035      	movs	r5, r6
 8003626:	2101      	movs	r1, #1
 8003628:	189b      	adds	r3, r3, r2
 800362a:	e7a6      	b.n	800357a <_svfiprintf_r+0xd2>
 800362c:	2301      	movs	r3, #1
 800362e:	425b      	negs	r3, r3
 8003630:	e7d0      	b.n	80035d4 <_svfiprintf_r+0x12c>
 8003632:	2300      	movs	r3, #0
 8003634:	200a      	movs	r0, #10
 8003636:	001a      	movs	r2, r3
 8003638:	3501      	adds	r5, #1
 800363a:	6063      	str	r3, [r4, #4]
 800363c:	7829      	ldrb	r1, [r5, #0]
 800363e:	1c6e      	adds	r6, r5, #1
 8003640:	3930      	subs	r1, #48	; 0x30
 8003642:	2909      	cmp	r1, #9
 8003644:	d903      	bls.n	800364e <_svfiprintf_r+0x1a6>
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0c5      	beq.n	80035d6 <_svfiprintf_r+0x12e>
 800364a:	9209      	str	r2, [sp, #36]	; 0x24
 800364c:	e7c3      	b.n	80035d6 <_svfiprintf_r+0x12e>
 800364e:	4342      	muls	r2, r0
 8003650:	0035      	movs	r5, r6
 8003652:	2301      	movs	r3, #1
 8003654:	1852      	adds	r2, r2, r1
 8003656:	e7f1      	b.n	800363c <_svfiprintf_r+0x194>
 8003658:	ab07      	add	r3, sp, #28
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	003a      	movs	r2, r7
 800365e:	0021      	movs	r1, r4
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <_svfiprintf_r+0x1fc>)
 8003662:	9803      	ldr	r0, [sp, #12]
 8003664:	e000      	b.n	8003668 <_svfiprintf_r+0x1c0>
 8003666:	bf00      	nop
 8003668:	9004      	str	r0, [sp, #16]
 800366a:	9b04      	ldr	r3, [sp, #16]
 800366c:	3301      	adds	r3, #1
 800366e:	d1d3      	bne.n	8003618 <_svfiprintf_r+0x170>
 8003670:	89bb      	ldrh	r3, [r7, #12]
 8003672:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003674:	065b      	lsls	r3, r3, #25
 8003676:	d400      	bmi.n	800367a <_svfiprintf_r+0x1d2>
 8003678:	e72d      	b.n	80034d6 <_svfiprintf_r+0x2e>
 800367a:	2001      	movs	r0, #1
 800367c:	4240      	negs	r0, r0
 800367e:	e72a      	b.n	80034d6 <_svfiprintf_r+0x2e>
 8003680:	ab07      	add	r3, sp, #28
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	003a      	movs	r2, r7
 8003686:	0021      	movs	r1, r4
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <_svfiprintf_r+0x1fc>)
 800368a:	9803      	ldr	r0, [sp, #12]
 800368c:	f000 f87c 	bl	8003788 <_printf_i>
 8003690:	e7ea      	b.n	8003668 <_svfiprintf_r+0x1c0>
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	08003cdc 	.word	0x08003cdc
 8003698:	08003ce2 	.word	0x08003ce2
 800369c:	08003ce6 	.word	0x08003ce6
 80036a0:	00000000 	.word	0x00000000
 80036a4:	080033e5 	.word	0x080033e5

080036a8 <_printf_common>:
 80036a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036aa:	0015      	movs	r5, r2
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	688a      	ldr	r2, [r1, #8]
 80036b0:	690b      	ldr	r3, [r1, #16]
 80036b2:	000c      	movs	r4, r1
 80036b4:	9000      	str	r0, [sp, #0]
 80036b6:	4293      	cmp	r3, r2
 80036b8:	da00      	bge.n	80036bc <_printf_common+0x14>
 80036ba:	0013      	movs	r3, r2
 80036bc:	0022      	movs	r2, r4
 80036be:	602b      	str	r3, [r5, #0]
 80036c0:	3243      	adds	r2, #67	; 0x43
 80036c2:	7812      	ldrb	r2, [r2, #0]
 80036c4:	2a00      	cmp	r2, #0
 80036c6:	d001      	beq.n	80036cc <_printf_common+0x24>
 80036c8:	3301      	adds	r3, #1
 80036ca:	602b      	str	r3, [r5, #0]
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	069b      	lsls	r3, r3, #26
 80036d0:	d502      	bpl.n	80036d8 <_printf_common+0x30>
 80036d2:	682b      	ldr	r3, [r5, #0]
 80036d4:	3302      	adds	r3, #2
 80036d6:	602b      	str	r3, [r5, #0]
 80036d8:	6822      	ldr	r2, [r4, #0]
 80036da:	2306      	movs	r3, #6
 80036dc:	0017      	movs	r7, r2
 80036de:	401f      	ands	r7, r3
 80036e0:	421a      	tst	r2, r3
 80036e2:	d027      	beq.n	8003734 <_printf_common+0x8c>
 80036e4:	0023      	movs	r3, r4
 80036e6:	3343      	adds	r3, #67	; 0x43
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	1e5a      	subs	r2, r3, #1
 80036ec:	4193      	sbcs	r3, r2
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	0692      	lsls	r2, r2, #26
 80036f2:	d430      	bmi.n	8003756 <_printf_common+0xae>
 80036f4:	0022      	movs	r2, r4
 80036f6:	9901      	ldr	r1, [sp, #4]
 80036f8:	9800      	ldr	r0, [sp, #0]
 80036fa:	9e08      	ldr	r6, [sp, #32]
 80036fc:	3243      	adds	r2, #67	; 0x43
 80036fe:	47b0      	blx	r6
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	d025      	beq.n	8003750 <_printf_common+0xa8>
 8003704:	2306      	movs	r3, #6
 8003706:	6820      	ldr	r0, [r4, #0]
 8003708:	682a      	ldr	r2, [r5, #0]
 800370a:	68e1      	ldr	r1, [r4, #12]
 800370c:	2500      	movs	r5, #0
 800370e:	4003      	ands	r3, r0
 8003710:	2b04      	cmp	r3, #4
 8003712:	d103      	bne.n	800371c <_printf_common+0x74>
 8003714:	1a8d      	subs	r5, r1, r2
 8003716:	43eb      	mvns	r3, r5
 8003718:	17db      	asrs	r3, r3, #31
 800371a:	401d      	ands	r5, r3
 800371c:	68a3      	ldr	r3, [r4, #8]
 800371e:	6922      	ldr	r2, [r4, #16]
 8003720:	4293      	cmp	r3, r2
 8003722:	dd01      	ble.n	8003728 <_printf_common+0x80>
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	18ed      	adds	r5, r5, r3
 8003728:	2700      	movs	r7, #0
 800372a:	42bd      	cmp	r5, r7
 800372c:	d120      	bne.n	8003770 <_printf_common+0xc8>
 800372e:	2000      	movs	r0, #0
 8003730:	e010      	b.n	8003754 <_printf_common+0xac>
 8003732:	3701      	adds	r7, #1
 8003734:	68e3      	ldr	r3, [r4, #12]
 8003736:	682a      	ldr	r2, [r5, #0]
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	42bb      	cmp	r3, r7
 800373c:	ddd2      	ble.n	80036e4 <_printf_common+0x3c>
 800373e:	0022      	movs	r2, r4
 8003740:	2301      	movs	r3, #1
 8003742:	9901      	ldr	r1, [sp, #4]
 8003744:	9800      	ldr	r0, [sp, #0]
 8003746:	9e08      	ldr	r6, [sp, #32]
 8003748:	3219      	adds	r2, #25
 800374a:	47b0      	blx	r6
 800374c:	1c43      	adds	r3, r0, #1
 800374e:	d1f0      	bne.n	8003732 <_printf_common+0x8a>
 8003750:	2001      	movs	r0, #1
 8003752:	4240      	negs	r0, r0
 8003754:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003756:	2030      	movs	r0, #48	; 0x30
 8003758:	18e1      	adds	r1, r4, r3
 800375a:	3143      	adds	r1, #67	; 0x43
 800375c:	7008      	strb	r0, [r1, #0]
 800375e:	0021      	movs	r1, r4
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	3145      	adds	r1, #69	; 0x45
 8003764:	7809      	ldrb	r1, [r1, #0]
 8003766:	18a2      	adds	r2, r4, r2
 8003768:	3243      	adds	r2, #67	; 0x43
 800376a:	3302      	adds	r3, #2
 800376c:	7011      	strb	r1, [r2, #0]
 800376e:	e7c1      	b.n	80036f4 <_printf_common+0x4c>
 8003770:	0022      	movs	r2, r4
 8003772:	2301      	movs	r3, #1
 8003774:	9901      	ldr	r1, [sp, #4]
 8003776:	9800      	ldr	r0, [sp, #0]
 8003778:	9e08      	ldr	r6, [sp, #32]
 800377a:	321a      	adds	r2, #26
 800377c:	47b0      	blx	r6
 800377e:	1c43      	adds	r3, r0, #1
 8003780:	d0e6      	beq.n	8003750 <_printf_common+0xa8>
 8003782:	3701      	adds	r7, #1
 8003784:	e7d1      	b.n	800372a <_printf_common+0x82>
	...

08003788 <_printf_i>:
 8003788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800378a:	b08b      	sub	sp, #44	; 0x2c
 800378c:	9206      	str	r2, [sp, #24]
 800378e:	000a      	movs	r2, r1
 8003790:	3243      	adds	r2, #67	; 0x43
 8003792:	9307      	str	r3, [sp, #28]
 8003794:	9005      	str	r0, [sp, #20]
 8003796:	9204      	str	r2, [sp, #16]
 8003798:	7e0a      	ldrb	r2, [r1, #24]
 800379a:	000c      	movs	r4, r1
 800379c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800379e:	2a78      	cmp	r2, #120	; 0x78
 80037a0:	d807      	bhi.n	80037b2 <_printf_i+0x2a>
 80037a2:	2a62      	cmp	r2, #98	; 0x62
 80037a4:	d809      	bhi.n	80037ba <_printf_i+0x32>
 80037a6:	2a00      	cmp	r2, #0
 80037a8:	d100      	bne.n	80037ac <_printf_i+0x24>
 80037aa:	e0c1      	b.n	8003930 <_printf_i+0x1a8>
 80037ac:	2a58      	cmp	r2, #88	; 0x58
 80037ae:	d100      	bne.n	80037b2 <_printf_i+0x2a>
 80037b0:	e08c      	b.n	80038cc <_printf_i+0x144>
 80037b2:	0026      	movs	r6, r4
 80037b4:	3642      	adds	r6, #66	; 0x42
 80037b6:	7032      	strb	r2, [r6, #0]
 80037b8:	e022      	b.n	8003800 <_printf_i+0x78>
 80037ba:	0010      	movs	r0, r2
 80037bc:	3863      	subs	r0, #99	; 0x63
 80037be:	2815      	cmp	r0, #21
 80037c0:	d8f7      	bhi.n	80037b2 <_printf_i+0x2a>
 80037c2:	f7fc fca9 	bl	8000118 <__gnu_thumb1_case_shi>
 80037c6:	0016      	.short	0x0016
 80037c8:	fff6001f 	.word	0xfff6001f
 80037cc:	fff6fff6 	.word	0xfff6fff6
 80037d0:	001ffff6 	.word	0x001ffff6
 80037d4:	fff6fff6 	.word	0xfff6fff6
 80037d8:	fff6fff6 	.word	0xfff6fff6
 80037dc:	003600a8 	.word	0x003600a8
 80037e0:	fff6009a 	.word	0xfff6009a
 80037e4:	00b9fff6 	.word	0x00b9fff6
 80037e8:	0036fff6 	.word	0x0036fff6
 80037ec:	fff6fff6 	.word	0xfff6fff6
 80037f0:	009e      	.short	0x009e
 80037f2:	0026      	movs	r6, r4
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	3642      	adds	r6, #66	; 0x42
 80037f8:	1d11      	adds	r1, r2, #4
 80037fa:	6019      	str	r1, [r3, #0]
 80037fc:	6813      	ldr	r3, [r2, #0]
 80037fe:	7033      	strb	r3, [r6, #0]
 8003800:	2301      	movs	r3, #1
 8003802:	e0a7      	b.n	8003954 <_printf_i+0x1cc>
 8003804:	6808      	ldr	r0, [r1, #0]
 8003806:	6819      	ldr	r1, [r3, #0]
 8003808:	1d0a      	adds	r2, r1, #4
 800380a:	0605      	lsls	r5, r0, #24
 800380c:	d50b      	bpl.n	8003826 <_printf_i+0x9e>
 800380e:	680d      	ldr	r5, [r1, #0]
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	2d00      	cmp	r5, #0
 8003814:	da03      	bge.n	800381e <_printf_i+0x96>
 8003816:	232d      	movs	r3, #45	; 0x2d
 8003818:	9a04      	ldr	r2, [sp, #16]
 800381a:	426d      	negs	r5, r5
 800381c:	7013      	strb	r3, [r2, #0]
 800381e:	4b61      	ldr	r3, [pc, #388]	; (80039a4 <_printf_i+0x21c>)
 8003820:	270a      	movs	r7, #10
 8003822:	9303      	str	r3, [sp, #12]
 8003824:	e01b      	b.n	800385e <_printf_i+0xd6>
 8003826:	680d      	ldr	r5, [r1, #0]
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	0641      	lsls	r1, r0, #25
 800382c:	d5f1      	bpl.n	8003812 <_printf_i+0x8a>
 800382e:	b22d      	sxth	r5, r5
 8003830:	e7ef      	b.n	8003812 <_printf_i+0x8a>
 8003832:	680d      	ldr	r5, [r1, #0]
 8003834:	6819      	ldr	r1, [r3, #0]
 8003836:	1d08      	adds	r0, r1, #4
 8003838:	6018      	str	r0, [r3, #0]
 800383a:	062e      	lsls	r6, r5, #24
 800383c:	d501      	bpl.n	8003842 <_printf_i+0xba>
 800383e:	680d      	ldr	r5, [r1, #0]
 8003840:	e003      	b.n	800384a <_printf_i+0xc2>
 8003842:	066d      	lsls	r5, r5, #25
 8003844:	d5fb      	bpl.n	800383e <_printf_i+0xb6>
 8003846:	680d      	ldr	r5, [r1, #0]
 8003848:	b2ad      	uxth	r5, r5
 800384a:	4b56      	ldr	r3, [pc, #344]	; (80039a4 <_printf_i+0x21c>)
 800384c:	2708      	movs	r7, #8
 800384e:	9303      	str	r3, [sp, #12]
 8003850:	2a6f      	cmp	r2, #111	; 0x6f
 8003852:	d000      	beq.n	8003856 <_printf_i+0xce>
 8003854:	3702      	adds	r7, #2
 8003856:	0023      	movs	r3, r4
 8003858:	2200      	movs	r2, #0
 800385a:	3343      	adds	r3, #67	; 0x43
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	6863      	ldr	r3, [r4, #4]
 8003860:	60a3      	str	r3, [r4, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	db03      	blt.n	800386e <_printf_i+0xe6>
 8003866:	2204      	movs	r2, #4
 8003868:	6821      	ldr	r1, [r4, #0]
 800386a:	4391      	bics	r1, r2
 800386c:	6021      	str	r1, [r4, #0]
 800386e:	2d00      	cmp	r5, #0
 8003870:	d102      	bne.n	8003878 <_printf_i+0xf0>
 8003872:	9e04      	ldr	r6, [sp, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00c      	beq.n	8003892 <_printf_i+0x10a>
 8003878:	9e04      	ldr	r6, [sp, #16]
 800387a:	0028      	movs	r0, r5
 800387c:	0039      	movs	r1, r7
 800387e:	f7fc fcdb 	bl	8000238 <__aeabi_uidivmod>
 8003882:	9b03      	ldr	r3, [sp, #12]
 8003884:	3e01      	subs	r6, #1
 8003886:	5c5b      	ldrb	r3, [r3, r1]
 8003888:	7033      	strb	r3, [r6, #0]
 800388a:	002b      	movs	r3, r5
 800388c:	0005      	movs	r5, r0
 800388e:	429f      	cmp	r7, r3
 8003890:	d9f3      	bls.n	800387a <_printf_i+0xf2>
 8003892:	2f08      	cmp	r7, #8
 8003894:	d109      	bne.n	80038aa <_printf_i+0x122>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	07db      	lsls	r3, r3, #31
 800389a:	d506      	bpl.n	80038aa <_printf_i+0x122>
 800389c:	6863      	ldr	r3, [r4, #4]
 800389e:	6922      	ldr	r2, [r4, #16]
 80038a0:	4293      	cmp	r3, r2
 80038a2:	dc02      	bgt.n	80038aa <_printf_i+0x122>
 80038a4:	2330      	movs	r3, #48	; 0x30
 80038a6:	3e01      	subs	r6, #1
 80038a8:	7033      	strb	r3, [r6, #0]
 80038aa:	9b04      	ldr	r3, [sp, #16]
 80038ac:	1b9b      	subs	r3, r3, r6
 80038ae:	6123      	str	r3, [r4, #16]
 80038b0:	9b07      	ldr	r3, [sp, #28]
 80038b2:	0021      	movs	r1, r4
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	9805      	ldr	r0, [sp, #20]
 80038b8:	9b06      	ldr	r3, [sp, #24]
 80038ba:	aa09      	add	r2, sp, #36	; 0x24
 80038bc:	f7ff fef4 	bl	80036a8 <_printf_common>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d14c      	bne.n	800395e <_printf_i+0x1d6>
 80038c4:	2001      	movs	r0, #1
 80038c6:	4240      	negs	r0, r0
 80038c8:	b00b      	add	sp, #44	; 0x2c
 80038ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038cc:	3145      	adds	r1, #69	; 0x45
 80038ce:	700a      	strb	r2, [r1, #0]
 80038d0:	4a34      	ldr	r2, [pc, #208]	; (80039a4 <_printf_i+0x21c>)
 80038d2:	9203      	str	r2, [sp, #12]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	6821      	ldr	r1, [r4, #0]
 80038d8:	ca20      	ldmia	r2!, {r5}
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	0608      	lsls	r0, r1, #24
 80038de:	d516      	bpl.n	800390e <_printf_i+0x186>
 80038e0:	07cb      	lsls	r3, r1, #31
 80038e2:	d502      	bpl.n	80038ea <_printf_i+0x162>
 80038e4:	2320      	movs	r3, #32
 80038e6:	4319      	orrs	r1, r3
 80038e8:	6021      	str	r1, [r4, #0]
 80038ea:	2710      	movs	r7, #16
 80038ec:	2d00      	cmp	r5, #0
 80038ee:	d1b2      	bne.n	8003856 <_printf_i+0xce>
 80038f0:	2320      	movs	r3, #32
 80038f2:	6822      	ldr	r2, [r4, #0]
 80038f4:	439a      	bics	r2, r3
 80038f6:	6022      	str	r2, [r4, #0]
 80038f8:	e7ad      	b.n	8003856 <_printf_i+0xce>
 80038fa:	2220      	movs	r2, #32
 80038fc:	6809      	ldr	r1, [r1, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	6022      	str	r2, [r4, #0]
 8003902:	0022      	movs	r2, r4
 8003904:	2178      	movs	r1, #120	; 0x78
 8003906:	3245      	adds	r2, #69	; 0x45
 8003908:	7011      	strb	r1, [r2, #0]
 800390a:	4a27      	ldr	r2, [pc, #156]	; (80039a8 <_printf_i+0x220>)
 800390c:	e7e1      	b.n	80038d2 <_printf_i+0x14a>
 800390e:	0648      	lsls	r0, r1, #25
 8003910:	d5e6      	bpl.n	80038e0 <_printf_i+0x158>
 8003912:	b2ad      	uxth	r5, r5
 8003914:	e7e4      	b.n	80038e0 <_printf_i+0x158>
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	680d      	ldr	r5, [r1, #0]
 800391a:	1d10      	adds	r0, r2, #4
 800391c:	6949      	ldr	r1, [r1, #20]
 800391e:	6018      	str	r0, [r3, #0]
 8003920:	6813      	ldr	r3, [r2, #0]
 8003922:	062e      	lsls	r6, r5, #24
 8003924:	d501      	bpl.n	800392a <_printf_i+0x1a2>
 8003926:	6019      	str	r1, [r3, #0]
 8003928:	e002      	b.n	8003930 <_printf_i+0x1a8>
 800392a:	066d      	lsls	r5, r5, #25
 800392c:	d5fb      	bpl.n	8003926 <_printf_i+0x19e>
 800392e:	8019      	strh	r1, [r3, #0]
 8003930:	2300      	movs	r3, #0
 8003932:	9e04      	ldr	r6, [sp, #16]
 8003934:	6123      	str	r3, [r4, #16]
 8003936:	e7bb      	b.n	80038b0 <_printf_i+0x128>
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	1d11      	adds	r1, r2, #4
 800393c:	6019      	str	r1, [r3, #0]
 800393e:	6816      	ldr	r6, [r2, #0]
 8003940:	2100      	movs	r1, #0
 8003942:	0030      	movs	r0, r6
 8003944:	6862      	ldr	r2, [r4, #4]
 8003946:	f000 f831 	bl	80039ac <memchr>
 800394a:	2800      	cmp	r0, #0
 800394c:	d001      	beq.n	8003952 <_printf_i+0x1ca>
 800394e:	1b80      	subs	r0, r0, r6
 8003950:	6060      	str	r0, [r4, #4]
 8003952:	6863      	ldr	r3, [r4, #4]
 8003954:	6123      	str	r3, [r4, #16]
 8003956:	2300      	movs	r3, #0
 8003958:	9a04      	ldr	r2, [sp, #16]
 800395a:	7013      	strb	r3, [r2, #0]
 800395c:	e7a8      	b.n	80038b0 <_printf_i+0x128>
 800395e:	6923      	ldr	r3, [r4, #16]
 8003960:	0032      	movs	r2, r6
 8003962:	9906      	ldr	r1, [sp, #24]
 8003964:	9805      	ldr	r0, [sp, #20]
 8003966:	9d07      	ldr	r5, [sp, #28]
 8003968:	47a8      	blx	r5
 800396a:	1c43      	adds	r3, r0, #1
 800396c:	d0aa      	beq.n	80038c4 <_printf_i+0x13c>
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	079b      	lsls	r3, r3, #30
 8003972:	d415      	bmi.n	80039a0 <_printf_i+0x218>
 8003974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003976:	68e0      	ldr	r0, [r4, #12]
 8003978:	4298      	cmp	r0, r3
 800397a:	daa5      	bge.n	80038c8 <_printf_i+0x140>
 800397c:	0018      	movs	r0, r3
 800397e:	e7a3      	b.n	80038c8 <_printf_i+0x140>
 8003980:	0022      	movs	r2, r4
 8003982:	2301      	movs	r3, #1
 8003984:	9906      	ldr	r1, [sp, #24]
 8003986:	9805      	ldr	r0, [sp, #20]
 8003988:	9e07      	ldr	r6, [sp, #28]
 800398a:	3219      	adds	r2, #25
 800398c:	47b0      	blx	r6
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	d098      	beq.n	80038c4 <_printf_i+0x13c>
 8003992:	3501      	adds	r5, #1
 8003994:	68e3      	ldr	r3, [r4, #12]
 8003996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	42ab      	cmp	r3, r5
 800399c:	dcf0      	bgt.n	8003980 <_printf_i+0x1f8>
 800399e:	e7e9      	b.n	8003974 <_printf_i+0x1ec>
 80039a0:	2500      	movs	r5, #0
 80039a2:	e7f7      	b.n	8003994 <_printf_i+0x20c>
 80039a4:	08003ced 	.word	0x08003ced
 80039a8:	08003cfe 	.word	0x08003cfe

080039ac <memchr>:
 80039ac:	b2c9      	uxtb	r1, r1
 80039ae:	1882      	adds	r2, r0, r2
 80039b0:	4290      	cmp	r0, r2
 80039b2:	d101      	bne.n	80039b8 <memchr+0xc>
 80039b4:	2000      	movs	r0, #0
 80039b6:	4770      	bx	lr
 80039b8:	7803      	ldrb	r3, [r0, #0]
 80039ba:	428b      	cmp	r3, r1
 80039bc:	d0fb      	beq.n	80039b6 <memchr+0xa>
 80039be:	3001      	adds	r0, #1
 80039c0:	e7f6      	b.n	80039b0 <memchr+0x4>

080039c2 <memcpy>:
 80039c2:	2300      	movs	r3, #0
 80039c4:	b510      	push	{r4, lr}
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d100      	bne.n	80039cc <memcpy+0xa>
 80039ca:	bd10      	pop	{r4, pc}
 80039cc:	5ccc      	ldrb	r4, [r1, r3]
 80039ce:	54c4      	strb	r4, [r0, r3]
 80039d0:	3301      	adds	r3, #1
 80039d2:	e7f8      	b.n	80039c6 <memcpy+0x4>

080039d4 <memmove>:
 80039d4:	b510      	push	{r4, lr}
 80039d6:	4288      	cmp	r0, r1
 80039d8:	d902      	bls.n	80039e0 <memmove+0xc>
 80039da:	188b      	adds	r3, r1, r2
 80039dc:	4298      	cmp	r0, r3
 80039de:	d303      	bcc.n	80039e8 <memmove+0x14>
 80039e0:	2300      	movs	r3, #0
 80039e2:	e007      	b.n	80039f4 <memmove+0x20>
 80039e4:	5c8b      	ldrb	r3, [r1, r2]
 80039e6:	5483      	strb	r3, [r0, r2]
 80039e8:	3a01      	subs	r2, #1
 80039ea:	d2fb      	bcs.n	80039e4 <memmove+0x10>
 80039ec:	bd10      	pop	{r4, pc}
 80039ee:	5ccc      	ldrb	r4, [r1, r3]
 80039f0:	54c4      	strb	r4, [r0, r3]
 80039f2:	3301      	adds	r3, #1
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1fa      	bne.n	80039ee <memmove+0x1a>
 80039f8:	e7f8      	b.n	80039ec <memmove+0x18>
	...

080039fc <_free_r>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	0005      	movs	r5, r0
 8003a00:	2900      	cmp	r1, #0
 8003a02:	d010      	beq.n	8003a26 <_free_r+0x2a>
 8003a04:	1f0c      	subs	r4, r1, #4
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	da00      	bge.n	8003a0e <_free_r+0x12>
 8003a0c:	18e4      	adds	r4, r4, r3
 8003a0e:	0028      	movs	r0, r5
 8003a10:	f000 f918 	bl	8003c44 <__malloc_lock>
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <_free_r+0x90>)
 8003a16:	6813      	ldr	r3, [r2, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d105      	bne.n	8003a28 <_free_r+0x2c>
 8003a1c:	6063      	str	r3, [r4, #4]
 8003a1e:	6014      	str	r4, [r2, #0]
 8003a20:	0028      	movs	r0, r5
 8003a22:	f000 f917 	bl	8003c54 <__malloc_unlock>
 8003a26:	bd70      	pop	{r4, r5, r6, pc}
 8003a28:	42a3      	cmp	r3, r4
 8003a2a:	d908      	bls.n	8003a3e <_free_r+0x42>
 8003a2c:	6821      	ldr	r1, [r4, #0]
 8003a2e:	1860      	adds	r0, r4, r1
 8003a30:	4283      	cmp	r3, r0
 8003a32:	d1f3      	bne.n	8003a1c <_free_r+0x20>
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	1841      	adds	r1, r0, r1
 8003a3a:	6021      	str	r1, [r4, #0]
 8003a3c:	e7ee      	b.n	8003a1c <_free_r+0x20>
 8003a3e:	001a      	movs	r2, r3
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <_free_r+0x4e>
 8003a46:	42a3      	cmp	r3, r4
 8003a48:	d9f9      	bls.n	8003a3e <_free_r+0x42>
 8003a4a:	6811      	ldr	r1, [r2, #0]
 8003a4c:	1850      	adds	r0, r2, r1
 8003a4e:	42a0      	cmp	r0, r4
 8003a50:	d10b      	bne.n	8003a6a <_free_r+0x6e>
 8003a52:	6820      	ldr	r0, [r4, #0]
 8003a54:	1809      	adds	r1, r1, r0
 8003a56:	1850      	adds	r0, r2, r1
 8003a58:	6011      	str	r1, [r2, #0]
 8003a5a:	4283      	cmp	r3, r0
 8003a5c:	d1e0      	bne.n	8003a20 <_free_r+0x24>
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	1841      	adds	r1, r0, r1
 8003a64:	6011      	str	r1, [r2, #0]
 8003a66:	6053      	str	r3, [r2, #4]
 8003a68:	e7da      	b.n	8003a20 <_free_r+0x24>
 8003a6a:	42a0      	cmp	r0, r4
 8003a6c:	d902      	bls.n	8003a74 <_free_r+0x78>
 8003a6e:	230c      	movs	r3, #12
 8003a70:	602b      	str	r3, [r5, #0]
 8003a72:	e7d5      	b.n	8003a20 <_free_r+0x24>
 8003a74:	6821      	ldr	r1, [r4, #0]
 8003a76:	1860      	adds	r0, r4, r1
 8003a78:	4283      	cmp	r3, r0
 8003a7a:	d103      	bne.n	8003a84 <_free_r+0x88>
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	1841      	adds	r1, r0, r1
 8003a82:	6021      	str	r1, [r4, #0]
 8003a84:	6063      	str	r3, [r4, #4]
 8003a86:	6054      	str	r4, [r2, #4]
 8003a88:	e7ca      	b.n	8003a20 <_free_r+0x24>
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	20000358 	.word	0x20000358

08003a90 <sbrk_aligned>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	4e0f      	ldr	r6, [pc, #60]	; (8003ad0 <sbrk_aligned+0x40>)
 8003a94:	000d      	movs	r5, r1
 8003a96:	6831      	ldr	r1, [r6, #0]
 8003a98:	0004      	movs	r4, r0
 8003a9a:	2900      	cmp	r1, #0
 8003a9c:	d102      	bne.n	8003aa4 <sbrk_aligned+0x14>
 8003a9e:	f000 f8bf 	bl	8003c20 <_sbrk_r>
 8003aa2:	6030      	str	r0, [r6, #0]
 8003aa4:	0029      	movs	r1, r5
 8003aa6:	0020      	movs	r0, r4
 8003aa8:	f000 f8ba 	bl	8003c20 <_sbrk_r>
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	d00a      	beq.n	8003ac6 <sbrk_aligned+0x36>
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	1cc5      	adds	r5, r0, #3
 8003ab4:	439d      	bics	r5, r3
 8003ab6:	42a8      	cmp	r0, r5
 8003ab8:	d007      	beq.n	8003aca <sbrk_aligned+0x3a>
 8003aba:	1a29      	subs	r1, r5, r0
 8003abc:	0020      	movs	r0, r4
 8003abe:	f000 f8af 	bl	8003c20 <_sbrk_r>
 8003ac2:	1c43      	adds	r3, r0, #1
 8003ac4:	d101      	bne.n	8003aca <sbrk_aligned+0x3a>
 8003ac6:	2501      	movs	r5, #1
 8003ac8:	426d      	negs	r5, r5
 8003aca:	0028      	movs	r0, r5
 8003acc:	bd70      	pop	{r4, r5, r6, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	2000035c 	.word	0x2000035c

08003ad4 <_malloc_r>:
 8003ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	1ccb      	adds	r3, r1, #3
 8003ada:	4393      	bics	r3, r2
 8003adc:	3308      	adds	r3, #8
 8003ade:	0006      	movs	r6, r0
 8003ae0:	001f      	movs	r7, r3
 8003ae2:	2b0c      	cmp	r3, #12
 8003ae4:	d232      	bcs.n	8003b4c <_malloc_r+0x78>
 8003ae6:	270c      	movs	r7, #12
 8003ae8:	42b9      	cmp	r1, r7
 8003aea:	d831      	bhi.n	8003b50 <_malloc_r+0x7c>
 8003aec:	0030      	movs	r0, r6
 8003aee:	f000 f8a9 	bl	8003c44 <__malloc_lock>
 8003af2:	4d32      	ldr	r5, [pc, #200]	; (8003bbc <_malloc_r+0xe8>)
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	001c      	movs	r4, r3
 8003af8:	2c00      	cmp	r4, #0
 8003afa:	d12e      	bne.n	8003b5a <_malloc_r+0x86>
 8003afc:	0039      	movs	r1, r7
 8003afe:	0030      	movs	r0, r6
 8003b00:	f7ff ffc6 	bl	8003a90 <sbrk_aligned>
 8003b04:	0004      	movs	r4, r0
 8003b06:	1c43      	adds	r3, r0, #1
 8003b08:	d11e      	bne.n	8003b48 <_malloc_r+0x74>
 8003b0a:	682c      	ldr	r4, [r5, #0]
 8003b0c:	0025      	movs	r5, r4
 8003b0e:	2d00      	cmp	r5, #0
 8003b10:	d14a      	bne.n	8003ba8 <_malloc_r+0xd4>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	0029      	movs	r1, r5
 8003b16:	18e3      	adds	r3, r4, r3
 8003b18:	0030      	movs	r0, r6
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	f000 f880 	bl	8003c20 <_sbrk_r>
 8003b20:	9b01      	ldr	r3, [sp, #4]
 8003b22:	4283      	cmp	r3, r0
 8003b24:	d143      	bne.n	8003bae <_malloc_r+0xda>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	3703      	adds	r7, #3
 8003b2a:	1aff      	subs	r7, r7, r3
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	439f      	bics	r7, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	2f0c      	cmp	r7, #12
 8003b34:	d200      	bcs.n	8003b38 <_malloc_r+0x64>
 8003b36:	270c      	movs	r7, #12
 8003b38:	0039      	movs	r1, r7
 8003b3a:	0030      	movs	r0, r6
 8003b3c:	f7ff ffa8 	bl	8003a90 <sbrk_aligned>
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	d034      	beq.n	8003bae <_malloc_r+0xda>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	19df      	adds	r7, r3, r7
 8003b48:	6027      	str	r7, [r4, #0]
 8003b4a:	e013      	b.n	8003b74 <_malloc_r+0xa0>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	dacb      	bge.n	8003ae8 <_malloc_r+0x14>
 8003b50:	230c      	movs	r3, #12
 8003b52:	2500      	movs	r5, #0
 8003b54:	6033      	str	r3, [r6, #0]
 8003b56:	0028      	movs	r0, r5
 8003b58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	1bd1      	subs	r1, r2, r7
 8003b5e:	d420      	bmi.n	8003ba2 <_malloc_r+0xce>
 8003b60:	290b      	cmp	r1, #11
 8003b62:	d917      	bls.n	8003b94 <_malloc_r+0xc0>
 8003b64:	19e2      	adds	r2, r4, r7
 8003b66:	6027      	str	r7, [r4, #0]
 8003b68:	42a3      	cmp	r3, r4
 8003b6a:	d111      	bne.n	8003b90 <_malloc_r+0xbc>
 8003b6c:	602a      	str	r2, [r5, #0]
 8003b6e:	6863      	ldr	r3, [r4, #4]
 8003b70:	6011      	str	r1, [r2, #0]
 8003b72:	6053      	str	r3, [r2, #4]
 8003b74:	0030      	movs	r0, r6
 8003b76:	0025      	movs	r5, r4
 8003b78:	f000 f86c 	bl	8003c54 <__malloc_unlock>
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	350b      	adds	r5, #11
 8003b80:	1d23      	adds	r3, r4, #4
 8003b82:	4395      	bics	r5, r2
 8003b84:	1aea      	subs	r2, r5, r3
 8003b86:	429d      	cmp	r5, r3
 8003b88:	d0e5      	beq.n	8003b56 <_malloc_r+0x82>
 8003b8a:	1b5b      	subs	r3, r3, r5
 8003b8c:	50a3      	str	r3, [r4, r2]
 8003b8e:	e7e2      	b.n	8003b56 <_malloc_r+0x82>
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	e7ec      	b.n	8003b6e <_malloc_r+0x9a>
 8003b94:	6862      	ldr	r2, [r4, #4]
 8003b96:	42a3      	cmp	r3, r4
 8003b98:	d101      	bne.n	8003b9e <_malloc_r+0xca>
 8003b9a:	602a      	str	r2, [r5, #0]
 8003b9c:	e7ea      	b.n	8003b74 <_malloc_r+0xa0>
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	e7e8      	b.n	8003b74 <_malloc_r+0xa0>
 8003ba2:	0023      	movs	r3, r4
 8003ba4:	6864      	ldr	r4, [r4, #4]
 8003ba6:	e7a7      	b.n	8003af8 <_malloc_r+0x24>
 8003ba8:	002c      	movs	r4, r5
 8003baa:	686d      	ldr	r5, [r5, #4]
 8003bac:	e7af      	b.n	8003b0e <_malloc_r+0x3a>
 8003bae:	230c      	movs	r3, #12
 8003bb0:	0030      	movs	r0, r6
 8003bb2:	6033      	str	r3, [r6, #0]
 8003bb4:	f000 f84e 	bl	8003c54 <__malloc_unlock>
 8003bb8:	e7cd      	b.n	8003b56 <_malloc_r+0x82>
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	20000358 	.word	0x20000358

08003bc0 <_realloc_r>:
 8003bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bc2:	0007      	movs	r7, r0
 8003bc4:	000e      	movs	r6, r1
 8003bc6:	0014      	movs	r4, r2
 8003bc8:	2900      	cmp	r1, #0
 8003bca:	d105      	bne.n	8003bd8 <_realloc_r+0x18>
 8003bcc:	0011      	movs	r1, r2
 8003bce:	f7ff ff81 	bl	8003ad4 <_malloc_r>
 8003bd2:	0005      	movs	r5, r0
 8003bd4:	0028      	movs	r0, r5
 8003bd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bd8:	2a00      	cmp	r2, #0
 8003bda:	d103      	bne.n	8003be4 <_realloc_r+0x24>
 8003bdc:	f7ff ff0e 	bl	80039fc <_free_r>
 8003be0:	0025      	movs	r5, r4
 8003be2:	e7f7      	b.n	8003bd4 <_realloc_r+0x14>
 8003be4:	f000 f83e 	bl	8003c64 <_malloc_usable_size_r>
 8003be8:	9001      	str	r0, [sp, #4]
 8003bea:	4284      	cmp	r4, r0
 8003bec:	d803      	bhi.n	8003bf6 <_realloc_r+0x36>
 8003bee:	0035      	movs	r5, r6
 8003bf0:	0843      	lsrs	r3, r0, #1
 8003bf2:	42a3      	cmp	r3, r4
 8003bf4:	d3ee      	bcc.n	8003bd4 <_realloc_r+0x14>
 8003bf6:	0021      	movs	r1, r4
 8003bf8:	0038      	movs	r0, r7
 8003bfa:	f7ff ff6b 	bl	8003ad4 <_malloc_r>
 8003bfe:	1e05      	subs	r5, r0, #0
 8003c00:	d0e8      	beq.n	8003bd4 <_realloc_r+0x14>
 8003c02:	9b01      	ldr	r3, [sp, #4]
 8003c04:	0022      	movs	r2, r4
 8003c06:	429c      	cmp	r4, r3
 8003c08:	d900      	bls.n	8003c0c <_realloc_r+0x4c>
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	0031      	movs	r1, r6
 8003c0e:	0028      	movs	r0, r5
 8003c10:	f7ff fed7 	bl	80039c2 <memcpy>
 8003c14:	0031      	movs	r1, r6
 8003c16:	0038      	movs	r0, r7
 8003c18:	f7ff fef0 	bl	80039fc <_free_r>
 8003c1c:	e7da      	b.n	8003bd4 <_realloc_r+0x14>
	...

08003c20 <_sbrk_r>:
 8003c20:	2300      	movs	r3, #0
 8003c22:	b570      	push	{r4, r5, r6, lr}
 8003c24:	4d06      	ldr	r5, [pc, #24]	; (8003c40 <_sbrk_r+0x20>)
 8003c26:	0004      	movs	r4, r0
 8003c28:	0008      	movs	r0, r1
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	f7fc febe 	bl	80009ac <_sbrk>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d103      	bne.n	8003c3c <_sbrk_r+0x1c>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d000      	beq.n	8003c3c <_sbrk_r+0x1c>
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	bd70      	pop	{r4, r5, r6, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	20000360 	.word	0x20000360

08003c44 <__malloc_lock>:
 8003c44:	b510      	push	{r4, lr}
 8003c46:	4802      	ldr	r0, [pc, #8]	; (8003c50 <__malloc_lock+0xc>)
 8003c48:	f000 f814 	bl	8003c74 <__retarget_lock_acquire_recursive>
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	20000364 	.word	0x20000364

08003c54 <__malloc_unlock>:
 8003c54:	b510      	push	{r4, lr}
 8003c56:	4802      	ldr	r0, [pc, #8]	; (8003c60 <__malloc_unlock+0xc>)
 8003c58:	f000 f80d 	bl	8003c76 <__retarget_lock_release_recursive>
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	20000364 	.word	0x20000364

08003c64 <_malloc_usable_size_r>:
 8003c64:	1f0b      	subs	r3, r1, #4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	1f18      	subs	r0, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	da01      	bge.n	8003c72 <_malloc_usable_size_r+0xe>
 8003c6e:	580b      	ldr	r3, [r1, r0]
 8003c70:	18c0      	adds	r0, r0, r3
 8003c72:	4770      	bx	lr

08003c74 <__retarget_lock_acquire_recursive>:
 8003c74:	4770      	bx	lr

08003c76 <__retarget_lock_release_recursive>:
 8003c76:	4770      	bx	lr

08003c78 <_init>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr

08003c84 <_fini>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr
